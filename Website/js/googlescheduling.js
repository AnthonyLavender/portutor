(function(a, b) {
    typeof exports === 'object' && typeof module !== 'undefined' ? b(exports) : typeof define === 'function' && define.amd ? define(['exports'], b) : (b((a.PorTutor = a.PorTutor || {}, a.PorTutor.Scheduling = {})))
}(this, (function(O) {
    'use strict';

    function __$styleInject(a, b) {
        if (typeof document === 'undefined') {
            return b
        }
        a = a || '';
        var c = document.head || document.getElementsByTagName('head')[0];
        var d = document.createElement('style');
        d.type = 'text/css';
        c.appendChild(d);
        if (d.styleSheet) {
            d.styleSheet.cssText = a
        } else {
            d.appendChild(document.createTextNode(a))
        }
        return b
    }
    var P = {
        MonthRange: 0,
        SingleMonth: 1,
        WeekRange: 2,
        List: 3,
        Timetable: 4,
        ResourceView: 5
    };
    var Q = {
        Top: 0,
        Middle: 1,
        Bottom: 2
    };
    var R = {
        Second: 0,
        Minute: 1,
        Hour: 2,
        Day: 3,
        Week: 4,
        Month: 5,
        Year: 6
    };
    var S = {
        SingleLetter: 0,
        Abbreviated: 1,
        Full: 2
    };
    var T = {
        None: 0,
        Title: 1,
        Buttons: 2
    };
    var U = {
        None: 0,
        Left: 1,
        Right: 2
    };
    var V = {
        None: 0,
        Top: 1,
        Bottom: 2
    };
    var W = {
        Horizontal: 0,
        Vertical: 1
    };
    var X = {
        Low: 0,
        Normal: 1,
        High: 2
    };
    var Y = {
        NotStarted: 0,
        InProgress: 1,
        Completed: 2,
        WaitingOther: 3,
        Deferred: 4
    };
    var Z = {
        Exact: 0,
        Leading: 1
    };
    var ba = {
        None: 0,
        Occurrence: 1,
        Exception: 2,
        Master: 3
    };
    var bb = {
        Daily: 0,
        Weekly: 1,
        Monthly: 2,
        Yearly: 3,
        ByTimeInterval: 4
    };
    var bc = {
        ByDayInterval: 0,
        EveryWorkday: 1,
        EveryWeekend: 2
    };
    var bd = {
        ByDayNumber: 0,
        ByDayType: 1
    };
    var be = {
        SpecificDate: 0,
        ByDayType: 1
    };
    var bf = {
        First: 0,
        Second: 1,
        Third: 2,
        Fourth: 3,
        Last: 4
    };
    var bg = {
        AnyDay: 0,
        Workday: 1,
        Weekend: 2,
        Sunday: 3,
        Monday: 4,
        Tuesday: 5,
        Wednesday: 6,
        Thursday: 7,
        Friday: 8,
        Saturday: 9
    };
    var bh = {
        Never: 0,
        NumOccurrences: 1,
        EndDate: 2
    };
    var bi = {
        Sunday: 0,
        Monday: 1,
        Tuesday: 2,
        Wednesday: 3,
        Thursday: 4,
        Friday: 5,
        Saturday: 6
    };
    var bj = {
        None: 0,
        Sunday: 0x1,
        Monday: 0x2,
        Tuesday: 0x4,
        Wednesday: 0x8,
        Thursday: 0x10,
        Friday: 0x20,
        Saturday: 0x40,
        All: 0x7F
    };
    var bk = {
        Edit: 0,
        Drag: 1,
        Resize: 2,
        InplaceEdit: 3
    };
    var bl = {
        None: 0,
        GroupByContacts: 1,
        GroupByResources: 2,
        GroupByLocations: 3,
        GroupByTasks: 4,
        FilterByContacts: 5,
        FilterByLocations: 6,
        FilterByTasks: 7,
        FilterByResources: 8
    };
    var bm = {
        WeekPerRow: 0,
        SingleWeek: 1
    };
    var bn = {
        None: 0,
        Shift: 1,
        Control: 2,
        Alt: 3
    };
    var bo = {
        Cell: 0,
        Main: 1,
        Group: 2,
        Timeline: 3,
        DayNames: 4,
        WeekNumbers: 5
    };
    var bp = {
        Full: 0,
        ViewItems: 1,
        ViewContent: 2
    };
    var bq = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(a) {
        return typeof a
    } : function(a) {
        return a && typeof Symbol === "function" && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a
    };
    var br = function(a, b) {
        if (!(a instanceof b)) {
            throw new TypeError("Cannot call a class as a function");
        }
    };
    var bs = function() {
        function defineProperties(a, b) {
            for (var i = 0; i < b.length; i++) {
                var c = b[i];
                c.enumerable = c.enumerable || false;
                c.configurable = true;
                if ("value" in c) c.writable = true;
                Object.defineProperty(a, c.key, c)
            }
        }
        return function(a, b, c) {
            if (b) defineProperties(a.prototype, b);
            if (c) defineProperties(a, c);
            return a
        }
    }();
    var bt = function bt(a, b, c) {
        if (a === null) a = Function.prototype;
        var d = Object.getOwnPropertyDescriptor(a, b);
        if (d === undefined) {
            var e = Object.getPrototypeOf(a);
            if (e === null) {
                return undefined
            } else {
                return bt(e, b, c)
            }
        } else if ("value" in d) {
            return d.value
        } else {
            var f = d.get;
            if (f === undefined) {
                return undefined
            }
            return f.call(c)
        }
    };
    var bu = function(a, b) {
        if (typeof b !== "function" && b !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof b);
        }
        a.prototype = Object.create(b && b.prototype, {
            constructor: {
                value: a,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (b) Object.setPrototypeOf ? Object.setPrototypeOf(a, b) : a.__proto__ = b
    };
    var bv = function(a, b) {
        if (!a) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return b && (typeof b === "object" || typeof b === "function") ? b : a
    };
    var bw = function() {
        function bw(a) {
            br(this, bw);
            this._ticks = a
        }
        bs(bw, [{
            key: 'add',
            value: function add(a) {
                return new bw(this.ticks + a.ticks)
            }
        }, {
            key: 'subtract',
            value: function subtract(a) {
                return new bw(this.ticks - a.ticks)
            }
        }, {
            key: 'clone',
            value: function clone() {
                return new bw(this.ticks)
            }
        }, {
            key: 'equals',
            value: function equals(a) {
                return this.ticks === a.ticks
            }
        }, {
            key: 'ticks',
            get: function get$$1() {
                return this._ticks
            }
        }, {
            key: 'milliseconds',
            get: function get$$1() {
                return this._ticks / bx.TicksPerMillisecond
            }
        }, {
            key: 'seconds',
            get: function get$$1() {
                return this._ticks / bx.TicksPerSecond
            }
        }, {
            key: 'minutes',
            get: function get$$1() {
                return this._ticks / bx.TicksPerMinute
            }
        }, {
            key: 'hours',
            get: function get$$1() {
                return this._ticks / bx.TicksPerHour
            }
        }, {
            key: 'days',
            get: function get$$1() {
                return this._ticks / bx.TicksPerDay
            }
        }], [{
            key: 'fromMilliseconds',
            value: function fromMilliseconds(a) {
                return new bw(a * bx.TicksPerMillisecond)
            }
        }, {
            key: 'fromSeconds',
            value: function fromSeconds(a) {
                return new bw(a * bx.TicksPerSecond)
            }
        }, {
            key: 'fromMinutes',
            value: function fromMinutes(a) {
                return new bw(a * bx.TicksPerMinute)
            }
        }, {
            key: 'fromHours',
            value: function fromHours(a) {
                return new bw(a * bx.TicksPerHour)
            }
        }, {
            key: 'fromDays',
            value: function fromDays(a) {
                return new bw(a * bx.TicksPerDay)
            }
        }]);
        return bw
    }();
    var bx = function() {
        function bx(a) {
            br(this, bx);
            if (a == null) {
                this._date = new Date();
                this._ticks = this._date.getTime();
                return
            }
            if (a.getTime != null) {
                this._date = new Date(a.getTime());
                this._ticks = a.getTime()
            } else {
                this._ticks = a;
                this._date = new Date(a + new Date(a).getTimezoneOffset() * bx.MillisPerMinute);
                var b = this._date.getTimezoneOffset() - new Date(a).getTimezoneOffset();
                this._date = new Date(this._date.valueOf() + b * bx.MillisPerMinute)
            }
        }
        bs(bx, [{
            key: 'toString',
            value: function toString(a, b) {
                if (a != null && b != null) return bx.formatDate(this._date, a, b);
                return this._date.toString()
            }
        }, {
            key: 'valueOf',
            value: function valueOf() {
                return this._date.valueOf()
            }
        }, {
            key: 'clone',
            value: function clone() {
                var a = new bx(this._date, this._offset);
                a._ticks = this._ticks;
                return a
            }
        }, {
            key: 'equals',
            value: function equals(a) {
                return this._date.getTime() == a._date.getTime()
            }
        }, {
            key: 'subtract',
            value: function subtract(a) {
                var b = new bx(a)._date;
                var h = this._date.getTime() - b.getTime();
                var c = this._date.getTimezoneOffset() - b.getTimezoneOffset();
                return h - c * bx.MillisPerMinute
            }
        }, {
            key: 'greaterThan',
            value: function greaterThan(a) {
                return this._date.getTime() > a._date.getTime()
            }
        }, {
            key: 'greaterThanOrEqual',
            value: function greaterThanOrEqual(a) {
                return this._date.getTime() >= a._date.getTime()
            }
        }, {
            key: 'lessThan',
            value: function lessThan(a) {
                return this._date.getTime() < a._date.getTime()
            }
        }, {
            key: 'lessThanOrEqual',
            value: function lessThanOrEqual(a) {
                return this._date.getTime() <= a._date.getTime()
            }
        }, {
            key: 'compareTo',
            value: function compareTo(a) {
                if (a._date.getTime() > this._date.getTime()) return -1;
                if (a._date.getTime() < this._date.getTime()) return 1;
                return 0
            }
        }, {
            key: 'addMilliseconds',
            value: function addMilliseconds(a) {
                if (a != null) {
                    this._date = new Date(this._date.getTime() + a);
                    this._ticks += a
                }
                return this
            }
        }, {
            key: 'addSeconds',
            value: function addSeconds(a) {
                if (a != null) {
                    this._date = new Date(this._date.getTime() + a * bx.MillisPerSecond);
                    this._ticks += a * bx.MillisPerSecond
                }
                return this
            }
        }, {
            key: 'addMinutes',
            value: function addMinutes(a) {
                if (a != null) {
                    this._date = new Date(this._date.getTime() + a * bx.MillisPerMinute);
                    this._ticks += a * bx.MillisPerMinute
                }
                return this
            }
        }, {
            key: 'addHours',
            value: function addHours(a) {
                if (a != null) {
                    this._date = new Date(this._date.getTime() + a * bx.MillisPerHour);
                    this._ticks += a * bx.MillisPerHour
                }
                return this
            }
        }, {
            key: 'addDays',
            value: function addDays(a) {
                if (a != null) {
                    var b = new Date(this._date.getTime());
                    this._date = new Date(b.setDate(b.getDate() + a));
                    this._ticks = new bx(this._date, this._offset)._ticks
                }
                return this
            }
        }, {
            key: 'addMonths',
            value: function addMonths(a) {
                if (a != null) {
                    var b = new Date(this._date.getTime());
                    this._date = new Date(b.setMonth(b.getMonth() + a));
                    this._ticks = new bx(this._date, this._offset)._ticks
                }
                return this
            }
        }, {
            key: 'addYears',
            value: function addYears(a) {
                if (a != null) {
                    var b = new Date(this._date.getTime());
                    this._date = new Date(b.setFullYear(b.getFullYear() + a));
                    this._ticks = new bx(this._date, this._offset)._ticks
                }
                return this
            }
        }, {
            key: 'getDate',
            value: function getDate() {
                return bx.getDate(this.toUTCDate())
            }
        }, {
            key: 'getMonth',
            value: function getMonth() {
                return this._date.getMonth()
            }
        }, {
            key: 'getDaysInMonth',
            value: function getDaysInMonth(a) {
                if (a == undefined) a = this.isLeapYear();
                var b = this._date.getMonth();
                if (b <= 6 && b % 2 === 0 || b > 6 && b % 2 !== 0) {
                    return 31
                }
                if (b === 1) {
                    if (a) {
                        return 29
                    }
                    return 28
                }
                return 30
            }
        }, {
            key: 'isLeapYear',
            value: function isLeapYear() {
                var a = this._date.getFullYear();
                if (a % 4 === 0) {
                    if (a % 100 === 0) {
                        if (a % 400 !== 0) {
                            return false
                        }
                        return true
                    }
                    return true
                }
                return false
            }
        }, {
            key: 'subtract2',
            value: function subtract2(a) {
                return this._date.valueOf() - a._date.valueOf()
            }
        }, {
            key: 'isInDst',
            value: function isInDst() {
                var a = new Date(this._date.getFullYear(), 0, 1).getTimezoneOffset();
                var b = new Date(this._date.getFullYear(), 6, 1).getTimezoneOffset();
                if (a !== b) {
                    if (this._date.getTimezoneOffset() === a) {
                        return -1
                    }
                    return 1
                }
                return 0
            }
        }, {
            key: 'toUTCDate',
            value: function toUTCDate() {
                return this._date
            }
        }, {
            key: 'addTicksToDate',
            value: function addTicksToDate(a) {
                if (a != null) {
                    var e = this._date.getTimezoneOffset();
                    var i = new Date(this._date.getTime() + a);
                    var h = i.getTimezoneOffset() - e;
                    this._date = new Date(i.getTime() + h * bx.MillisPerMinute)
                }
                return this
            }
        }, {
            key: 'getTimeOfTheDay',
            value: function getTimeOfTheDay() {
                return bx.getTimeOfDay(this.toUTCDate())
            }
        }, {
            key: 'getDay',
            value: function getDay() {
                return Math.pow(2, this._date.getDay())
            }
        }, {
            key: 'getMonthlyOccurrenceIndex',
            value: function getMonthlyOccurrenceIndex() {
                var a = this._date.getDay();
                var b = new Date(this._date.getFullYear(), this._date.getMonth(), 1, 0, 0, 0).getDay();
                var c = this._date.getDate();
                var e = Math.abs(a - b);
                var d = c - e - 1;
                return d / 7
            }
        }, {
            key: '__getFullYear',
            value: function __getFullYear() {
                return this._date.getFullYear()
            }
        }, {
            key: '__getMonth',
            value: function __getMonth() {
                return this._date.getMonth()
            }
        }, {
            key: '__getDate',
            value: function __getDate() {
                return this._date.getDate()
            }
        }, {
            key: '__getDay',
            value: function __getDay() {
                return this._date.getDay()
            }
        }, {
            key: '__getHours',
            value: function __getHours() {
                return this._date.getHours()
            }
        }, {
            key: '__getMinutes',
            value: function __getMinutes() {
                return this._date.getMinutes()
            }
        }, {
            key: '__getSeconds',
            value: function __getSeconds() {
                return this._date.getSeconds()
            }
        }, {
            key: '__getMilliseconds',
            value: function __getMilliseconds() {
                return this._date.getMilliseconds()
            }
        }, {
            key: '__getTime',
            value: function __getTime() {
                return this._date.getTime()
            }
        }, {
            key: '__getTimezoneOffset',
            value: function __getTimezoneOffset() {
                return this._date.getTimezoneOffset()
            }
        }, {
            key: '__getUTCFullYear',
            value: function __getUTCFullYear() {
                return this._date.getUTCFullYear()
            }
        }, {
            key: '__getUTCMonth',
            value: function __getUTCMonth() {
                return this._date.getUTCMonth()
            }
        }, {
            key: '__getUTCDate',
            value: function __getUTCDate() {
                return this._date.getUTCDate()
            }
        }, {
            key: '__getUTCDay',
            value: function __getUTCDay() {
                return this._date.getUTCDay()
            }
        }, {
            key: '__getUTCHours',
            value: function __getUTCHours() {
                return this._date.getUTCHours()
            }
        }, {
            key: '__getUTCMinutes',
            value: function __getUTCMinutes() {
                return this._date.getUTCMinutes()
            }
        }, {
            key: '__getUTCSeconds',
            value: function __getUTCSeconds() {
                return this._date.getUTCSeconds()
            }
        }, {
            key: '__getUTCMilliseconds',
            value: function __getUTCMilliseconds() {
                return this._date.getUTCMilliseconds()
            }
        }, {
            key: '__setFullYear',
            value: function __setFullYear(a, b, c) {
                if (c === null || typeof c === 'undefined') {
                    if (b === null || typeof b === 'undefined') {
                        this._date.setFullYear(a);
                        return
                    }
                    this._date.setFullYear(a, b);
                    return
                }
                this._date.setFullYear(a, b, c)
            }
        }, {
            key: '__setDate',
            value: function __setDate(a) {
                this._date.setDate(a)
            }
        }, {
            key: '__setHours',
            value: function __setHours(a, b, c, d) {
                if (d === null || typeof d === 'undefined') {
                    if (c === null || typeof c === 'undefined') {
                        if (b === null || typeof b === 'undefined') {
                            this._date.setHours(a);
                            return
                        }
                        this._date.setHours(a, b);
                        return
                    }
                    this._date.setHours(a, b, c);
                    return
                }
                this._date.setHours(a, b, c, d)
            }
        }, {
            key: '__setMinutes',
            value: function __setMinutes(a, b, c) {
                if (c === null || typeof c === 'undefined') {
                    if (b === null || typeof b === 'undefined') {
                        this._date.setMinutes(a);
                        return
                    }
                    this._date.setMinutes(a, b);
                    return
                }
                this._date.setMinutes(a, b, c)
            }
        }, {
            key: '__setSeconds',
            value: function __setSeconds(a, b) {
                if (b === null || typeof b === 'undefined') {
                    this._date.setSeconds(a);
                    return
                }
                this._date.setSeconds(a, b)
            }
        }, {
            key: '__setMilliseconds',
            value: function __setMilliseconds(a) {
                this._date.setMilliseconds(a)
            }
        }, {
            key: '__setTime',
            value: function __setTime(a) {
                this._date.setTime(a)
            }
        }, {
            key: '__setUTCFullYear',
            value: function __setUTCFullYear(a, b, c) {
                if (c === null || typeof c === 'undefined') {
                    if (b === null || typeof b === 'undefined') {
                        this._date.setUTCFullYear(a);
                        return
                    }
                    this._date.setUTCFullYear(a, b);
                    return
                }
                this._date.setUTCFullYear(a, b, c)
            }
        }, {
            key: '__setUTCDate',
            value: function __setUTCDate(a) {
                this._date.setUTCDate(a)
            }
        }, {
            key: '__setUTCHours',
            value: function __setUTCHours(a, b, c, d) {
                if (d === null || typeof d === 'undefined') {
                    if (c === null || typeof c === 'undefined') {
                        if (b === null || typeof b === 'undefined') {
                            this._date.setUTCHours(a);
                            return
                        }
                        this._date.setUTCHours(a, b);
                        return
                    }
                    this._date.setUTCHours(a, b, c);
                    return
                }
                this._date.setUTCHours(a, b, c, d)
            }
        }, {
            key: '__setUTCMinutes',
            value: function __setUTCMinutes(a, b, c) {
                if (c === null || typeof c === 'undefined') {
                    if (b === null || typeof b === 'undefined') {
                        this._date.setUTCMinutes(a);
                        return
                    }
                    this._date.setUTCMinutes(a, b);
                    return
                }
                this._date.setUTCMinutes(a, b, c)
            }
        }, {
            key: '__setUTCSeconds',
            value: function __setUTCSeconds(a, b) {
                if (b === null || typeof b === 'undefined') {
                    this._date.setUTCSeconds(a);
                    return
                }
                this._date.setUTCSeconds(a, b)
            }
        }, {
            key: '__setUTCMilliseconds',
            value: function __setUTCMilliseconds(a) {
                this._date.setUTCMilliseconds(a)
            }
        }, {
            key: '__toDateString',
            value: function __toDateString() {
                return this._date.toDateString()
            }
        }, {
            key: '__toLocaleDateString',
            value: function __toLocaleDateString() {
                return this._date.toLocaleDateString()
            }
        }, {
            key: '__toLocaleTimeString',
            value: function __toLocaleTimeString() {
                return this._date.toLocaleTimeString()
            }
        }, {
            key: '__toLocaleString',
            value: function __toLocaleString() {
                return this._date.toLocaleString()
            }
        }, {
            key: '__toString',
            value: function __toString() {
                return this._date.toString()
            }
        }, {
            key: '__toTimeString',
            value: function __toTimeString() {
                return this._date.toTimeString()
            }
        }, {
            key: '__toUTCString',
            value: function __toUTCString() {
                return this._date.toUTCString()
            }
        }, {
            key: '__valueOf',
            value: function __valueOf() {
                return this._date.valueOf()
            }
        }, {
            key: 'millisecond',
            get: function get$$1() {
                return this._date.getMilliseconds()
            }
        }, {
            key: 'second',
            get: function get$$1() {
                return this._date.getSeconds()
            }
        }, {
            key: 'minute',
            get: function get$$1() {
                return this._date.getMinutes()
            }
        }, {
            key: 'hour',
            get: function get$$1() {
                return this._date.getHours()
            }
        }, {
            key: 'day',
            get: function get$$1() {
                return this._date.getDate()
            }
        }, {
            key: 'month',
            get: function get$$1() {
                return this._date.getMonth()
            }
        }, {
            key: 'year',
            get: function get$$1() {
                return this._date.getFullYear()
            }
        }, {
            key: 'date',
            get: function get$$1() {
                return new bx(bx.getDate(this._date))
            }
        }, {
            key: 'timeOfDay',
            get: function get$$1() {
                return this.subtract(this._date)
            }
        }, {
            key: 'dayOfMonth',
            get: function get$$1() {
                return this._date.getDate()
            }
        }, {
            key: 'dayOfWeek',
            get: function get$$1() {
                return this._date.getDay()
            }
        }, {
            key: 'daysInMonth',
            get: function get$$1() {
                return new Date(this._date.getFullYear(), this._date.getMonth() + 1, 0).getDate()
            }
        }], [{
            key: 'fromDateParts',
            value: function fromDateParts(a, b, c, d, e, f, g) {
                if (a === null || typeof a !== 'number' || a < 1 || a > 9999 || b === null || typeof b !== 'number' || b < 0 || b > 11) {
                    return null
                }
                if (c === null || typeof c !== 'number' || c < 1 || c > 31) {
                    c = 1
                }
                if (d === null || typeof d !== 'number' || d < 0 || d > 23) {
                    d = 0
                }
                if (e === null || typeof e !== 'number' || e < 0 || e > 59) {
                    e = 0
                }
                if (f === null || typeof f !== 'number' || f < 0 || f > 59) {
                    f = 0
                }
                if (g === null || typeof g !== 'number' || g < 0 || g > 999) {
                    g = 0
                }
                var h = new Date(a, b, c, d, e, f, g);
                if (isNaN(h.valueOf())) {
                    return null
                }
                return new bx(h)
            }
        }, {
            key: 'fromDateString',
            value: function fromDateString(a) {
                var b = new Date(a);
                if (isNaN(b.valueOf())) {
                    return null
                }
                return new bx(b)
            }
        }, {
            key: 'fromMilliseconds',
            value: function fromMilliseconds(a) {
                if (a === null || typeof a !== 'number') {
                    return null
                }
                var b = new Date(a);
                if (isNaN(b.valueOf())) {
                    return null
                }
                return new bx(b)
            }
        }, {
            key: 'combine',
            value: function combine(a, b) {
                var d = new Date(a._date.getFullYear(), a._date.getMonth(), a._date.getDate(), b._date.getHours(), b._date.getMinutes(), b._date.getSeconds());
                return new bx(d)
            }
        }, {
            key: 'maxDate',
            value: function maxDate(a, b) {
                return a._date.getTime() > b._date.getTime() ? a : b
            }
        }, {
            key: 'minDate',
            value: function minDate(a, b) {
                return a._date.getTime() > b._date.getTime() ? b : a
            }
        }, {
            key: 'subtract',
            value: function subtract(a, b) {
                b = new bx(b).toUTCDate();
                var h = a.getTime() - b;
                var f = a.getTimezoneOffset() - b.getTimezoneOffset();
                return h - f * bx.MillisPerMinute
            }
        }, {
            key: 'minValue',
            value: function minValue() {
                return new bx(-62135596800000)
            }
        }, {
            key: 'maxValue',
            value: function maxValue() {
                return new bx(253402300799999)
            }
        }, {
            key: 'now',
            value: function now() {
                var d = new Date();
                var i = d.getTimezoneOffset() * bx.MillisPerMinute;
                return new bx(d.getTime() - i)
            }
        }, {
            key: 'today',
            value: function b() {
                var a = new Date();
                var b = new Date(a.getFullYear(), a.getMonth(), a.getDate());
                var i = b.getTimezoneOffset() * bx.MillisPerMinute;
                return new bx(b.getTime() - i)
            }
        }, {
            key: 'getYear',
            value: function getYear(a) {
                return a._date.getFullYear()
            }
        }, {
            key: 'getMonth',
            value: function getMonth(a) {
                return a._date.getMonth()
            }
        }, {
            key: 'getDaysInMonth',
            value: function getDaysInMonth(a) {
                return new Date(a._date.getFullYear(), a._date.getMonth() + 1, 0).getDate()
            }
        }, {
            key: 'getDayOfMonth',
            value: function getDayOfMonth(a) {
                return a._date.getDate()
            }
        }, {
            key: 'getDayOfWeek',
            value: function getDayOfWeek(a) {
                var d = new bx(a);
                return d._date.getDay()
            }
        }, {
            key: 'getWeekFirstDate',
            value: function getWeekFirstDate(a, b) {
                var t = a.clone();
                var c = 1;
                if (b) c = +b.firstDayOfWeek;
                while (t.dayOfWeek !== c) {
                    t = t.addDays(-1)
                }
                return t
            }
        }, {
            key: 'millisecondsBetween',
            value: function millisecondsBetween(a, b) {
                var c = a.valueOf() - b.valueOf();
                var f = a._date.getTimezoneOffset() - b._date.getTimezoneOffset();
                return c - f * bx.MillisPerMinute
            }
        }, {
            key: 'secondsBetween',
            value: function secondsBetween(a, b) {
                var c = b.valueOf() - a.valueOf();
                var d = bx.intDivision(c, bx.MillisPerSecond);
                var e = a._date.getTimezoneOffset() - b._date.getTimezoneOffset();
                d += e * 60;
                return d
            }
        }, {
            key: 'minutesBetween',
            value: function minutesBetween(a, b) {
                var c = b.valueOf() - a.valueOf();
                var d = bx.intDivision(c, bx.MillisPerMinute);
                var e = a._date.getTimezoneOffset() - b._date.getTimezoneOffset();
                d += e;
                return d
            }
        }, {
            key: 'hoursBetween',
            value: function hoursBetween(a, b) {
                var c = new Date(a._date.getTime());
                var e = new Date(b._date.getTime());
                var d = bx.intDivision(e - c, 3600000);
                var f = a._date.getTimezoneOffset() - b._date.getTimezoneOffset();
                d += f / 60;
                return d
            }
        }, {
            key: 'daysBetween',
            value: function daysBetween(a, b) {
                var c = new Date(a._date.getTime());
                var d = 0;
                while (c < b._date) {
                    c.setDate(c.getDate() + 1);
                    d += 1
                }
                return d
            }
        }, {
            key: 'weeksBetween',
            value: function weeksBetween(a, b) {
                var c = new Date(a._date.getTime());
                var d = 0;
                while (c < b._date) {
                    if (c.getDay() == b.__getDay()) d += 1;
                    c.setDate(c.getDate() + 1)
                }
                return d
            }
        }, {
            key: 'monthsBetween',
            value: function monthsBetween(a, b) {
                var c = new Date(a._date.getTime());
                var d = 0;
                while (c < b._date) {
                    c.setMonth(c.getMonth() + 1);
                    d += 1
                }
                return d
            }
        }, {
            key: 'yearsBetween',
            value: function yearsBetween(a, b) {
                var c = new Date(a._date.getTime());
                var d = 0;
                while (c < b._date) {
                    c.setFullYear(c.getFullYear() + 1);
                    d += 1
                }
                return d
            }
        }, {
            key: 'addMilliseconds',
            value: function addMilliseconds(a, b) {
                var c = new bx(new Date(a.valueOf())).addMilliseconds(b);
                return c
            }
        }, {
            key: 'addSeconds',
            value: function addSeconds(a, b) {
                var c = new bx(new Date(a.valueOf())).addSeconds(b);
                return c
            }
        }, {
            key: 'addMinutes',
            value: function addMinutes(a, b) {
                var c = new bx(new Date(a.valueOf())).addMinutes(b);
                return c
            }
        }, {
            key: 'addHours',
            value: function addHours(a, b) {
                var c = new bx(new Date(a.valueOf())).addHours(b);
                return c
            }
        }, {
            key: 'addDays',
            value: function addDays(a, b) {
                var c = new bx(new Date(a.valueOf())).addDays(b);
                return c
            }
        }, {
            key: 'addMonths',
            value: function addMonths(a, b) {
                var c = new bx(new Date(a.valueOf())).addMonths(b);
                return c
            }
        }, {
            key: 'addYears',
            value: function addYears(a, b) {
                var c = new bx(new Date(a.valueOf())).addYears(b);
                return c
            }
        }, {
            key: 'formatDate',
            value: function formatDate(a, b, e) {
                function LZ(x) {
                    return (x < 0 || x > 9 ? "" : "0") + x
                }
                var f = e;
                var g = f.months.long.slice(0);
                var i = f.months.short.slice(0);
                var j = (g + ',' + i).split(',');
                var k = (f.days.long + ',' + f.days.short).split(',');
                var l = f.dayPeriods.am;
                var n = f.dayPeriods.pm;
                b = b + "";
                var o = "";
                var p = 0;
                var c = "";
                var q = "";
                var y = a.getYear() + "";
                var M = a.getMonth() + 1;
                var d = a.getDate();
                var E = a.getDay();
                var H = a.getHours();
                var m = a.getMinutes();
                var s = a.getSeconds();
                var r, yy, MMM, MM, dd, hh, h, mm, ss, ampm, HH, H;
                var t = new Object();
                if (y.length < 4) {
                    y = "" + (y - 0 + 1900)
                }
                t["y"] = "" + y;
                t["yyyy"] = y;
                t["yy"] = y.substring(2, 4);
                t["M"] = M;
                t["MM"] = LZ(M);
                t["MMMM"] = j[M - 1];
                t["MMM"] = j[M + 11];
                t["d"] = d;
                t["dd"] = LZ(d);
                t["ddd"] = k[E + 7];
                t["dddd"] = k[E];
                t["H"] = H;
                t["HH"] = LZ(H);
                if (H == 0) {
                    t["h"] = 12
                } else if (H > 12) {
                    t["h"] = H - 12
                } else {
                    t["h"] = H
                }
                t["hh"] = LZ(t["h"]);
                if (H > 11) {
                    t["K"] = H - 12
                } else {
                    t["K"] = H
                }
                t["k"] = H + 1;
                t["KK"] = LZ(t["K"]);
                t["kk"] = LZ(t["k"]);
                if (H > 11) {
                    t["tt"] = "PM"
                } else {
                    t["tt"] = "AM"
                }
                t["m"] = m;
                t["mm"] = LZ(m);
                t["s"] = s;
                t["ss"] = LZ(s);
                while (p < b.length) {
                    c = b.charAt(p);
                    q = "";
                    while (b.charAt(p) == c && p < b.length) {
                        q += b.charAt(p++)
                    }
                    if (t[q] != null) {
                        o = o + t[q]
                    } else {
                        o = o + q
                    }
                }
                return o
            }
        }, {
            key: 'getDateToFormat',
            value: function getDateToFormat(k, l, m) {
                var n = function n(d, i, e, f) {
                    var g = function g(a) {
                        var b = '1234567890';
                        for (var c = 0; c < a.length; c += 1) {
                            if (b.indexOf(a.charAt(c)) == -1) {
                                return false
                            }
                        }
                        return true
                    };
                    for (var h = f; h >= e; h -= 1) {
                        var j = d.substring(i, i + h);
                        if (j.length < e) {
                            return null
                        }
                        if (g(j)) {
                            return j
                        }
                    }
                    return null
                };
                var o = m;
                var p = o.months.long.slice(0);
                var q = o.months.short.slice(0);
                var r = (p + ',' + q).split(',');
                var s = (o.days.long + ',' + o.days.short).split(',');
                var t = o.dayPeriods.am;
                var u = o.dayPeriods.pm;
                k = k + '';
                l = l + '';
                var v = 0;
                var w = 0;
                var c = '';
                var z = '';
                var x;
                var y;
                var A = new Date();
                var B = A.getFullYear();
                var C = A.getMonth() + 1;
                var D = 1;
                var E = A.getHours();
                var F = A.getMinutes();
                var G = A.getSeconds();
                var H = '';
                while (w < l.length) {
                    c = l.charCodeAt(w);
                    z = '';
                    if (c === 39) {
                        while (l.charCodeAt(++w) !== 39 && w < l.length) {
                            z += l.charAt(w)
                        }
                    } else {
                        while (l.charCodeAt(w) == c && w < l.length) {
                            z += l.charAt(w++)
                        }
                    }
                    if (z === 'yyyy' || z === 'yy' || z === 'y') {
                        if (z === 'yyyy') {
                            x = 4;
                            y = 4
                        }
                        if (z === 'yy') {
                            x = 2;
                            y = 2
                        }
                        if (z === 'y') {
                            x = 2;
                            y = 4
                        }
                        B = n(k, v, x, y);
                        if (B == null) {
                            return 0
                        }
                        v += B.length;
                        if (B.length === 2) {
                            if (B > 70) {
                                B = 1900 + (B - 0)
                            } else {
                                B = 2000 + (B - 0)
                            }
                        }
                    } else if (z === 'MMM' || z === 'NNN') {
                        C = 0;
                        for (var i = 0; i < r.length; i++) {
                            var I = r[i];
                            if (k.substring(v, v + I.length).toLowerCase() == I.toLowerCase()) {
                                if (z === 'MMM' || z === 'NNN' && i > 11) {
                                    C = i + 1;
                                    if (C > 12) {
                                        C -= 12
                                    }
                                    v += I.length;
                                    break
                                }
                            }
                        }
                        if (C < 1 || C > 12) {
                            return 0
                        }
                    } else if (z === 'EE' || z === 'E') {
                        for (var J = 0; J < s.length; J++) {
                            var K = s[J];
                            if (k.substring(v, v + K.length).toLowerCase() == K.toLowerCase()) {
                                v += K.length;
                                break
                            }
                        }
                    } else if (z === 'MM' || z === 'M') {
                        C = n(k, v, z.length, 2);
                        if (C == null || C < 1 || C > 12) {
                            return 0
                        }
                        v += C.length
                    } else if (z === 'dd' || z === 'd') {
                        D = n(k, v, z.length, 2);
                        if (D == null || D < 1 || D > 31) {
                            return 0
                        }
                        v += D.length
                    } else if (z === 'hh' || z === 'h') {
                        E = n(k, v, z.length, 2);
                        if (E == null || E < 1 || E > 12) {
                            return 0
                        }
                        v += E.length
                    } else if (z === 'HH' || z === 'H') {
                        E = n(k, v, z.length, 2);
                        if (E == null || E < 0 || E > 23) {
                            return 0
                        }
                        v += E.length
                    } else if (z === 'KK' || z === 'K') {
                        E = n(k, v, z.length, 2);
                        if (E == null || E < 0 || E > 11) {
                            return 0
                        }
                        v += E.length
                    } else if (z === 'kk' || z === 'k') {
                        E = n(k, v, z.length, 2);
                        if (E == null || E < 1 || E > 24) {
                            return 0
                        }
                        v += E.length;
                        E--
                    } else if (z === 'mm' || z === 'm') {
                        F = n(k, v, z.length, 2);
                        if (F == null || F < 0 || F > 59) {
                            return 0
                        }
                        v += F.length
                    } else if (z === 'ss' || z === 's') {
                        G = n(k, v, z.length, 2);
                        if (G == null || G < 0 || G > 59) {
                            return 0
                        }
                        v += G.length
                    } else if (z === 'tt') {
                        var L = t.length;
                        var M = u.length;
                        if (M !== 0 || L !== 0) {
                            if (k.substring(v, v + L) === t) {
                                H = 'AM';
                                v += L - 2
                            } else if (k.substring(v, v + M) === u) {
                                H = 'PM';
                                v += M - 2
                            } else {
                                return 0
                            }
                            v += 2
                        }
                    } else if (z == 't') {
                        if (t !== '' || u !== '') {
                            if (k.substring(v, v + 1) === t.substring(0, 1)) {
                                H = 'AM'
                            } else if (k.substring(v, v + 1) === u.substring(0, 1)) {
                                H = 'PM'
                            } else {
                                return 0
                            }
                            v += 1
                        }
                    } else {
                        if (k.substring(v, v + z.length) != z) {
                            return 0
                        } else {
                            v += z.length
                        }
                    }
                }
                if (v != k.length) {
                    return 0
                }
                if (C == 2) {
                    if (B % 4 == 0 && B % 100 != 0 || B % 400 == 0) {
                        if (D > 29) {
                            return 0
                        }
                    } else {
                        if (D > 28) {
                            return 0
                        }
                    }
                }
                if (C == 4 || C == 6 || C == 9 || C == 11) {
                    if (D > 30) {
                        return 0
                    }
                }
                if (E < 12 && H == 'PM') {
                    E = E - 0 + 12
                } else if (E > 11 && H == 'AM') {
                    E -= 12
                }
                var N = new Date(B, C - 1, D, E, F, G);
                return N.getTime()
            }
        }, {
            key: 'getDate',
            value: function getDate(a) {
                return new Date(a.getFullYear(), a.getMonth(), a.getDate())
            }
        }, {
            key: 'getTimeOfDay',
            value: function getTimeOfDay(a) {
                return bx.subtract(a, bx.getDate(a))
            }
        }, {
            key: 'setTimeOfSecond',
            value: function setTimeOfSecond(a, b) {
                var c = new bx(b._date);
                c._date.setMilliseconds(a._date.getMilliseconds());
                return c
            }
        }, {
            key: 'setTimeOfMinute',
            value: function setTimeOfMinute(a, b) {
                var c = new bx(b._date);
                c._date.setSeconds(a._date.getSeconds());
                c._date.setMilliseconds(a._date.getMilliseconds());
                return c
            }
        }, {
            key: 'setTimeOfHour',
            value: function setTimeOfHour(a, b) {
                var c = new bx(b._date);
                c._date.setMinutes(a._date.getMinutes());
                c._date.setSeconds(a._date.getSeconds());
                c._date.setMilliseconds(a._date.getMilliseconds());
                return c
            }
        }, {
            key: 'setTimeOfDay',
            value: function setTimeOfDay(a, b) {
                var c = new bx(b._date);
                c._date.setHours(a._date.getHours());
                c._date.setMinutes(a._date.getMinutes());
                c._date.setSeconds(a._date.getSeconds());
                c._date.setMilliseconds(a._date.getMilliseconds());
                return c
            }
        }, {
            key: 'setDayOfWeek',
            value: function setDayOfWeek(a, b) {
                var c = new bx(b._date);
                var d = a._date.getDay() - b._date.getDay();
                c._date.setDate(b._date.getDate() + d);
                c._date.setHours(a._date.getHours());
                c._date.setMinutes(a._date.getMinutes());
                c._date.setSeconds(a._date.getSeconds());
                c._date.setMilliseconds(a._date.getMilliseconds());
                return c
            }
        }, {
            key: 'setDayOfMonth',
            value: function setDayOfMonth(a, b) {
                var c = new bx(b._date);
                c._date.setDate(a._date.getDate());
                c._date.setHours(a._date.getHours());
                c._date.setMinutes(a._date.getMinutes());
                c._date.setSeconds(a._date.getSeconds());
                c._date.setMilliseconds(a._date.getMilliseconds());
                return c
            }
        }, {
            key: 'setDayOfYear',
            value: function setDayOfYear(a, b) {
                var c = new bx(b._date);
                c._date.setMonth(a._date.getMonth());
                c._date.setDate(a._date.getDate());
                c._date.setHours(a._date.getHours());
                c._date.setMinutes(a._date.getMinutes());
                c._date.setSeconds(a._date.getSeconds());
                c._date.setMilliseconds(a._date.getMilliseconds());
                return c
            }
        }, {
            key: 'addTicksToDate',
            value: function addTicksToDate(a, b) {
                if (a == null) return;
                if (a._date != null) {
                    a = a._date
                } else {
                    if (a.getTime == null) a = new Date(a)
                }
                var e = a.getTimezoneOffset();
                var i = new Date(a.getTime() + b);
                var h = i.getTimezoneOffset() - e;
                return new bx(new Date(i.getTime() + h * bx.MillisPerMinute))
            }
        }, {
            key: 'intDivision',
            value: function intDivision(a, b) {
                return (a - a % b) / b
            }
        }, {
            key: 'addMilliseconds2',
            value: function addMilliseconds2(a, b) {
                var c = new Date(a.valueOf());
                c.setMilliseconds(c.getMilliseconds() + b);
                return c
            }
        }, {
            key: 'addSeconds2',
            value: function addSeconds2(a, b) {
                var c = new Date(a.valueOf());
                c.setSeconds(c.getSeconds() + b);
                return c
            }
        }, {
            key: 'addMinutes2',
            value: function addMinutes2(a, b) {
                var c = new Date(a.valueOf());
                c.setMinutes(c.getMinutes() + b);
                return c
            }
        }, {
            key: 'addHours2',
            value: function addHours2(a, b) {
                var c = new Date(a.valueOf());
                c.setHours(c.getHours() + b);
                return c
            }
        }, {
            key: 'addDays2',
            value: function addDays2(a, b) {
                var c = new Date(a.valueOf());
                c.setDate(c.getDate() + b);
                return c
            }
        }, {
            key: 'addWeeks2',
            value: function addWeeks2(a, b) {
                var c = new Date(a.valueOf());
                c.setDate(c.getDate() + b * 7);
                return c
            }
        }, {
            key: 'addMonths2',
            value: function addMonths2(a, b) {
                var c = new Date(a.valueOf());
                c.setMonth(c.getMonth() + b);
                return c
            }
        }, {
            key: 'addYears2',
            value: function addYears2(a, b) {
                var c = new Date(a.valueOf());
                c.setFullYear(c.getFullYear() + b);
                return c
            }
        }, {
            key: 'isSameDate',
            value: function isSameDate(a, b) {
                if (a._date.valueOf() - b._date.valueOf() == (a._date.getTimezoneOffset() - b._date.getTimezoneOffset()) * 60000) return true;
                return false
            }
        }, {
            key: 'getFirstDateAfter',
            value: function getFirstDateAfter(a, b, c, d) {
                var e = +d.firstDayOfWeek;
                var f;
                if (b != R.Week || e == bi.Monday) f = bx.truncate(a, b, c);
                else f = bx.truncateWeek(a, b, c, d);
                if (f.lessThan(a)) f = bx.add(f, b, c);
                return f
            }
        }, {
            key: 'truncate',
            value: function truncate(a, b, c) {
                var d;
                var e = bw.fromMilliseconds(Math.abs(a._ticks - bx.minValue()._ticks));
                switch (b) {
                    case R.Second:
                        d = e.seconds;
                        break;
                    case R.Minute:
                        d = e.minutes;
                        break;
                    case R.Hour:
                        d = e.hours;
                        break;
                    case R.Day:
                        d = e.days;
                        break;
                    case R.Week:
                        d = e.days / 7;
                        break;
                    case R.Month:
                        d = 12 * (a.year - 1) + a.month;
                        break;
                    case R.Year:
                        d = a.year;
                        break
                }
                d = Math.floor(d / c) * c;
                return bx.add(bx.minValue(), b, d)
            }
        }, {
            key: 'truncateWeek',
            value: function truncateWeek(a, b, c, e) {
                if (b != R.Week) return bx.truncate(a, b, c);
                var f;
                var g = +e.firstDayOfWeek;
                var d;
                var h = g - 1;
                if (h >= 0) d = bx.addDays(bx.minValue(), h);
                else d = bx.addDays(bx.minValue(), 6);
                var i = bw.fromMilliseconds(Math.abs(a._ticks - d._ticks));
                f = i.days / 7;
                f = Math.floor(f / c) * c;
                return bx.add(d, b, f)
            }
        }, {
            key: 'add',
            value: function add(a, b) {
                var c;
                if (a - bx.minValue() < -b) c = bx.minValue();
                else if (bx.maxValue - a < b) c = bx.maxValue;
                else c = a + b;
                return c
            }
        }, {
            key: 'add',
            value: function add(a, b, c) {
                switch (b) {
                    case R.Second:
                        return bx.addSeconds(a, c);
                    case R.Minute:
                        return bx.addMinutes(a, c);
                    case R.Hour:
                        return bx.addHours(a, c);
                    case R.Unspecified:
                    case R.Day:
                        return bx.addDays(a, c);
                    case R.Week:
                        return bx.addDays(a, 7 * c);
                    case R.Month:
                        return bx.addMonths(a, c);
                    case R.Year:
                        return bx.addYears(a, c);
                    default:
                        return c > 0 ? bx.maxValue() : bx.minValue()
                }
            }
        }, {
            key: 'getNextDate',
            value: function getNextDate(a, b, c) {
                return bx.add(a, b, c)
            }
        }, {
            key: 'getPreviousDate',
            value: function getPreviousDate(a, b, c) {
                return bx.add(a, b, -c)
            }
        }, {
            key: 'isTimeSpanShorter',
            value: function isTimeSpanShorter(a, b, c, d) {
                var e = bx.getFirstDateAfter(a, b, c, d);
                var f = bx.getPreviousDate(a, b, c);
                return a != e && a != f
            }
        }, {
            key: 'MillisPerSecond',
            get: function get$$1() {
                return 1000
            }
        }, {
            key: 'MillisPerMinute',
            get: function get$$1() {
                return 60 * bx.MillisPerSecond
            }
        }, {
            key: 'MillisPerHour',
            get: function get$$1() {
                return 60 * bx.MillisPerMinute
            }
        }, {
            key: 'MillisPerDay',
            get: function get$$1() {
                return 24 * bx.MillisPerHour
            }
        }, {
            key: 'TicksPerMillisecond',
            get: function get$$1() {
                return 10000
            }
        }, {
            key: 'TicksPerSecond',
            get: function get$$1() {
                return 10000000
            }
        }, {
            key: 'TicksPerMinute',
            get: function get$$1() {
                return 60 * bx.TicksPerSecond
            }
        }, {
            key: 'TicksPerHour',
            get: function get$$1() {
                return 60 * bx.TicksPerMinute
            }
        }, {
            key: 'TicksPerDay',
            get: function get$$1() {
                return 24 * bx.TicksPerHour
            }
        }]);
        return bx
    }();
    var by = function() {
        function by(a) {
            br(this, by);
            this._items = a == undefined ? [] : a
        }
        bs(by, [{
            key: "items",
            value: function items() {
                return this._items
            }
        }, {
            key: "reverse",
            value: function reverse() {
                return this._items.reverse()
            }
        }, {
            key: "item",
            value: function item(a) {
                return this._items[a]
            }
        }, {
            key: "count",
            value: function count() {
                return this._items.length
            }
        }, {
            key: "contains",
            value: function contains(a) {
                return this._items.indexOf(a) > -1
            }
        }, {
            key: "add",
            value: function add(a) {
                this._items.push(a)
            }
        }, {
            key: "addRange",
            value: function addRange(a) {
                for (var i = 0; i < a.length; i++) {
                    this._items.push(a[i])
                }
            }
        }, {
            key: "remove",
            value: function remove(a) {
                var b = this._items.indexOf(a);
                if (b > -1) this._items.splice(b, 1)
            }
        }, {
            key: "removeRange",
            value: function removeRange(a, b) {
                return this._items.splice(a, b)
            }
        }, {
            key: "removeAt",
            value: function removeAt(a) {
                this._items.splice(a, 1)
            }
        }, {
            key: "clear",
            value: function clear() {
                this._items = []
            }
        }, {
            key: "clone",
            value: function clone() {
                var a = new by();
                a._items = this._items.slice();
                return a
            }
        }, {
            key: "copyTo",
            value: function copyTo(a, b, c, e) {
                var l = b == undefined ? this._items.length : b;
                var s = c == undefined ? 0 : c;
                var d = e == undefined ? 0 : e;
                for (var i = s; i < l; i++) {
                    a._items[d + i] = this._items[i]
                }
            }
        }, {
            key: "sort",
            value: function sort(a) {
                this._items.sort(a)
            }
        }, {
            key: "indexOfItem",
            value: function indexOfItem(a, b) {
                if (b == null) {
                    b = 0
                } else if (b < 0) {
                    b = Math.max(0, this._items.length + b)
                }
                for (var i = b, j = this._items.length; i < j; i++) {
                    if (this._items[i] === a) return i
                }
                return -1
            }
        }, {
            key: "insert",
            value: function insert(a, b) {
                this._items.splice(a, 0, b)
            }
        }, {
            key: "toArray",
            value: function toArray$$1() {
                return this._items.slice(0)
            }
        }, {
            key: "max",
            value: function b(a) {
                if (this.count() == 0) return null;
                var b = Number.NEGATIVE_INFINITY;
                for (var i = 0; i < this.count(); i++) {
                    var c = a(this.item(i));
                    b = Math.max(b, c)
                }
                return b
            }
        }, {
            key: "min",
            value: function b(a) {
                if (this.count() == 0) return null;
                var b = Number.POSITIVE_INFINITY;
                for (var i = 0; i < this.count(); i++) {
                    var c = a(this.item(i));
                    b = Math.min(b, c)
                }
                return b
            }
        }, {
            key: "sum",
            value: function b(a) {
                var b = 0;
                for (var i = 0; i < this.count(); i++) {
                    b += a(this.item(i))
                }
                return b
            }
        }, {
            key: "select",
            value: function select(a) {
                var b = new by();
                for (var i = 0; i < this.count(); i++) {
                    var c = a(this.item(i));
                    b.add(c)
                }
                return b
            }
        }, {
            key: "where",
            value: function where(a) {
                var b = new by();
                for (var i = 0; i < this.count(); i++) {
                    var c = a(this.item(i));
                    if (c) b.add(this.item(i))
                }
                return b
            }
        }, {
            key: "forEach",
            value: function forEach(a, b) {
                var l = this.count();
                for (var i = 0; i < l; i++) {
                    a.call(b, this.items()[i], i, this)
                }
            }
        }, {
            key: "intersects",
            value: function intersects(a) {
                var b = new by();
                for (var c in a) {
                    if (this.contains(c)) b.add(c)
                }
                return b
            }
        }]);
        return by
    }();
    if (!String.format) {
        String.format = function(c) {
            var d = Array.prototype.slice.call(arguments, 1);
            return c.replace(/{(\d+)}/g, function(a, b) {
                return typeof d[b] !== 'undefined' ? d[b] : a
            })
        }
    }
    var bz = function() {
        function bz() {
            br(this, bz)
        }
        bs(bz, null, [{
            key: 'getCursorPosition',
            value: function getCursorPosition(e, c, d) {
                var f = {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                };
                if (c) f = bz.getBounds(c);
                var a, b;
                var g = {
                    scrollLeft: 0,
                    scrollTop: 0
                };
                if (d) {
                    a = e.clientX - f.x + d.scrollLeft + g.scrollLeft;
                    b = e.clientY - f.y + d.scrollTop + g.scrollTop
                } else if (c) {
                    a = e.clientX - f.x + c.scrollLeft + g.scrollLeft;
                    b = e.clientY - f.y + c.scrollTop + g.scrollTop
                } else {
                    a = e.clientX + g.scrollLeft;
                    b = e.clientY + g.scrollTop
                }
                return {
                    x: a,
                    y: b
                }
            }
        }, {
            key: 'getLocation',
            value: function getLocation(a) {
                var b = a.getBoundingClientRect();
                return {
                    x: b.left,
                    y: b.top
                }
            }
        }, {
            key: 'getBounds',
            value: function getBounds(a) {
                var b = a.getBoundingClientRect();
                return {
                    x: b.left,
                    y: b.top,
                    width: b.width,
                    height: b.height
                }
            }
        }, {
            key: 'getRelativeBounds',
            value: function getRelativeBounds(a, c) {
                var d = bz.getBounds(c);
                var e = new Object();
                if (c.style.position == 'absolute') {
                    e.x = a.offsetLeft;
                    e.y = a.offsetTop
                } else {
                    var f = bz.getLocation(a);
                    e.x = f.x - d.x + c.scrollLeft;
                    e.y = f.y - d.y + c.scrollTop
                }
                var b = bz.getBounds(a);
                e.width = b.width;
                e.height = b.height;
                return e
            }
        }, {
            key: 'getBodySize',
            value: function getBodySize() {
                var h = 0;
                var w = 0;
                if (document.documentElement && document.documentElement.clientHeight) {
                    w = document.documentElement.clientWidth;
                    h = document.documentElement.clientHeight
                } else if (document.body) {
                    w = document.body.clientWidth;
                    h = document.body.clientHeight
                }
                var a = bz.getBounds(document.body);
                return {
                    height: h,
                    width: w,
                    x: a.x,
                    y: a.y
                }
            }
        }, {
            key: 'getScrollXY',
            value: function getScrollXY() {
                var a = 0;
                var b = 0;
                if (window.pageXOffset) {
                    a = window.pageXOffset;
                    b = window.pageYOffset
                } else {
                    if (document.body.scrollTop != 0) b = document.body.scrollTop;
                    else b = document.documentElement.scrollTop;
                    if (document.body.scrollLeft != 0) a = document.body.scrollLeft;
                    else a = document.documentElement.scrollLeft
                }
                return {
                    scrollLeft: a,
                    scrollTop: b
                }
            }
        }, {
            key: 'addCssClass',
            value: function cX(a, b) {
                if (a && b) {
                    a.classList.add(b)
                }
            }
        }, {
            key: 'removeCssClass',
            value: function cY(a, b) {
                if (a && b) {
                    a.classList.remove(b)
                }
            }
        }, {
            key: 'hasCssClass',
            value: function hasCssClass(a, b) {
                if (a && b) {
                    return a.classList.contains(b)
                }
            }
        }, {
            key: 'getParent',
            value: function getParent(a, b) {
                var c = a.parentNode;
                while (c != document.body) {
                    if (c) {
                        if (c.classList.contains(b)) return c;
                        else c = c.parentNode
                    } else return null
                }
                return null
            }
        }, {
            key: 'removeNode',
            value: function removeNode(a, b) {
                if (a) {
                    if (!a.parentNode) {
                        if (b) b.appendChild(a);
                        else document.body.appendChild(a)
                    }
                    a.parentNode.removeChild(a)
                }
            }
        }, {
            key: 'removeNodes',
            value: function removeNodes(b) {
                if (b) {
                    Array.prototype.forEach.call(b, function(a) {
                        bz.removeNode(a)
                    })
                }
            }
        }, {
            key: 'firstRealChild',
            value: function firstRealChild(a) {
                for (var i = 0; i < a.childNodes.length; i++) {
                    if (a.childNodes[i].nodeType == 1) {
                        return a.childNodes[i]
                    }
                }
            }
        }, {
            key: 'isPointInBounds',
            value: function isPointInBounds(a, b) {
                if (a == null || b == null) {
                    return false
                }
                if (a.x <= b.x || a.x >= b.x + b.width) {
                    return false
                }
                if (a.y <= b.y || a.y >= b.y + b.height) {
                    return false
                }
                return true
            }
        }, {
            key: 'getPointInBounds',
            value: function getPointInBounds(a, b) {
                if (a.x <= b.x) {
                    a.x = -1
                } else {
                    a.x = a.x - b.x
                }
                if (a.y <= b.y) {
                    a.y = -1
                } else {
                    a.y = a.y - b.y
                }
                return {
                    x: a.x,
                    y: a.y
                }
            }
        }, {
            key: 'extend',
            value: function extend(a, b) {
                for (var c in b) {
                    if (b.hasOwnProperty(c)) {
                        if (bq(a[c]) === 'object' && bq(b[c]) === 'object') {
                            if (a[c] instanceof by) {
                                a[c]._items = b[c]
                            } else {
                                a[c] = b[c];
                                bz.extend(a[c], b[c])
                            }
                        } else {
                            a[c] = b[c]
                        }
                    }
                }
                return a
            }
        }, {
            key: 'apply',
            value: function apply(a, b) {
                for (var c in a) {
                    if (b.hasOwnProperty(c)) {
                        if (bq(a[c]) === 'object' && bq(b[c]) === 'object') {
                            if (a[c] instanceof by) {
                                a[c]._items = b[c]
                            } else {
                                a[c] = b[c];
                                bz.extend(a[c], b[c])
                            }
                        } else {
                            a[c] = b[c]
                        }
                    }
                }
                return a
            }
        }, {
            key: 'getKeyByValue',
            value: function getKeyByValue(a, b) {
                for (var c in a) {
                    if (a.hasOwnProperty(c)) {
                        if (a[c] === b) return c
                    }
                }
            }
        }, {
            key: 'genId',
            value: function genId(a) {
                var b, i, j;
                b = '';
                for (j = 0; j < 32; j++) {
                    if (j == 8 || j == 12 || j == 16 || j == 20) b = b + '-';
                    i = Math.floor(Math.random() * 16).toString(16).toLowerCase();
                    b = b + i
                }
                this._guid = a + b;
                return this._guid
            }
        }]);
        return bz
    }();
    var bA = function() {
        function bA() {
            br(this, bA)
        }
        bs(bA, null, [{
            key: 'generate',
            value: function generate(a) {
                return bz.genId(a)
            }
        }, {
            key: 'uuidv4',
            value: function uuidv4() {
                return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function(c) {
                    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
                })
            }
        }]);
        return bA
    }();
    var bB = function(b) {
        bu(bB, b);

        function bB(a) {
            br(this, bB);
            return bv(this, (bB.__proto__ || Object.getPrototypeOf(bB)).call(this, a))
        }
        return bB
    }(by);
    var bC = {
        Add: 1,
        Remove: -1,
        Reset: 0
    };
    var bD = function bD() {
        br(this, bD)
    };
    var bE = function(a) {
        bu(bE, a);

        function bE() {
            br(this, bE);
            return bv(this, (bE.__proto__ || Object.getPrototypeOf(bE)).call(this))
        }
        return bE
    }(bD);
    var bF = function(b) {
        bu(bF, b);

        function bF() {
            br(this, bF);
            var a = bv(this, (bF.__proto__ || Object.getPrototypeOf(bF)).call(this));
            a.m_cancel = false;
            return a
        }
        bs(bF, [{
            key: "cancel",
            get: function get$$1() {
                return this.m_cancel
            },
            set: function set$$1(a) {
                this.m_cancel = a
            }
        }]);
        return bF
    }(bD);
    var bG = function(c) {
        bu(bG, c);

        function bG(a) {
            br(this, bG);
            var b = bv(this, (bG.__proto__ || Object.getPrototypeOf(bG)).call(this));
            b.m_propertyName = a;
            return b
        }
        bs(bG, [{
            key: "propertyName",
            get: function get$$1() {
                return this.m_propertyName
            }
        }]);
        return bG
    }(bD);
    var bH = function(e) {
        bu(bH, e);

        function bH(a, b, c) {
            br(this, bH);
            var d = bv(this, (bH.__proto__ || Object.getPrototypeOf(bH)).call(this));
            d.m_action = a;
            if (b === null && c === null && a !== bC.Reset) throw new Error();
            if (a === bC.Add) {
                d.m_newItems = b
            } else if (a === bC.Remove) {
                d.m_oldItems = b
            }
            return d
        }
        bs(bH, [{
            key: "action",
            get: function get$$1() {
                return this.m_action
            }
        }, {
            key: "oldItems",
            get: function get$$1() {
                return this.m_oldItems
            }
        }, {
            key: "newItems",
            get: function get$$1() {
                return this.m_newItems
            }
        }]);
        return bH
    }(bD);
    var bI = function(e) {
        bu(bI, e);

        function bI(a, b, c) {
            br(this, bI);
            var d = bv(this, (bI.__proto__ || Object.getPrototypeOf(bI)).call(this));
            d.m_action = a;
            if (b === null && c === null && a !== bC.Reset) throw new Error();
            if (a === bC.Add) {
                d.m_newItems = b
            } else if (a === bC.Remove) {
                d.m_oldItems = b
            }
            return d
        }
        bs(bI, [{
            key: "action",
            get: function get$$1() {
                return this.m_action
            }
        }, {
            key: "oldItems",
            get: function get$$1() {
                return this.m_oldItems
            }
        }, {
            key: "newItems",
            get: function get$$1() {
                return this.m_newItems
            }
        }]);
        return bI
    }(bF);
    var bJ = function(e) {
        bu(bJ, e);

        function bJ(a, b, c) {
            br(this, bJ);
            var d = bv(this, (bJ.__proto__ || Object.getPrototypeOf(bJ)).call(this));
            d.m_propertyName = a;
            d.m_oldValue = b;
            d.m_newValue = c;
            return d
        }
        bs(bJ, [{
            key: "propertyName",
            get: function get$$1() {
                return this.m_propertyName
            }
        }, {
            key: "oldValue",
            get: function get$$1() {
                return this.m_oldValue
            }
        }, {
            key: "newValue",
            get: function get$$1() {
                return this.m_newValue
            }
        }]);
        return bJ
    }(bD);
    var bK = function() {
        function bK() {
            br(this, bK);
            this.handlers = []
        }
        bs(bK, [{
            key: "addEventListener",
            value: function addEventListener(a) {
                var b = this.handlers.indexOf(a);
                if (b === -1) this.handlers.push(a)
            }
        }, {
            key: "removeEventListener",
            value: function removeEventListener(a) {
                var b = this.handlers.indexOf(a);
                if (b > -1) this.handlers.splice(b)
            }
        }, {
            key: "raiseEvent",
            value: function raiseEvent(a, b) {
                this.handlers.slice(0).forEach(function(h) {
                    return h(a, b)
                })
            }
        }]);
        return bK
    }();
    var bL = function(a) {
        bu(bL, a);

        function bL() {
            br(this, bL);
            return bv(this, (bL.__proto__ || Object.getPrototypeOf(bL)).apply(this, arguments))
        }
        return bL
    }(bK);
    var bM = function(a) {
        bu(bM, a);

        function bM() {
            br(this, bM);
            return bv(this, (bM.__proto__ || Object.getPrototypeOf(bM)).apply(this, arguments))
        }
        return bM
    }(bK);
    var bN = function(a) {
        bu(bN, a);

        function bN() {
            br(this, bN);
            return bv(this, (bN.__proto__ || Object.getPrototypeOf(bN)).apply(this, arguments))
        }
        return bN
    }(bK);
    var bO = function(e) {
        bu(bO, e);

        function bO(a) {
            br(this, bO);
            var b = bv(this, (bO.__proto__ || Object.getPrototypeOf(bO)).call(this, a));
            b.m_collectionChanged = new bM();
            b.m_propertyChanged = new bL();
            b.m_collectionChanging = new bN();
            return b
        }
        bs(bO, [{
            key: 'onCollectionChanged',
            value: function onCollectionChanged(a) {
                this.m_collectionChanged.raiseEvent(this, a)
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a) {
                this.m_propertyChanged.raiseEvent(this, a)
            }
        }, {
            key: 'onCollectionChanging',
            value: function onCollectionChanging(a) {
                this.m_collectionChanging.raiseEvent(this, a);
                return a.cancel
            }
        }, {
            key: 'add',
            value: function add(a) {
                if (this.onCollectionChanging(new bI(bC.Add, [a], this.count()))) return;
                bt(bO.prototype.__proto__ || Object.getPrototypeOf(bO.prototype), 'add', this).call(this, a);
                this.onCollectionChanged(new bH(bC.Add, [a], this.count() - 1))
            }
        }, {
            key: 'remove',
            value: function remove(a) {
                var b = a;
                var c = this.indexOfItem(a);
                if (this.onCollectionChanging(new bI(bC.Remove, [b], c))) return;
                bt(bO.prototype.__proto__ || Object.getPrototypeOf(bO.prototype), 'remove', this).call(this, a);
                this.onCollectionChanged(new bH(bC.Remove, [b], c))
            }
        }, {
            key: 'removeRange',
            value: function removeRange(a, b) {
                var c = new by();
                bt(bO.prototype.__proto__ || Object.getPrototypeOf(bO.prototype), 'copyTo', this).call(this, c, b, a);
                if (this.onCollectionChanging(new bI(bC.Remove, c.toArray(), a))) return [];
                var d = bt(bO.prototype.__proto__ || Object.getPrototypeOf(bO.prototype), 'removeRange', this).call(this, a, b);
                this.onCollectionChanged(new bH(bC.Remove, d, a));
                return d
            }
        }, {
            key: 'removeAt',
            value: function removeAt(a) {
                var b = this.item(a);
                if (this.onCollectionChanging(new bI(bC.Remove, [b], a))) return;
                bt(bO.prototype.__proto__ || Object.getPrototypeOf(bO.prototype), 'removeAt', this).call(this, a);
                this.onCollectionChanged(new bH(bC.Remove, [b], a))
            }
        }, {
            key: 'clear',
            value: function clear() {
                if (this.onCollectionChanging(new bI(bC.Reset))) return;
                bt(bO.prototype.__proto__ || Object.getPrototypeOf(bO.prototype), 'clear', this).call(this);
                this.onCollectionChanged(new bH(bC.Reset))
            }
        }, {
            key: 'collectionChanged',
            get: function get$$1() {
                return this.m_collectionChanged
            }
        }, {
            key: 'propertyChanged',
            get: function get$$1() {
                return this.m_propertyChanged
            }
        }, {
            key: 'collectionChanging',
            get: function get$$1() {
                return this.m_collectionChanging
            }
        }]);
        return bO
    }(bB);
    var bP = function() {
        function bP() {
            br(this, bP);
            this._id = bA.generate('RSC');
            this._name = '';
            this._tag = null
        }
        bs(bP, [{
            key: 'saveToXml',
            value: function saveToXml(a, b) {
                b.writeString(this.id, "id", a);
                b.writeString(this.name, "name", a);
                b.writeTag(this, this.tag, "tag", a)
            }
        }, {
            key: 'loadFromXml',
            value: function loadFromXml(a, b) {
                this._id = b.readString("id", a);
                this._name = b.readString("name", a);
                this._tag = b.readTag(this, "tag", a)
            }
        }, {
            key: 'toJson',
            value: function toJson() {
                var a = {
                    id: this.id,
                    name: this.name,
                    tag: this.tag || null
                };
                return a
            }
        }, {
            key: 'fromJson',
            value: function fromJson(a) {
                this.id = a.id;
                this.name = a.name;
                this.tag = a.tag
            }
        }, {
            key: 'equals',
            value: function equals(a) {
                if (!a) return false;
                return this.id === a.id
            }
        }, {
            key: 'id',
            get: function get$$1() {
                return this._id
            },
            set: function set$$1(a) {
                this._id = a
            }
        }, {
            key: 'name',
            get: function get$$1() {
                return this._name
            },
            set: function set$$1(a) {
                this._name = a
            }
        }, {
            key: 'tag',
            get: function get$$1() {
                return this._tag
            },
            set: function set$$1(a) {
                this._tag = a
            }
        }]);
        return bP
    }();
    var bQ = function(c) {
        bu(bQ, c);

        function bQ() {
            br(this, bQ);
            var a = bv(this, (bQ.__proto__ || Object.getPrototypeOf(bQ)).call(this));
            a.id = bA.generate('CNT');
            a._firstName = '';
            a._middleName = '';
            a._lastName = '';
            a._address = '';
            a._phone = '';
            a._email = '';
            return a
        }
        bs(bQ, [{
            key: 'saveToXml',
            value: function saveToXml(a, b) {
                bt(bQ.prototype.__proto__ || Object.getPrototypeOf(bQ.prototype), 'saveToXml', this).call(this, a, b);
                b.writeString(this.firstName, "firstname", a);
                b.writeString(this.middleName, "middlename", a);
                b.writeString(this.lastName, "lastname", a);
                b.writeString(this.address, "address", a);
                b.writeString(this.phone, "phone", a);
                b.writeString(this.email, "email", a)
            }
        }, {
            key: 'loadFromXml',
            value: function loadFromXml(a, b) {
                bt(bQ.prototype.__proto__ || Object.getPrototypeOf(bQ.prototype), 'loadFromXml', this).call(this, a, b);
                this._firstName = b.readString("firstname", a);
                this._middleName = b.readString("middlename", a);
                this._lastName = b.readString("lastname", a);
                this._address = b.readString("address", a);
                this._phone = b.readString("phone", a);
                this._email = b.readString("email", a)
            }
        }, {
            key: 'toJson',
            value: function toJson() {
                var a = bt(bQ.prototype.__proto__ || Object.getPrototypeOf(bQ.prototype), 'toJson', this).call(this);
                a.firstName = this.firstName;
                a.middleName = this.middleName;
                a.lastName = this.lastName;
                a.address = this.address;
                a.phone = this.phone;
                a.email = this.email;
                return a
            }
        }, {
            key: 'fromJson',
            value: function fromJson(a) {
                bt(bQ.prototype.__proto__ || Object.getPrototypeOf(bQ.prototype), 'fromJson', this).call(this, a);
                this._firstName = a.firstName;
                this._middleName = a.middleName;
                this._lastName = a.lastName;
                this._address = a.address;
                this._phone = a.phone;
                this._email = a.email
            }
        }, {
            key: 'toString',
            value: function toString() {
                return (this.firstName ? this.firstName + ' ' : '') + this.lastName
            }
        }, {
            key: 'firstName',
            get: function get$$1() {
                return this._firstName
            },
            set: function set$$1(a) {
                this._firstName = a
            }
        }, {
            key: 'middleName',
            get: function get$$1() {
                return this._middleName
            },
            set: function set$$1(a) {
                this._middleName = a
            }
        }, {
            key: 'lastName',
            get: function get$$1() {
                return this._lastName
            },
            set: function set$$1(a) {
                this._lastName = a
            }
        }, {
            key: 'address',
            get: function get$$1() {
                return this._address
            },
            set: function set$$1(a) {
                this._address = a
            }
        }, {
            key: 'phone',
            get: function get$$1() {
                return this._phone
            },
            set: function set$$1(a) {
                this._phone = a
            }
        }, {
            key: 'email',
            get: function get$$1() {
                return this._email
            },
            set: function set$$1(a) {
                this._email = a
            }
        }]);
        return bQ
    }(bP);
    var bR = function(c) {
        bu(bR, c);

        function bR() {
            br(this, bR);
            var a = bv(this, (bR.__proto__ || Object.getPrototypeOf(bR)).call(this));
            a.id = bA.generate('LOC');
            a._address = '';
            a._country = '';
            a._city = '';
            a._state = '';
            a._zipCode = '';
            return a
        }
        bs(bR, [{
            key: 'toString',
            value: function toString() {
                return this.name
            }
        }, {
            key: 'saveToXml',
            value: function saveToXml(a, b) {
                bt(bR.prototype.__proto__ || Object.getPrototypeOf(bR.prototype), 'saveToXml', this).call(this, a, b);
                b.writeString(this.address, "address", a);
                b.writeString(this.country, "country", a);
                b.writeString(this.city, "city", a);
                b.writeString(this.state, "state", a);
                b.writeString(this.zipcode, "zipcode", a)
            }
        }, {
            key: 'loadFromXml',
            value: function loadFromXml(a, b) {
                bt(bR.prototype.__proto__ || Object.getPrototypeOf(bR.prototype), 'loadFromXml', this).call(this, a, b);
                this._address = b.readString("address", a);
                this._country = b.readString("country", a);
                this._city = b.readString("city", a);
                this._state = b.readString("state", a);
                this._zipcode = b.readString("zipcode", a)
            }
        }, {
            key: 'toJson',
            value: function toJson() {
                var a = bt(bR.prototype.__proto__ || Object.getPrototypeOf(bR.prototype), 'toJson', this).call(this);
                a.address = this.address;
                a.country = this.country;
                a.city = this.city;
                a.state = this.state;
                a.zipcode = this.zipcode;
                return a
            }
        }, {
            key: 'fromJson',
            value: function fromJson(a) {
                bt(bR.prototype.__proto__ || Object.getPrototypeOf(bR.prototype), 'fromJson', this).call(this, a);
                this._address = a.address;
                this._country = a.country;
                this._city = a.city;
                this._state = a.state;
                this._zipcode = a.zipcode
            }
        }, {
            key: 'address',
            get: function get$$1() {
                return this._address
            },
            set: function set$$1(a) {
                this._address = a
            }
        }, {
            key: 'country',
            get: function get$$1() {
                return this._country
            },
            set: function set$$1(a) {
                this._country = a
            }
        }, {
            key: 'city',
            get: function get$$1() {
                return this._city
            },
            set: function set$$1(a) {
                this._city = a
            }
        }, {
            key: 'state',
            get: function get$$1() {
                return this._state
            },
            set: function set$$1(a) {
                this._state = a
            }
        }, {
            key: 'zipCode',
            get: function get$$1() {
                return this._zipCode
            },
            set: function set$$1(a) {
                this._zipCode = a
            }
        }]);
        return bR
    }(bP);
    var bS = function() {
        function bS(a) {
            br(this, bS);
            this._type = Z.Leading;
            this._timeInterval = new bw(0);
            this._time = bx.minValue();
            this._message = '';
            this._changedEvent = new bK();
            if (a) {
                bz.extend(this, a)
            }
        }
        bs(bS, [{
            key: 'clone',
            value: function clone() {
                var a = new bS();
                a._type = this._type;
                a._timeInterval = this._timeInterval.clone();
                a._time = this._time;
                a._message = this._message;
                return a
            }
        }, {
            key: 'onChanged',
            value: function onChanged() {
                this._changedEvent.raiseEvent(new bE())
            }
        }, {
            key: 'saveToXml',
            value: function saveToXml(a, b) {
                b.writeString(bz.getKeyByValue(Z, this.type), "type", a);
                if (this.type == Z.Leading) b.writeInt(this.timeInterval.ticks, "timeInterval", a);
                else b.writeDateTime(this.time, "date", a);
                b.writeString(this.message, "message", a)
            }
        }, {
            key: 'loadFromXml',
            value: function loadFromXml(a, b) {
                this._type = Z[b.readString("type", a)];
                if (this._type == Z.Leading) this._timeInterval = new bw(b.readInt("timeInterval", a));
                else this._time = b.readDateTime("date", a);
                this._message = b.readString("message", a)
            }
        }, {
            key: 'toJson',
            value: function toJson() {
                var a = {};
                a.type = this.type;
                if (this.type == Z.Leading) a.timeInterval = this.timeInterval.ticks;
                else a.time = this.time._date.valueOf();
                a.message = this.message;
                return a
            }
        }, {
            key: 'fromJson',
            value: function fromJson(a) {
                this._type = a.type;
                if (this._type == Z.Leading) this._timeInterval = new bw(a.timeInterval);
                else this._time = new bx(new Date(a.time));
                this._message = a.message
            }
        }, {
            key: 'type',
            get: function get$$1() {
                return this._type
            },
            set: function set$$1(a) {
                if (this._type === a) return;
                this._type = a;
                this.onChanged()
            }
        }, {
            key: 'timeInterval',
            get: function get$$1() {
                return this._timeInterval
            },
            set: function set$$1(a) {
                if (this._timeInterval.ticks < 0) return;
                if (this._timeInterval > bS.maxInterval) return;
                if (this._timeInterval.equals(a)) return;
                this._timeInterval = a;
                this.onChanged()
            }
        }, {
            key: 'time',
            get: function get$$1() {
                return this._time
            },
            set: function set$$1(a) {
                if (this._time.equals(a)) return;
                this._time = a;
                this.onChanged()
            }
        }, {
            key: 'message',
            get: function get$$1() {
                return this._message
            },
            set: function set$$1(a) {
                if (this._message === a) return;
                this._message = a;
                this.onChanged()
            }
        }, {
            key: 'changed',
            get: function get$$1() {
                return this._changedEvent
            }
        }], [{
            key: 'maxInterval',
            get: function get$$1() {
                return bw.fromMilliseconds(bx.MillisPerDay * 2)
            }
        }]);
        return bS
    }();
    var bT = function(c) {
        bu(bT, c);

        function bT() {
            br(this, bT);
            var a = bv(this, (bT.__proto__ || Object.getPrototypeOf(bT)).call(this));
            a.id = bA.generate('TSK');
            a._dueDate = bx.maxValue();
            a._startDate = bx.minValue();
            a._actualEnd = bx.maxValue();
            a._actualStart = bx.minValue();
            a._allDayEvent = false;
            a._subject = '';
            a._details = '';
            a._status = Y.NotStarted;
            a._priority = X.Normal;
            a._progress = 0;
            a._estimatedDuration = 0;
            a._actualDuration = 0;
            a._estimatedCost = 0;
            a._actualCost = 0;
            a._reminder = null;
            return a
        }
        bs(bT, [{
            key: 'saveToXml',
            value: function saveToXml(a, b) {
                bt(bT.prototype.__proto__ || Object.getPrototypeOf(bT.prototype), 'saveToXml', this).call(this, a, b);
                b.writeDateTime(this.dueDate, "dueDate", a);
                b.writeDateTime(this.startDate, "startDate", a);
                b.writeDateTime(this.actualEnd, "actualEnd", a);
                b.writeDateTime(this.actualStart, "actualStart", a);
                b.writeBool(this.allDayEvent, "allDayEvent", a);
                b.writeString(this.subject, "subject", a);
                b.writeString(this.details, "details", a);
                b.writeString(this.status.toString(), "status", a);
                b.writeString(this.priority.oString(), "priority", a);
                b.writeFloat(this.progress, "progress", a);
                b.writeInt(this.estimatedDuration, "estimatedDuration", a);
                b.writeInt(this.actualDuration, "actualDuration", a);
                b.writeFloat(this.estimatedCost, "estimatedCost", a);
                b.writeFloat(this.actualCost, "actualCost", a);
                b.writeReminder(this.reminder, "reminder", a)
            }
        }, {
            key: 'loadFromXml',
            value: function loadFromXml(a, b) {
                bt(bT.prototype.__proto__ || Object.getPrototypeOf(bT.prototype), 'loadFromXml', this).call(this, a, b);
                this._dueDate = b.readDateTime("dueDate", a);
                this._startDate = b.readDateTime("startDate", a);
                this._actualEnd = b.readDateTime("actualEnd", a);
                this._actualStart = b.readDateTime("actualStart", a);
                this._allDayEvent = b.readBool("allDayEvent", a);
                this._subject = b.readString("subject", a);
                this._details = b.readString("details", a);
                this._status = Y[b.readString("status", a)];
                this._priority = X[b.readString("priority", a)];
                this._progress = b.readFloat("progress", a);
                this._estimatedDuration = b.readInt("estimatedDuration", a);
                this._actualDuration = b.readInt("actualDuration", a);
                this._estimatedCost = b.readFloat("estimatedCost", a);
                this._actualCost = b.readFloat("actualCost", a);
                this._reminder = b.readReminder("reminder", a)
            }
        }, {
            key: 'toJson',
            value: function toJson() {
                var a = bt(bT.prototype.__proto__ || Object.getPrototypeOf(bT.prototype), 'toJson', this).call(this);
                a.dueDate = this.dueDate._ticks;
                a.startDate = this.startDate._ticks;
                a.actualEnd = this.actualEnd._ticks;
                a.actualStart = this.actualStart._ticks;
                a.allDayEvent = this.allDayEvent;
                a.subject = this.subject;
                a.details = this.details;
                a.status = this.status;
                a.priority = this.priority;
                a.progress = this.progress;
                a.estimatedDuration = this.estimatedDuration;
                a.actualDuration = this.actualDuration;
                a.estimatedCost = this.estimatedCost;
                a.actualCost = this.actualCost;
                a.reminder = this.reminder ? this.reminder.toJson() : null;
                return a
            }
        }, {
            key: 'fromJson',
            value: function fromJson(a) {
                bt(bT.prototype.__proto__ || Object.getPrototypeOf(bT.prototype), 'fromJson', this).call(this, a);
                this.dueDate = new bx(a.dueDate);
                this.startDate = new bx(a.startDate);
                this.actualEnd = new bx(a.actualEnd);
                this.actualStart = new bx(a.actualStart);
                this.allDayEvent = a.allDayEvent;
                this.subject = a.subject;
                this.details = a.details;
                this.status = a.status;
                this.priority = a.priority;
                this.progress = a.progress;
                this.estimatedDuration = a.estimatedDuration;
                this.actualDuration = a.actualDuration;
                this.estimatedCost = a.estimatedCost;
                this.actualCost = a.actualCost;
                if (a.reminder) {
                    this.reminder = new bS();
                    this.reminder.fromJson(a.reminder)
                }
            }
        }, {
            key: 'dueDate',
            get: function get$$1() {
                return this._dueDate
            },
            set: function set$$1(a) {
                this._dueDate = a
            }
        }, {
            key: 'startDate',
            get: function get$$1() {
                return this._startDate
            },
            set: function set$$1(a) {
                this._startDate = a
            }
        }, {
            key: 'actualEnd',
            get: function get$$1() {
                return this._actualEnd
            },
            set: function set$$1(a) {
                this._actualEnd = a
            }
        }, {
            key: 'actualStart',
            get: function get$$1() {
                return this._actualStart
            },
            set: function set$$1(a) {
                this._actualStart = a
            }
        }, {
            key: 'subject',
            get: function get$$1() {
                return this._subject
            },
            set: function set$$1(a) {
                this._subject = a
            }
        }, {
            key: 'details',
            get: function get$$1() {
                return this._details
            },
            set: function set$$1(a) {
                this._details = a
            }
        }, {
            key: 'status',
            get: function get$$1() {
                return this._status
            },
            set: function set$$1(a) {
                this._status = a
            }
        }, {
            key: 'priority',
            get: function get$$1() {
                return this._priority
            },
            set: function set$$1(a) {
                this._priority = a
            }
        }, {
            key: 'progress',
            get: function get$$1() {
                return this._progress
            },
            set: function set$$1(a) {
                if (a < 0 || a > 100) return;
                this._progress = a
            }
        }, {
            key: 'estimatedDuration',
            get: function get$$1() {
                return this._estimatedDuration
            },
            set: function set$$1(a) {
                this._estimatedDuration = a
            }
        }, {
            key: 'actualDuration',
            get: function get$$1() {
                return this._actualDuration
            },
            set: function set$$1(a) {
                this._actualDuration = a
            }
        }, {
            key: 'estimatedCost',
            get: function get$$1() {
                return this._estimatedCost
            },
            set: function set$$1(a) {
                this._estimatedCost = a
            }
        }, {
            key: 'actualCost',
            get: function get$$1() {
                return this._actualCost
            },
            set: function set$$1(a) {
                this._actualCost = a
            }
        }, {
            key: 'reminder',
            get: function get$$1() {
                return this._reminder
            },
            set: function set$$1(a) {
                this._reminder = a
            }
        }]);
        return bT
    }(bP);
    var bU = function() {
        function bU(a, b) {
            br(this, bU);
            this._item = a;
            this._index = b;
            this._deleted = false
        }
        bs(bU, [{
            key: "setDeleted",
            value: function setDeleted() {
                this._deleted = true
            }
        }, {
            key: "isDeleted",
            value: function isDeleted() {
                return this._deleted
            }
        }, {
            key: "index",
            get: function get$$1() {
                return this._index
            },
            set: function set$$1(a) {
                this._index = a
            }
        }, {
            key: "item",
            get: function get$$1() {
                return this._item
            },
            set: function set$$1(a) {
                this._item = a
            }
        }]);
        return bU
    }();
    var bV = function() {
        function bV() {
            br(this, bV);
            this._keys = new bB();
            this._values = new bB()
        }
        bs(bV, [{
            key: "set",
            value: function set$$1(a, b) {
                if (this._keys.indexOfItem(a) > -1) throw new Error("key already exists in this dictionary");
                this._keys.add(a);
                this._values.add(b)
            }
        }, {
            key: "get",
            value: function get$$1(a) {
                var b = this._keys.indexOfItem(a);
                if (b > -1) {
                    return this._values.items()[b]
                }
                return null
            }
        }, {
            key: "contains",
            value: function contains(a) {
                return this._keys.indexOfItem(a) > -1
            }
        }, {
            key: "remove",
            value: function remove(a) {
                var b = this._keys.indexOfItem(a);
                if (b > -1) {
                    this._keys.removeAt(b);
                    this._values.removeAt(b)
                }
            }
        }, {
            key: "count",
            get: function get$$1() {
                return this._keys.count()
            }
        }, {
            key: "keys",
            get: function get$$1() {
                return this._keys
            }
        }, {
            key: "values",
            get: function get$$1() {
                return this._values
            }
        }]);
        return bV
    }();
    var bW = function() {
        function bW() {
            br(this, bW);
            this._pattern = bb.Weekly;
            this._daily = bc.ByDayInterval;
            this._monthly = bd.ByDayNumber;
            this._yearly = be.SpecificDate;
            this._days = 1;
            this._dayOfMonth = 1;
            this._weeks = 1;
            this._daysOfWeek = bj.Monday;
            this._months = 1;
            this._monthOfYear = 1;
            this._occurrence = bf.First;
            this._day = bg.AnyDay;
            this._interval = bx.MillisPerHour;
            this._startDate = bx.today();
            this._end = bh.NumOccurrences;
            this._numOccurrences = 10;
            this._endDate = bx.today();
            this._exceptions = new bV();
            this._master = null;
            this._resetEvent = new bK()
        }
        bs(bW, [{
            key: 'clone',
            value: function a() {
                var a = new bW();
                a.applyPattern(this);
                return a
            }
        }, {
            key: 'samePatternAs',
            value: function samePatternAs(a) {
                if (!a) return false;
                if (this._pattern !== a._pattern) return false;
                if (this._daily !== a._daily) return false;
                if (this._monthly !== a._monthly) return false;
                if (this._yearly !== a._yearly) return false;
                if (this._days !== a._days) return false;
                if (this._dayOfMonth !== a._dayOfMonth) return false;
                if (this._weeks !== a._weeks) return false;
                if (this._daysOfWeek !== a._daysOfWeek) return false;
                if (this._months !== a._months) return false;
                if (this._monthOfYear !== a._monthOfYear) return false;
                if (this._occurrence !== a._occurrence) return false;
                if (this._day !== a._day) return false;
                if (this._interval !== a._interval) return false;
                if (this._startDate !== a._startDate) return false;
                if (this._end !== a._end) return false;
                if (this._numOccurrences !== a._numOccurrences) return false;
                if (this._endDate !== a._endDate) return false;
                return true
            }
        }, {
            key: 'applyPattern',
            value: function applyPattern(a) {
                if (this.samePatternAs(a)) return;
                this._pattern = a._pattern;
                this._daily = a._daily;
                this._monthly = a._monthly;
                this._yearly = a._yearly;
                this._days = a._days;
                this._dayOfMonth = a._dayOfMonth;
                this._weeks = a._weeks;
                this._daysOfWeek = a._daysOfWeek;
                this._months = a._months;
                this._monthOfYear = a._monthOfYear;
                this._occurrence = a._occurrence;
                this._day = a._day;
                this._interval = a._interval;
                this._startDate = a._startDate.clone();
                this._end = a._end;
                this._numOccurrences = a._numOccurrences;
                if (a._endDate) this._endDate = a._endDate.clone();
                this.onReset()
            }
        }, {
            key: 'getEndDate',
            value: function getEndDate() {
                if (this._end === bh.Never) return bx.maxValue();
                if (this._end === bh.EndDate) return this._endDate;
                var a = this._startDate.clone();
                var b = 0;
                while (b < this._numOccurrences) {
                    var c = {
                        value: a
                    };
                    var d = this.getNextOccurrence(c);
                    a = c.value;
                    if (d) {
                        b += 1;
                        if (b >= this._numOccurrences) break
                    }
                    switch (this._pattern) {
                        case bb.Daily:
                            switch (this._daily) {
                                case bc.ByDayInterval:
                                    a = a.addDays(this._days);
                                    break;
                                case bc.EveryWorkday:
                                case bc.EveryWeekend:
                                    a = a.addDays(1);
                                    break;
                                default:
                                    break
                            }
                            break;
                        case bb.Weekly: {
                            var e = this._weeks;
                            if (b === 0) e = 1;
                            if (a.dayOfWeek === bi.Saturday) a = a.addDays(7 * (e - 1) + 1);
                            else if (!d) a = a.addDays(7 * (e - 1));
                            else a = a.addDays(1);
                            break
                        }
                        case bb.Monthly: {
                            var f = a.daysInMonth - a.day + 1;
                            a = a.addDays(f);
                            if (d) {
                                for (var i = 0; i < this._months - 1; i += 1) {
                                    f = a.daysInMonth;
                                    a = a.addDays(f)
                                }
                            }
                            break
                        }
                        case bb.Yearly:
                            a = a.addDays(1);
                            break;
                        case bb.ByTimeInterval:
                            a = a.addMilliseconds(this._interval);
                            break;
                        default:
                            break
                    }
                    if (a.year >= 9000) break
                }
                return a
            }
        }, {
            key: 'associateWith',
            value: function associateWith(a) {
                if (this._master === a) return;
                if (this._master) this._master.recurrence = null;
                this._master = a;
                this.onReset()
            }
        }, {
            key: 'onReset',
            value: function onReset() {
                if (this._exceptions.count === 0) return;
                this._exceptions = new bV();
                this._resetEvent.raiseEvent(this, new bE())
            }
        }, {
            key: 'getDayOfTheMonth',
            value: function getDayOfTheMonth(a, b, c) {
                var d = a.year;
                var e = a.month;
                var f = a.daysInMonth;
                if (c === bg.AnyDay) {
                    if (b === bf.Last) return f;
                    return b + 1
                }
                if (c === bg.Workday) {
                    if (b === bf.Last) {
                        var g = f;
                        var h = bx.fromDateParts(d, e, g).dayOfWeek;
                        while (h === bi.Saturday || h === bi.Sunday) {
                            g -= 1;
                            h = (h + 6) % 7
                        }
                        return g
                    } else {
                        var i = 1;
                        var j = 1 + b;
                        var k = bx.fromDateParts(d, e, 1).dayOfWeek;
                        while (true) {
                            if (k !== bi.Saturday && k !== bi.Sunday) j -= 1;
                            if (j === 0) break;
                            i += 1;
                            k = (k + 1) % 7
                        }
                        return i
                    }
                }
                if (c === bg.Weekend) {
                    if (b === bf.Last) {
                        var l = f;
                        var m = bx.fromDateParts(d, e, l).dayOfWeek;
                        while (m !== bi.Saturday && m !== bi.Sunday) {
                            l -= 1;
                            m = (m + 6) % 7
                        }
                        return l
                    } else {
                        var n = 1;
                        var o = 1 + b;
                        var p = bx.fromDateParts(d, e, 1).dayOfWeek;
                        while (true) {
                            if (p === bi.Saturday || p === bi.Sunday) o -= 1;
                            if (o === 0) break;
                            n += 1;
                            p = (p + 1) % 7
                        }
                        return n
                    }
                }
                var q = c - bg.Sunday;
                if (b === bf.Last) {
                    var r = f;
                    var s = bx.fromDateParts(d, e, r).dayOfWeek;
                    while (s !== q) {
                        r -= 1;
                        s = (s + 6) % 7
                    }
                    return r
                } else {
                    var t = 1;
                    var u = 1 + b;
                    var v = bx.fromDateParts(d, e, 1).dayOfWeek;
                    while (true) {
                        if (v === q) u -= 1;
                        if (u === 0) break;
                        t += 1;
                        v = (v + 1) % 7
                    }
                    return t
                }
            }
        }, {
            key: 'gotoFirstOccurrence',
            value: function gotoFirstOccurrence(a, b) {
                b.value = 0;
                if (a.equals(this._startDate) && this._pattern !== bb.ByTimeInterval) return a;
                switch (this._pattern) {
                    case bb.Daily:
                        switch (this._daily) {
                            case bc.ByDayInterval: {
                                var c = a.subtract(this._startDate) / bx.MillisPerDay;
                                var d = (this._days - c % this._days) % this._days;
                                b.value = (c + d) / this._days;
                                return a.addDays(d)
                            }
                            case bc.EveryWorkday: {
                                var e = a.subtract(this._startDate) / bx.MillisPerDay;
                                if (e < 7) break;
                                var f = e - e % 7;
                                b.value = f / 7 * 5;
                                return this._startDate.clone().addDays(f)
                            }
                            case bc.EveryWeekend: {
                                var g = a.subtract(this._startDate) / bx.MillisPerDay;
                                if (g < 7) break;
                                var h = g - g % 7;
                                b.value = h / 7 * 2;
                                return this._startDate.clone().addDays(h)
                            }
                            default:
                                break
                        }
                        break;
                    case bb.Weekly: {
                        var i = a.subtract(this._startDate) / bx.MillisPerDay;
                        if (i < this._weeks * 7) break;
                        var j = i - i % (this._weeks * 7);
                        var k = 0;
                        if ((this._daysOfWeek & bj.Monday) > 0) k += 1;
                        if ((this._daysOfWeek & bj.Tuesday) > 0) k += 1;
                        if ((this._daysOfWeek & bj.Wednesday) > 0) k += 1;
                        if ((this._daysOfWeek & bj.Thursday) > 0) k += 1;
                        if ((this._daysOfWeek & bj.Friday) > 0) k += 1;
                        if ((this._daysOfWeek & bj.Saturday) > 0) k += 1;
                        if ((this._daysOfWeek & bj.Sunday) > 0) k += 1;
                        b.value = j / (this._weeks * 7) * k;
                        return this._startDate.clone().addDays(j)
                    }
                    case bb.Monthly:
                        switch (this._monthly) {
                            case bd.ByDayNumber: {
                                var l = this._startDate.month;
                                var m = this._startDate.year;
                                if (this._startDate.day > Math.min(this._dayOfMonth, bx.fromDateParts(m, l).dayOfMonth)) {
                                    l += 1;
                                    if (l > 12) {
                                        l = 1;
                                        m += 1
                                    }
                                }
                                var n = a.month;
                                var o = a.year;
                                if (a.day < Math.min(this._dayOfMonth, bx.fromDateParts(o, n).dayOfMonth)) {
                                    n -= 1;
                                    if (n < 1) {
                                        n = 12;
                                        o -= 1
                                    }
                                }
                                n += (o - m) * 12;
                                if (n < l) break;
                                b.value = 1 + (n - l - 1) / this._months;
                                n = l + b.value * this._months;
                                o = m + (n - 1) / 12;
                                n = (n - 1) % 12 + 1;
                                var p = Math.min(this._dayOfMonth, bx.fromDateParts(o, n).dayOfMonth);
                                return bx.fromDateParts(o, n, p)
                            }
                            case bd.ByDayType: {
                                var q = this._startDate.month;
                                var r = this._startDate.year;
                                var s = this.getDayOfTheMonth(this._startDate, this._occurrence, this._day);
                                if (this._startDate.Day > s) {
                                    q += 1;
                                    if (q > 12) {
                                        q = 1;
                                        r += 1
                                    }
                                }
                                var t = a.month;
                                var u = a.year;
                                s = this.getDayOfTheMonth(a, this._occurrence, this._day);
                                if (a.day < s) {
                                    t -= 1;
                                    if (t < 1) {
                                        t = 12;
                                        u -= 1
                                    }
                                }
                                t += (u - r) * 12;
                                if (t <= q) break;
                                b.value = 1 + (t - q - 1) / this._months;
                                t = q + (b.value - 1) * this._months;
                                u = r + (t - 1) / 12;
                                t = (t - 1) % 12 + 1;
                                s = this.getDayOfTheMonth(bx.fromDateParts(u, t, 1), this._occurrence, this._day);
                                return bx.fromDateParts(u, t, s)
                            }
                            default:
                                break
                        }
                        break;
                    case bb.Yearly:
                        switch (this._yearly) {
                            case be.SpecificDate: {
                                var v = this._startDate.month;
                                var w = this._startDate.year;
                                var x = Math.min(this._dayOfMonth, bx.fromDateParts(w, v).dayOfMonth);
                                if (v > this._monthOfYear - 1 || v === this._monthOfYear - 1 && x > this._startDate.day) {
                                    w += 1
                                }
                                var y = a.month;
                                var z = a.year;
                                x = Math.min(this._dayOfMonth, bx.fromDateParts(z, y).dayOfMonth);
                                if (y < this._monthOfYear - 1 || y === this._monthOfYear - 1 && x < a.day) {
                                    z -= 1
                                }
                                if (z < w) break;
                                b.value = z - w;
                                return bx.fromDateParts(z, this._monthOfYear - 1, 1)
                            }
                            case be.ByDayType: {
                                var A = this._startDate.month;
                                var B = this._startDate.year;
                                var C = this.getDayOfTheMonth(this._startDate, this._occurrence, this._day);
                                if (A > this._monthOfYear - 1 || A === this._monthOfYear - 1 && C > this._startDate.day) {
                                    B += 1
                                }
                                var D = a.month;
                                var E = a.year;
                                C = this.getDayOfTheMonth(a, this._occurrence, this._day);
                                if (D < this._monthOfYear - 1 || D === this._monthOfYear - 1 && C < a.day) {
                                    E -= 1
                                }
                                if (E < B) break;
                                b.value = E - B;
                                return bx.fromDateParts(E, this._monthOfYear - 1, 1)
                            }
                            default:
                                break
                        }
                        break;
                    case bb.ByTimeInterval: {
                        if (a.lessThan(this._master.startTime)) return this._master.startTime;
                        var F = a.subtract2(this._master.startTime);
                        var G = this._interval;
                        var H = F / G;
                        b.value = H;
                        if (H !== 0 && F % H > 0) b.value += 1;
                        return this._master.startTime.clone().addMilliseconds(b.value * G)
                    }
                    default:
                        break
                }
                return this._startDate
            }
        }, {
            key: 'getNextOccurrence',
            value: function getNextOccurrence(a) {
                var b = a.value.clone();
                switch (this._pattern) {
                    case bb.Daily:
                        switch (this._daily) {
                            case bc.ByDayInterval:
                                break;
                            case bc.EveryWorkday: {
                                var c = b.dayOfWeek;
                                if (c === bi.Saturday || c === bi.Sunday) {
                                    var d = 2 - (c + 1) % 7;
                                    b = b.addDays(d)
                                }
                                break
                            }
                            case bc.EveryWeekend: {
                                var e = b.dayOfWeek;
                                if (e !== bi.Saturday && e !== bi.Sunday) {
                                    var f = 6 - e;
                                    b = b.addDays(f)
                                }
                                break
                            }
                            default:
                                break
                        }
                        break;
                    case bb.Weekly: {
                        var g = [];
                        g.push((this._daysOfWeek & bj.Sunday) > 0);
                        g.push((this._daysOfWeek & bj.Monday) > 0);
                        g.push((this._daysOfWeek & bj.Tuesday) > 0);
                        g.push((this._daysOfWeek & bj.Wednesday) > 0);
                        g.push((this._daysOfWeek & bj.Thursday) > 0);
                        g.push((this._daysOfWeek & bj.Friday) > 0);
                        g.push((this._daysOfWeek & bj.Saturday) > 0);
                        var i = b.dayOfWeek;
                        while (i < 7) {
                            if (g[i]) break;
                            i += 1;
                            if (i !== 7) b = b.addDays(1)
                        }
                        if (i === 7) {
                            a.value = b;
                            return false
                        }
                        break
                    }
                    case bb.Monthly: {
                        var h;
                        switch (this._monthly) {
                            case bd.ByDayNumber: {
                                var j = new bx(new Date(b._date.getFullYear(), b._date.getMonth()));
                                h = Math.min(this.dayOfMonth, j.getDaysInMonth(j.isLeapYear()));
                                if (b.day > h) return false;
                                b = bx.fromDateParts(b.year, b.month, h);
                                break
                            }
                            case bd.ByDayType: {
                                h = this.getDayOfTheMonth(b, this._occurrence, this._day);
                                if (b.day > h) return false;
                                b = bx.fromDateParts(b.year, b.month, h);
                                break
                            }
                            default:
                                break
                        }
                        break
                    }
                    case bb.Yearly:
                        switch (this._yearly) {
                            case be.SpecificDate: {
                                if (b.month === this._monthOfYear - 1) {
                                    var k = b.daysInMonth;
                                    var l = Math.min(this._dayOfMonth, k);
                                    if (b.day <= l) {
                                        var m = l - b.day;
                                        b = b.addDays(m);
                                        break
                                    } else {
                                        var n = k - b.day + 1;
                                        b = b.addDays(n)
                                    }
                                }
                                while (b.month !== this._monthOfYear - 1) {
                                    b = b.addDays(b.daysInMonth - b.day + 1)
                                }
                                var o = Math.min(this._dayOfMonth, b.daysInMonth);
                                if (o > 1) b = b.addDays(o - b.day);
                                break
                            }
                            case be.ByDayType: {
                                if (b.month === this._monthOfYear - 1) {
                                    var p = this.getDayOfTheMonth(b, this._occurrence, this._day);
                                    if (b.day <= p) {
                                        var q = p - b.day;
                                        b = b.addDays(q);
                                        break
                                    } else {
                                        var r = b.daysInMonth;
                                        var s = r - b.day + 1;
                                        b = b.addDays(s)
                                    }
                                }
                                while (b.month !== this._monthOfYear - 1) {
                                    b = b.addDays(b.daysInMonth - b.day + 1)
                                }
                                var t = this.getDayOfTheMonth(b, this._occurrence, this._day);
                                if (t > 1) b = b.addDays(t - 1);
                                break
                            }
                            default:
                                break
                        }
                        break;
                    case bb.ByTimeInterval:
                        break;
                    default:
                        break
                }
                a.value = b;
                return true
            }
        }, {
            key: '_getNextOccurrence',
            value: function _getNextOccurrence(a, b) {
                if (!this.getNextOccurrence(b)) return null;
                var c = b.value.clone();
                var d = new bX();
                if (this._pattern !== bb.ByTimeInterval) {
                    var e = c.year;
                    var f = c.month;
                    var g = c.day;
                    var h = this._master.startTime.hour;
                    var i = this._master.startTime.minute;
                    var j = this._master.startTime.second;
                    d.startTime = bx.fromDateParts(e, f, g, h, i, j)
                } else {
                    d.startTime = c
                }
                var k;
                if (d.allDayEvent) {
                    k = bx.millisecondsBetween(a.endTime, a.startTime);
                    d.endTime = bx.addTicksToDate(d.startTime, k)
                } else {
                    k = a.endTime.valueOf() - a.startTime.valueOf();
                    d.endTime = new bx(new Date(d.startTime.valueOf() + k))
                }
                return d
            }
        }, {
            key: 'getOccurrence',
            value: function getOccurrence(a, b, c) {
                if (!this._master) throw new Error('The recurrence is not associated with an item.');
                if (a < 0) throw new Error('Index cannot be negative.');
                if (this._end === bh.NumOccurrences) {
                    if (a >= this._numOccurrences) return null
                }
                var d = this._startDate.clone();
                var e = bx.maxValue();
                if (this._end === bh.EndDate && this._endDate.lessThan(e)) e = this._endDate;
                var i = 0;
                var f = {
                    value: i
                };
                var g = null;
                var h = this.gotoFirstOccurrence(this._startDate.clone(), f);
                i = f.value;
                while (true) {
                    if (h.greaterThan(e)) break;
                    if (this._end === bh.NumOccurrences) {
                        if (i >= this._numOccurrences) break
                    }
                    var j = {
                        value: h
                    };
                    var k = this._getNextOccurrence(this._master, j);
                    h = j.value;
                    if (h.greaterThan(e)) break;
                    if (k && h.greaterThanOrEqual(d)) {
                        if (i === a) {
                            k.copyOccurrence(this._master);
                            k.setOccurrence(this, i);
                            g = k;
                            break
                        }
                    }
                    if (k) i += 1;
                    switch (this._pattern) {
                        case bb.Daily:
                            switch (this._daily) {
                                case bc.ByDayInterval:
                                    h = h.addDays(this._days);
                                    break;
                                case bc.EveryWorkday:
                                case bc.EveryWeekend:
                                    h = h.addDays(1);
                                    break;
                                default:
                                    break
                            }
                            break;
                        case bb.Weekly: {
                            var l = this._weeks;
                            if (i === 0) l = 1;
                            if (h.dayOfWeek === bi.Saturday) h = h.addDays(7 * (l - 1) + 1);
                            else if (!k) h = h.addDays(7 * (l - 1));
                            else h = h.addDays(1);
                            break
                        }
                        case bb.Monthly: {
                            var n = h.daysInMonth - h.day + 1;
                            h = h.addDays(n);
                            if (k) {
                                for (var m = 0; m < this._months - 1; m += 1) {
                                    n = h.daysInMonth;
                                    h = h.addDays(n)
                                }
                            }
                            break
                        }
                        case bb.Yearly:
                            h = h.addDays(1);
                            break;
                        case bb.ByTimeInterval:
                            h = h.addMilliseconds(this._interval);
                            break;
                        default:
                            break
                    }
                }
                if (g) {
                    if (this._exceptions.contains(a) && !c) {
                        var o = this._exceptions.get(a);
                        g = o.item;
                        if (b) b.value = o.isDeleted()
                    }
                }
                return g
            }
        }, {
            key: 'generateItems',
            value: function generateItems(a, b) {
                if (!this._master) throw new Error('Cannot generate items for recurrence that is not associated.');
                var c = [];
                var d = a.clone();
                if (this._pattern !== bb.ByTimeInterval) d = a.date;
                if (this._startDate.greaterThan(d)) d = this._startDate;
                var e = b;
                if (this._end === bh.EndDate && this._endDate.lessThan(e)) e = this._endDate;
                var f = 0;
                var g = {
                    value: f
                };
                var h = this.gotoFirstOccurrence(d.clone(), g);
                f = g.value;
                while (true) {
                    if (h.greaterThan(e)) break;
                    if (this._end === bh.NumOccurrences) {
                        if (f >= this._numOccurrences) break
                    }
                    var j = {
                        value: h
                    };
                    var k = this._getNextOccurrence(this._master, j);
                    h = j.value;
                    if (h.greaterThan(e)) break;
                    if (k && h.greaterThanOrEqual(d)) {
                        k.copyOccurrence(this._master);
                        k.setOccurrence(this, f);
                        c.push(k)
                    }
                    if (k) f += 1;
                    switch (this._pattern) {
                        case bb.Daily:
                            switch (this._daily) {
                                case bc.ByDayInterval:
                                    h = h.addDays(this._days);
                                    break;
                                case bc.EveryWorkday:
                                case bc.EveryWeekend:
                                    h = h.addDays(1);
                                    break;
                                default:
                                    break
                            }
                            break;
                        case bb.Weekly: {
                            var l = this._weeks;
                            if (f === 0) l = 1;
                            if (h.dayOfWeek === bi.Saturday) h = h.addDays(7 * (l - 1) + 1);
                            else if (!k) h = h.addDays(7 * (l - 1));
                            else h = h.addDays(1);
                            break
                        }
                        case bb.Monthly: {
                            var m = h.daysInMonth - h.day + 1;
                            h = h.addDays(m);
                            if (k) {
                                for (var i = 0; i < this._months - 1; i += 1) {
                                    m = h.daysInMonth;
                                    h = h.addDays(m)
                                }
                            }
                            break
                        }
                        case bb.Yearly:
                            h = h.addDays(1);
                            break;
                        case bb.ByTimeInterval:
                            h = h.addMilliseconds(this._interval);
                            break;
                        default:
                            break
                    }
                }
                var n = new bV();
                for (var o = 0; o < c.length;) {
                    f = c[o].occurrenceIndex;
                    if (this._exceptions.contains(f)) {
                        var p = this._exceptions.get(f);
                        n.set(p, p);
                        if (p.isDeleted()) {
                            c.splice(o, 1);
                            continue
                        }
                        c[o] = p.item
                    }
                    o += 1
                }
                var q = this._exceptions.values;
                for (var r = 0; r < q.length; r += 1) {
                    var s = q[r];
                    if (n.contains(s)) continue;
                    if (!s.isDeleted()) c.push(s.item)
                }
                return c
            }
        }, {
            key: 'clearExceptions',
            value: function clearExceptions() {
                this.onReset()
            }
        }, {
            key: 'markException',
            value: function markException(a, b, c) {
                if (a.recurrenceState !== ba.Occurrence) {
                    if (a.recurrenceState !== ba.Exception || !b) return
                }
                var d = void 0;
                var e = a.occurrenceIndex;
                if (this._exceptions.contains(e)) {
                    d = this._exceptions.get(e);
                    if (b) d.setDeleted()
                } else {
                    d = new bU(a, e);
                    if (b) d.setDeleted();
                    this._exceptions.set(e, d)
                }
                a.setException();
                if (c) a.reminder = c;
                else if (a.recurrence.master.reminder) a.reminder = a.recurrence.master.reminder.clone()
            }
        }, {
            key: 'removeException',
            value: function removeException(a) {
                var b = this._exceptions.keys;
                for (var i = 0; i < b.length; i += 1) {
                    var c = b[i];
                    if (a.occurrenceIndex !== c) continue;
                    a.setOccurrence(this, c);
                    this._exceptions.remove(c);
                    break
                }
            }
        }, {
            key: 'toLocalizedString',
            value: function toLocalizedString(b, c) {
                var d = [c.recurrenceDailyOnePattern, c.recurrenceDailyTwoPattern, c.recurrenceDailyThreePattern, c.recurrenceDailyFourPattern, c.recurrenceWeeklyOnePattern, c.recurrenceWeeklyTwoPattern, c.recurrenceMonthlyOnePattern, c.recurrenceMonthlyTwoPattern, c.recurrenceYearlyOnePattern, c.recurrenceYearlyTwoPattern, c.recurrenceIntervalPattern, c.recurrenceStartDatePattern, c.recurrenceEndDatePattern, c.recurrenceTimeOnePattern, c.recurrenceTimeTwoPattern];
                var e = Math.floor(this.interval / bx.MillisPerHour * 60) % 60;
                var f = Math.round(this.interval / bx.MillisPerHour * 60 % 60 * 60 % 60);
                if (f >= 60) {
                    e += f / 60;
                    f -= 60 * (f / 60)
                }
                var g = new bV();
                g.set('Days', this.days);
                g.set('DaysOfWeek', this.getDaysOfWeekString(b));
                g.set('Weeks', this.weeks);
                g.set('DayOfMonth', this.dayOfMonth);
                g.set('Months', this.months);
                g.set('Occurrence', this.getOccurrenceString(c));
                g.set('Day', this.getDayOfWeekTypeString(b, c));
                g.set('MonthOfYear', b.months.long[this.monthOfYear]);
                g.set('Interval.Days', Math.floor(this.interval / bx.MillisPerHour / 24.0));
                g.set('Interval.Hours', Math.floor(this.interval / bx.MillisPerHour % 24));
                g.set('Interval.Minutes', e);
                g.set('Interval.Seconds', f);
                g.set('StartDate', this.startDate.toString(b.dateFormats.shortDate, b));
                g.set('EndDate', this.getEndDate().toString(b.dateFormats.shortDate, b));
                g.set('StartTime', this._master != null ? this._master.startTime.toString(b.dateFormats.shortTime, b) : '');
                g.set('EndTime', this._master != null ? this._master.endTime.toString(b.dateFormats.shortTime, b) : '');
                var h = this.getOutcome();
                var i = String.format('{0} {1}', d[h[0]], d[11]);
                if (h[1] !== -1) {
                    i += String.format(' {0}', d[h[1]])
                }
                if (h[2] !== -1) {
                    i += String.format(' {0}', d[h[2]])
                }
                var j = '\\[(' + g.keys.items().join('|') + ')\\]';
                var k = new RegExp(j, 'g');
                var l = i.replace(k, function(m) {
                    var a = m.replace('[', '').replace(']', '');
                    if (g.contains(a)) {
                        return g.get(a)
                    }
                    return m
                });
                return l
            }
        }, {
            key: 'getDaysOfWeekString',
            value: function getDaysOfWeekString(a) {
                var b = '';
                var c = [];
                c[0] = (this.daysOfWeek & bj.Sunday) > 0;
                c[1] = (this.daysOfWeek & bj.Monday) > 0;
                c[2] = (this.daysOfWeek & bj.Tuesday) > 0;
                c[3] = (this.daysOfWeek & bj.Wednesday) > 0;
                c[4] = (this.daysOfWeek & bj.Thursday) > 0;
                c[5] = (this.daysOfWeek & bj.Friday) > 0;
                c[6] = (this.daysOfWeek & bj.Saturday) > 0;
                for (var i = 0, l = c.length; i < l; i++) {
                    if (c[i] == true) {
                        b = b.concat(a.days.long[i], ', ')
                    }
                }
                if (b.length > 0) {
                    b = b.substr(0, b.length - 2)
                }
                return b
            }
        }, {
            key: 'getOccurrenceString',
            value: function getOccurrenceString(a) {
                var b = [a.firstValue, a.secondValue, a.thirdValue, a.fourthValue, a.lastValue];
                return b[this.occurrence]
            }
        }, {
            key: 'getDayOfWeekTypeString',
            value: function getDayOfWeekTypeString(a, b) {
                var c = [b.dayValue, b.weekdayValue, b.weekendValue, a.days.long[0], a.days.long[1], a.days.long[2], a.days.long[3], a.days.long[4], a.days.long[5], a.days.long[6]];
                return c[this.day]
            }
        }, {
            key: 'getOutcome',
            value: function getOutcome() {
                var a = [-1, -1, -1];
                var b = -1;
                switch (this.pattern) {
                    case bb.Daily:
                        switch (this.dailyRecurrence) {
                            case bc.ByDayInterval:
                                if (this.days === 1) {
                                    b = 0
                                } else {
                                    b = 1
                                }
                                break;
                            case bc.EveryWorkday:
                                b = 2;
                                break;
                            case bc.EveryWeekend:
                                b = 3;
                                break
                        }
                        break;
                    case bb.Weekly:
                        if (this.weeks == 1) {
                            b = 4
                        } else {
                            b = 5
                        }
                        break;
                    case bb.Monthly:
                        switch (this.monthlyRecurrence) {
                            case bd.ByDayNumber:
                                b = 6;
                                break;
                            case bd.ByDayType:
                                b = 7;
                                break
                        }
                        break;
                    case bb.Yearly:
                        switch (this.yearlyRecurrence) {
                            case be.SpecificDate:
                                b = 8;
                                break;
                            case be.ByDayType:
                                b = 9;
                                break
                        }
                        break;
                    case bb.ByTimeInterval:
                        b = 10;
                        break
                }
                a[0] = b;
                if (this.recurrenceEnd != bh.Never) {
                    a[1] = 12
                }
                if (this.pattern == bb.ByTimeInterval) {
                    return a
                }
                if (this._master != null && this._master.startTime !== 0 && this._master.endTime !== 0) {
                    var c = this._master.startTime.getTimeOfTheDay();
                    var d = this._master.endTime.getTimeOfTheDay();
                    if (!((c == 0 || this._master.allDayEvent) && (d == 0 || this._master.allDayEvent))) {
                        if (c != d) {
                            a[2] = 13
                        } else {
                            a[2] = 14
                        }
                    }
                }
                return a
            }
        }, {
            key: 'getExceptions',
            value: function getExceptions() {
                return this._exceptions.values
            }
        }, {
            key: 'extend',
            value: function extend(a) {
                this.applyPattern(a)
            }
        }, {
            key: 'saveToXml',
            value: function saveToXml(a, b) {
                b.writeString(bz.getKeyByValue(bb, this._pattern), "pattern", a);
                b.writeString(bz.getKeyByValue(bc, this._daily), "daily", a);
                b.writeString(bz.getKeyByValue(bd, this._monthly), "monthly", a);
                b.writeString(bz.getKeyByValue(be, this._yearly), "yearly", a);
                b.writeInt(this._days, "days", a);
                b.writeInt(this._dayOfMonth, "dayOfMonth", a);
                b.writeInt(this._weeks, "weeks", a);
                b.writeString(bz.getKeyByValue(bj, this._daysOfWeek), "daysOfWeek", a);
                b.writeInt(this._months, "months", a);
                b.writeInt(this._monthOfYear, "monthOfYear", a);
                b.writeString(bz.getKeyByValue(bf, this._occurrence), "occurrence", a);
                b.writeString(bz.getKeyByValue(bg, this._day), "day", a);
                b.writeInt(this._interval * bx.TicksPerMillisecond, "interval", a);
                b.writeDateTime(this._startDate, "startDate", a);
                b.writeString(bz.getKeyByValue(bh, this._end), "end", a);
                b.writeInt(this._numOccurrences, "numOccurrences", a);
                b.writeDateTime(this._endDate, "endDate", a);
                var c = b.addChildElement("exceptions", a);
                for (var i = 0; i < this._exceptions._keys.count(); i++) {
                    var d = this._exceptions.get(this._exceptions._keys.items()[i]);
                    var e = b.addChildElement("exception", c);
                    b.writeInt(d._index, "index", e);
                    b.writeBool(d._deleted, "deleted", e);
                    b.saveItem(d._item, e, "")
                }
            }
        }, {
            key: 'loadFromXml',
            value: function loadFromXml(a, b) {
                this._pattern = bb[b.readString("pattern", a)];
                this._daily = bc[b.readString("daily", a)];
                this._monthly = bd[b.readString("monthly", a)];
                this._yearly = be[b.readString("yearly", a)];
                this._days = b.readInt("days", a);
                this._dayOfMonth = b.readInt("dayOfMonth", a);
                this._weeks = b.readInt("weeks", a);
                this._daysOfWeek = bj[b.readString("daysOfWeek", a)];
                this._months = b.readInt("months", a);
                this._monthOfYear = b.readInt("monthOfYear", a);
                this._occurrence = bf[b.readString("occurrence", a)];
                this._day = bg[b.readString("day", a)];
                this._interval = b.readInt("interval", a) / bx.TicksPerMillisecond;
                this._startDate = b.readDateTime("startDate", a);
                this._end = bh[b.readString("end", a)];
                this._numOccurrences = b.readInt("numOccurrences", a);
                this._endDate = b.readDateTime("endDate", a);
                this.onReset();
                var c = a.getElementsByTagName("exceptions")[0];
                var d = c.firstElementChild;
                while (d != null) {
                    var e = b.readInt("index", d);
                    var f = b.readBool("deleted", d);
                    var g = b.loadItem(d);
                    var h = new bU(g, e);
                    if (f) h.setDeleted();
                    g.setOccurrence(this, e);
                    g.setException();
                    this._exceptions.set(e, h);
                    d = d.nextElementSibling
                }
            }
        }, {
            key: 'toJson',
            value: function toJson() {
                var a = {};
                a.pattern = this.pattern;
                a.daily = this._daily;
                a.monthly = this._monthly;
                a.yearly = this._yearly;
                a.days = this.days;
                a.dayOfMonth = this.dayOfMonth;
                a.weeks = this.weeks;
                a.daysOfWeek = this.daysOfWeek;
                a.months = this.months;
                a.monthOfYear = this.monthOfYear;
                a.occurrence = this.occurrence;
                a.day = this.day;
                a.interval = this.interval;
                a.startDate = this.startDate._date.valueOf();
                a.end = this._end;
                a.numOccurrences = this.numOccurrences;
                a.endDate = this.endDate._date.valueOf();
                var b = [];
                for (var i = 0; i < this._exceptions._keys.count(); i++) {
                    var c = this._exceptions.get(this._exceptions._keys.items()[i]);
                    var d = {
                        index: c._index,
                        deleted: c._deleted,
                        item: c._item.toJson()
                    };
                    b.push(d)
                }
                a.exceptions = b;
                return a
            }
        }, {
            key: 'fromJson',
            value: function fromJson(a, b) {
                this._pattern = a.pattern;
                this._daily = a.daily;
                this._monthly = a.monthly;
                this._yearly = a.yearly;
                this._days = a.days;
                this._dayOfMonth = a.dayOfMonth;
                this._weeks = a.weeks;
                this._daysOfWeek = a.daysOfWeek;
                this._months = a.months;
                this._monthOfYear = a.monthOfYear;
                this._occurrence = a.occurrence;
                this._day = a.day;
                this._interval = a.interval;
                this._startDate = new bx(new Date(a.startDate));
                this._end = a.end;
                this._numOccurrences = a.numOccurrences;
                this._endDate = new bx(new Date(a.endDate));
                this.onReset();
                for (var i = 0; i < a.exceptions.length; i++) {
                    var c = a.exceptions[i];
                    var d = c.index;
                    var e = c.deleted;
                    var f = new bX();
                    f.fromJson(c.item, b);
                    var g = new bU(f, d);
                    if (e) g.setDeleted();
                    f.setOccurrence(this, d);
                    f.setException();
                    this._exceptions.set(d, g)
                }
            }
        }, {
            key: 'pattern',
            get: function get$$1() {
                return this._pattern
            },
            set: function set$$1(a) {
                if (this._pattern === a) return;
                this._pattern = a;
                this.onReset()
            }
        }, {
            key: 'dailyRecurrence',
            get: function get$$1() {
                return this._daily
            },
            set: function set$$1(a) {
                if (this._daily === a) return;
                this._daily = a;
                this.onReset()
            }
        }, {
            key: 'monthlyRecurrence',
            get: function get$$1() {
                return this._monthly
            },
            set: function set$$1(a) {
                if (this._monthly === a) return;
                this._monthly = a;
                this.onReset()
            }
        }, {
            key: 'yearlyRecurrence',
            get: function get$$1() {
                return this._yearly
            },
            set: function set$$1(a) {
                if (this._yearly === a) return;
                this._yearly = a;
                this.onReset()
            }
        }, {
            key: 'days',
            get: function get$$1() {
                return this._days
            },
            set: function set$$1(a) {
                if (a <= 0) throw new Error('days must be greater than 0.');
                if (this._days === a) return;
                this._days = a;
                this.onReset()
            }
        }, {
            key: 'dayOfMonth',
            get: function get$$1() {
                return this._dayOfMonth
            },
            set: function set$$1(a) {
                if (a <= 0 || a > 31) throw new Error('dayOfMonth must be between 1 and 31.');
                if (this._dayOfMonth === a) return;
                this._dayOfMonth = a;
                this.onReset()
            }
        }, {
            key: 'weeks',
            get: function get$$1() {
                return this._weeks
            },
            set: function set$$1(a) {
                if (a <= 0) throw new Error('weeks must be greater than 0.');
                if (this._weeks === a) return;
                this._weeks = a;
                this.onReset()
            }
        }, {
            key: 'daysOfWeek',
            get: function get$$1() {
                return this._daysOfWeek
            },
            set: function set$$1(a) {
                if (this._daysOfWeek === bj.None) return;
                if (this._daysOfWeek === a) return;
                this._daysOfWeek = a;
                this.onReset()
            }
        }, {
            key: 'months',
            get: function get$$1() {
                return this._months
            },
            set: function set$$1(a) {
                if (a <= 0) throw new Error('months must be greater than 0.');
                if (this._months === a) return;
                this._months = a;
                this.onReset()
            }
        }, {
            key: 'monthOfYear',
            get: function get$$1() {
                return this._monthOfYear
            },
            set: function set$$1(a) {
                if (a <= 0 || a > 12) throw new Error('monthOfYear must be between 1 and 12.');
                if (this._monthOfYear === a) return;
                this._monthOfYear = a;
                this.onReset()
            }
        }, {
            key: 'occurrence',
            get: function get$$1() {
                return this._occurrence
            },
            set: function set$$1(a) {
                if (this._occurrence === a) return;
                this._occurrence = a;
                this.onReset()
            }
        }, {
            key: 'day',
            get: function get$$1() {
                return this._day
            },
            set: function set$$1(a) {
                if (this._day === a) return;
                this._day = a;
                this.onReset()
            }
        }, {
            key: 'interval',
            get: function get$$1() {
                return this._interval
            },
            set: function set$$1(a) {
                if (this._interval === a) return;
                this._interval = a;
                this.onReset()
            }
        }, {
            key: 'startDate',
            get: function get$$1() {
                return this._startDate
            },
            set: function set$$1(a) {
                if (this._startDate.equals(a)) return;
                this._startDate = a.date;
                this.onReset()
            }
        }, {
            key: 'recurrenceEnd',
            get: function get$$1() {
                return this._end
            },
            set: function set$$1(a) {
                if (this._end === a) return;
                this._end = a;
                this.onReset()
            }
        }, {
            key: 'numOccurrences',
            get: function get$$1() {
                return this._numOccurrences
            },
            set: function set$$1(a) {
                if (a <= 0 || a > 999) throw new Error('numOccurrences must be between 1 and 999.');
                if (this._numOccurrences === a) return;
                this._numOccurrences = a;
                this.onReset()
            }
        }, {
            key: 'endDate',
            get: function get$$1() {
                return this._endDate
            },
            set: function set$$1(a) {
                if (this._endDate.equals(a)) return;
                this._endDate = a;
                this.onReset()
            }
        }, {
            key: 'master',
            get: function get$$1() {
                return this._master
            }
        }, {
            key: 'reset',
            get: function get$$1() {
                return this._resetEvent
            }
        }]);
        return bW
    }();
    var bX = function() {
        function bX() {
            var a = this;
            br(this, bX);
            this._startTime = bx.minValue();
            this._endTime = bx.maxValue();
            this._allowChangeStart = true;
            this._allowChangeEnd = true;
            this._allowMove = true;
            this._allDayEvent = false;
            this._subject = '';
            this._details = '';
            this._locked = false;
            this._cssClass = '';
            this._reminder = null;
            this._id = bA.generate('ITM');
            this._location = null;
            this._task = null;
            this._contacts = new bO();
            this._contacts.collectionChanged.addEventListener(function() {
                a.onCollectionChanged()
            });
            this._resources = new bO();
            this._resources.collectionChanged.addEventListener(function() {
                a.onCollectionChanged()
            });
            this._visible = true;
            this._recurrence = null;
            this._recurrenceState = ba.None;
            this._occurrenceIndex = -1;
            this._settingRecurrence = false;
            this._priority = 0;
            this._propertyChangedEvent = new bK();
            this._exceptionCreatedEvent = new bK();
            this._recurrenceResetEvent = new bK()
        }
        bs(bX, [{
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                this._propertyChangedEvent.raiseEvent(this, new bJ(a, b, c))
            }
        }, {
            key: 'onCollectionChanged',
            value: function onCollectionChanged() {
                this.onPropertyChanged();
                this.markException()
            }
        }, {
            key: 'onExceptionCreated',
            value: function onExceptionCreated(a) {
                this._exceptionCreatedEvent.raiseEvent(a, new bE())
            }
        }, {
            key: 'onRecurrenceReset',
            value: function onRecurrenceReset() {
                this._recurrenceResetEvent.raiseEvent(this, new bE())
            }
        }, {
            key: 'setOccurrence',
            value: function setOccurrence(a, b) {
                this._recurrence = a;
                this._recurrenceState = ba.Occurrence;
                this._occurrenceIndex = b
            }
        }, {
            key: 'setException',
            value: function setException() {
                if (this._recurrenceState === ba.Exception) return;
                this._recurrenceState = ba.Exception;
                this._recurrence.master.onExceptionCreated(this)
            }
        }, {
            key: 'copyOccurrence',
            value: function copyOccurrence(a) {
                this.id = a.id;
                this.subject = a.subject;
                this.details = a.details;
                this.task = a.task;
                this.location = a.location;
                this.locked = a.locked;
                this.visible = a.visible;
                this.allDayEvent = a.allDayEvent;
                this.allowChangeEnd = a.allowChangeEnd;
                this.allowChangeStart = a.allowChangeStart;
                this.allowMove = a.allowMove;
                this.priority = a.priority;
                this.cssClass = a.cssClass;
                for (var i = 0; i < a.contacts.count(); i += 1) {
                    this.contacts.add(a.contacts.items()[i])
                }
                for (var b = 0; b < a.resources.count(); b += 1) {
                    this.resources.add(a.resources.items()[b])
                }
            }
        }, {
            key: 'markException',
            value: function markException() {
                if (this._recurrence) this._recurrence.markException(this, false)
            }
        }, {
            key: 'onReminderChanged',
            value: function onReminderChanged() {
                this.markException()
            }
        }, {
            key: 'clone',
            value: function a() {
                var a = new bX();
                a.allDayEvent = this.allDayEvent;
                a.allowChangeEnd = this.allowChangeEnd;
                a.allowChangeStart = this.allowChangeStart;
                a.allowMove = this.allowMove;
                a.details = this.details;
                a.endTime = this.endTime;
                a.subject = this.subject;
                a.location = this.location;
                a.locked = this.locked;
                a.priority = this.priority;
                a.reminder = this.reminder;
                a.startTime = this.startTime;
                a.tag = this.tag;
                a.task = this.task;
                a.visible = this.visible;
                for (var i = 0; i < this.contacts.count(); i++) {
                    a.contacts.add(this.contacts.items()[i])
                }
                for (var b = 0; b < this.resources.count(); b++) {
                    a.resources.add(this.resources.items()[b])
                }
                return a
            }
        }, {
            key: 'setResource',
            value: function setResource(a) {
                if (a) {
                    if (a instanceof bR) {
                        this.location = a
                    } else if (a instanceof bQ) {
                        this.contacts.clear();
                        this.contacts.add(a)
                    } else if (a instanceof bT) {
                        this.task = a
                    } else if (a instanceof bP) {
                        this.resources.clear();
                        this.resources.add(a)
                    }
                }
            }
        }, {
            key: 'hasResource',
            value: function hasResource(a) {
                if (a) {
                    if (this.contacts.contains(a)) return true;
                    if (this.location === a) return true;
                    if (this.task === a) return true;
                    if (this.resources.contains(a)) return true
                }
                return false
            }
        }, {
            key: 'extend',
            value: function extend(a) {
                if (a) {
                    if (a.startTime) this.startTime = a.startTime;
                    if (a.endTime) this.endTime = a.endTime;
                    if (a.allDayEvent !== undefined) this.allDayEvent = a.allDayEvent;
                    if (a.subject !== undefined) this.subject = a.subject;
                    if (a.details !== undefined) this.details = a.details;
                    if (a.reminder !== undefined) this.reminder = a.reminder;
                    if (a.location !== undefined) this.location = a.location;
                    if (a.task !== undefined) this.task = a.task;
                    if (a.contacts !== undefined) {
                        this.contacts.clear();
                        var c = a.contacts._items ? a.contacts._items : a.contacts;
                        for (var i = 0; i < c.length; i++) {
                            this.contacts.add(c[i])
                        }
                    }
                    if (a.resources !== undefined) {
                        this.resources.clear();
                        var r = a._resources._items ? a._resources._items : a._resources;
                        for (var i = 0; i < r.length; i++) {
                            this.resources.add(r[i])
                        }
                    }
                }
            }
        }, {
            key: 'saveToXml',
            value: function saveToXml(a, b) {
                b.writeString(this.id, "id", a);
                b.writeDateTime(this.startTime, "startTime", a);
                b.writeDateTime(this.endTime, "endTime", a);
                b.writeBool(this.allowChangeStart, "allowChangeStart", a);
                b.writeBool(this.allowChangeEnd, "allowChangeEnd", a);
                b.writeBool(this.allowMove, "allowMove", a);
                b.writeBool(this.allDayEvent, "allDayEvent", a);
                b.writeBool(this.locked, "locked", a);
                b.writeString(this.subject, "subject", a);
                b.writeString(this.details, "details", a);
                b.writeString(this.location ? this.location.id : "", "location", a);
                b.writeString(this.task ? this.task.id : "", "task", a);
                b.writeString(this.cssClass, "cssClass", a);
                b.writeInt(this.priority, "priority", a);
                var c = b.addChildElement("attendees", a);
                for (var i = 0; i < this.contacts.count(); i++) {
                    b.writeString(this.contacts.items()[i].id, "item", c)
                }
                var d = b.addChildElement("resources", a);
                for (var i = 0; i < this.resources.count(); i++) {
                    b.writeString(this.resources.items()[i].id, "item", d)
                }
                b.writeReminder(this.reminder, "reminder", a);
                b.writeBool(this.visible, "visible", a);
                b.writeTag(this, this.tag, "tag", a);
                if (this.recurrenceState == ba.Master) {
                    var e = b.addChildElement("recurrence", a);
                    this.recurrence.saveToXml(e, b)
                }
            }
        }, {
            key: 'loadFromXml',
            value: function loadFromXml(a, b) {
                this._id = b.readString("id", a);
                this._startTime = b.readDateTime("startTime", a);
                this._endTime = b.readDateTime("endTime", a);
                this._allowChangeStart = b.readBool("allowChangeStart", a, true);
                this._allowChangeEnd = b.readBool("allowChangeEnd", a, true);
                this._allowMove = b.readBool("allowMove", a, true);
                this._allDayEvent = b.readBool("allDayEvent", a);
                this._locked = b.readBool("locked", a);
                this._subject = b.readString("subject", a);
                this._details = b.readString("details", a);
                this._location = b.schedule.getResourceById(b.readString("location", a));
                this._task = b.schedule.getResourceById(b.readString("task", a));
                this._cssClass = b.readString("cssClass", a).trim();
                this.contacts.clear();
                var c = a.getElementsByTagName("attendees")[0];
                var d = c.firstElementChild;
                while (d != null) {
                    var e = b.schedule.getResourceById(b.innerText(d));
                    this.contacts.add(e);
                    d = d.nextElementSibling
                }
                this.resources.clear();
                c = a.getElementsByTagName("resources")[0];
                d = c.firstElementChild;
                while (d != null) {
                    var f = b.schedule.getResourceById(b.innerText(d));
                    this.resources.add(f);
                    d = d.nextElementSibling
                }
                this._visible = b.readBool("visible", a);
                this._tag = b.readTag(this, "tag", a);
                this._priority = b.readInt("priority", a);
                this.reminder = b.readReminder("reminder", a);
                var g = b.selectSingleNode("recurrence", a);
                if (!g) return;
                if (b.isEmpty(g)) return;
                this.recurrence = new bW();
                this.recurrence.loadFromXml(g, b)
            }
        }, {
            key: 'toJson',
            value: function toJson() {
                var a = {};
                a.id = this.id;
                a.startTime = this.startTime._date.valueOf();
                a.endTime = this.endTime._date.valueOf();
                a.allowChangeStart = this.allowChangeStart;
                a.allowChangeEnd = this.allowChangeEnd;
                a.allowMove = this.allowMove;
                a.allDayEvent = this.allDayEvent;
                a.locked = this.locked;
                a.subject = this.subject;
                a.details = this.details;
                var b = [];
                for (var i = 0, l = this.contacts.count(); i < l; i++) {
                    b.push(this.contacts.items()[i].id)
                }
                a.contacts = b;
                var c = [];
                for (var i = 0, l = this.resources.count(); i < l; i++) {
                    c.push(this.resources.items()[i].id)
                }
                a.resources = c;
                a.location = this.location ? this.location.id : null;
                a.task = this.task ? this.task.id : null;
                a.cssClass = this.cssClass;
                a.visible = this.visible;
                a.tag = this.tag;
                a.priority = this.priority;
                a.reminder = this.reminder ? this.reminder.toJson() : null;
                if (this.recurrenceState == ba.Master) {
                    a.recurrence = this.recurrence.toJson()
                }
                return a
            }
        }, {
            key: 'fromJson',
            value: function fromJson(a, b) {
                this._id = a.id;
                this._startTime = new bx(new Date(a.startTime));
                this._endTime = new bx(new Date(a.endTime));
                this._allowChangeStart = a.allowChangeStart;
                this._allowChangeEnd = a.allowChangeEnd;
                this._allowMove = a.allowMove;
                this._allDayEvent = a.allDayEvent;
                this._locked = a.locked;
                this._subject = a.subject;
                this._details = a.details;
                if (a.location) this._location = b.getResourceById(a.location);
                if (a.task) this._task = b.getResourceById(a.task);
                this._cssClass = a.cssClass;
                this._contacts = new bO();
                if (a.contacts) {
                    for (var i = 0, l = a.contacts.length; i < l; i++) {
                        var c = b.getResourceById(a.contacts[i]);
                        this.contacts.add(c)
                    }
                }
                this._resources = new bO();
                if (a.resources) {
                    for (var i = 0, l = a.resources.length; i < l; i++) {
                        var d = b.getResourceById(a.resources[i]);
                        this.resources.add(d)
                    }
                }
                this._visible = a.visible;
                this._tag = a.tag;
                this._priority = a.priority;
                if (a.reminder) {
                    this.reminder = new bS();
                    this.reminder.fromJson(a.reminder)
                }
                if (a.recurrence) {
                    this.recurrence = new bW();
                    this.recurrence.fromJson(a.recurrence, b)
                }
            }
        }, {
            key: 'contacts',
            get: function get$$1() {
                return this._contacts
            }
        }, {
            key: 'resources',
            get: function get$$1() {
                return this._resources
            }
        }, {
            key: 'location',
            get: function get$$1() {
                return this._location
            },
            set: function set$$1(a) {
                if (this._location === a) return;
                var b = this._location;
                this._location = a;
                this.onPropertyChanged('location', b, a);
                this.markException()
            }
        }, {
            key: 'task',
            get: function get$$1() {
                return this._task
            },
            set: function set$$1(a) {
                if (this._task === a) return;
                var b = this._task;
                this._task = a;
                this.onPropertyChanged('task', b, a);
                this.markException()
            }
        }, {
            key: 'id',
            get: function get$$1() {
                return this._id
            },
            set: function set$$1(a) {
                if (this._id === a) return;
                var b = this._id;
                this._id = a;
                this.onPropertyChanged('id', b, a);
                this.markException()
            }
        }, {
            key: 'locked',
            get: function get$$1() {
                return this._locked
            },
            set: function set$$1(a) {
                if (this._locked === a) return;
                var b = this._locked;
                this._locked = a;
                this.onPropertyChanged('locked', b, a);
                this.markException()
            }
        }, {
            key: 'startTime',
            get: function get$$1() {
                return this._startTime
            },
            set: function set$$1(a) {
                var b = this._startTime;
                this._startTime = a;
                this.onPropertyChanged('startTime', b, a);
                this.markException()
            }
        }, {
            key: 'endTime',
            get: function get$$1() {
                return this._endTime
            },
            set: function set$$1(a) {
                var b = this._endTime;
                this._endTime = a;
                this.onPropertyChanged('endTime', b, a);
                this.markException()
            }
        }, {
            key: 'allowChangeStart',
            get: function get$$1() {
                return this._allowChangeStart
            },
            set: function set$$1(a) {
                if (this._allowChangeStart === a) return;
                this._allowChangeStart = a;
                this.markException()
            }
        }, {
            key: 'allowChangeEnd',
            get: function get$$1() {
                return this._allowChangeEnd
            },
            set: function set$$1(a) {
                if (this._allowChangeEnd === a) return;
                this._allowChangeEnd = a;
                this.markException()
            }
        }, {
            key: 'allowMove',
            get: function get$$1() {
                return this._allowMove
            },
            set: function set$$1(a) {
                if (this._allowMove === a) return;
                this._allowMove = a;
                this.markException()
            }
        }, {
            key: 'allDayEvent',
            get: function get$$1() {
                return this._allDayEvent
            },
            set: function set$$1(a) {
                if (this._allDayEvent === a) return;
                this._allDayEvent = a;
                this.markException()
            }
        }, {
            key: 'subject',
            get: function get$$1() {
                return this._subject
            },
            set: function set$$1(a) {
                if (this._subject === a) return;
                var b = this._subject;
                this._subject = a;
                this.onPropertyChanged('subject', b, a);
                this.markException()
            }
        }, {
            key: 'headerText',
            get: function get$$1() {
                return this._subject
            },
            set: function set$$1(a) {
                if (this._subject === a) return;
                var b = this._subject;
                this._subject = a;
                this.onPropertyChanged('subject', b, a);
                this.markException()
            }
        }, {
            key: 'details',
            get: function get$$1() {
                return this._details
            },
            set: function set$$1(a) {
                if (this._details === a) return;
                var b = this._details;
                this._details = a;
                this.onPropertyChanged('details', b, a);
                this.markException()
            }
        }, {
            key: 'descriptionText',
            get: function get$$1() {
                return this._details
            },
            set: function set$$1(a) {
                if (this._details === a) return;
                var b = this._details;
                this._details = a;
                this.onPropertyChanged('details', b, a);
                this.markException()
            }
        }, {
            key: 'reminder',
            get: function get$$1() {
                if (this._recurrenceState === ba.Occurrence) return this._recurrence.master.reminder;
                return this._reminder
            },
            set: function set$$1(a) {
                var b = this;
                var c = false;
                this._reminder = a;
                if (this._reminder !== this.reminder) c = true;
                if (this._reminder) this._reminder.changed.addEventListener(function() {
                    b.onReminderChanged()
                });
                if (this._recurrence) {
                    if (!c) this._recurrence.markException(this, false);
                    else this._recurrence.markException(this, false, this._reminder)
                }
            }
        }, {
            key: 'recurrence',
            get: function get$$1() {
                return this._recurrence
            },
            set: function set$$1(a) {
                var b = this;
                if (!a) this._recurrenceState = ba.None;
                if (this._recurrence === a) return;
                if (this._recurrenceState === ba.Occurrence || this._recurrenceState === ba.Exception) {
                    this._recurrence.master.recurrence = a;
                    return
                }
                if (this._settingRecurrence) return;
                this._settingRecurrence = true;
                if (this._recurrence) {
                    this._recurrence.associateWith(null);
                    this._recurrence.reset.removeEventListener(function() {
                        b.onRecurrenceReset()
                    })
                }
                this._recurrence = a;
                if (this._recurrence) {
                    this._recurrence.reset.addEventListener(function() {
                        b.onRecurrenceReset()
                    });
                    this._recurrence.associateWith(this)
                }
                if (this._recurrence) this._recurrenceState = ba.Master;
                else this._recurrenceState = ba.None;
                this.onRecurrenceReset();
                this._settingRecurrence = false
            }
        }, {
            key: 'recurrenceState',
            get: function get$$1() {
                return this._recurrenceState
            },
            set: function set$$1(a) {
                this._recurrenceState = a
            }
        }, {
            key: 'occurrenceIndex',
            get: function get$$1() {
                return this._occurrenceIndex
            },
            set: function set$$1(a) {
                this._occurrenceIndex = a
            }
        }, {
            key: 'priority',
            get: function get$$1() {
                return this._priority
            },
            set: function set$$1(a) {
                this._priority = a
            }
        }, {
            key: 'visible',
            get: function get$$1() {
                return this._visible
            },
            set: function set$$1(a) {
                if (this._visible === a) return;
                var b = this._visible;
                this._visible = a;
                this.onPropertyChanged('visible', b, a);
                this.markException()
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return this._cssClass
            },
            set: function set$$1(a) {
                this._cssClass = a
            }
        }, {
            key: 'tag',
            get: function get$$1() {
                return this._tag
            },
            set: function set$$1(a) {
                if (this._tag === a) return;
                var b = this._tag;
                this._tag = a;
                this.onPropertyChanged('tag', b, a);
                this.markException()
            }
        }, {
            key: 'propertyChanged',
            get: function get$$1() {
                return this._propertyChangedEvent
            }
        }, {
            key: 'recurrenceReset',
            get: function get$$1() {
                return this._recurrenceResetEvent
            }
        }, {
            key: 'exceptionCreated',
            get: function get$$1() {
                return this._exceptionCreatedEvent
            }
        }], [{
            key: 'tm',
            get: function get$$1() {
                return [32, 102, 111, 114, 32, 74, 97, 118, 97, 83, 99, 114, 105, 112, 116, 44, 32, 116, 114, 105, 97, 108, 32, 118, 101, 114, 115, 105, 111, 110]
            }
        }]);
        return bX
    }();
    var bY = function(c) {
        bu(bY, c);

        function bY(a) {
            br(this, bY);
            var b = bv(this, (bY.__proto__ || Object.getPrototypeOf(bY)).call(this));
            b._form = a;
            return b
        }
        bs(bY, [{
            key: 'form',
            get: function get$$1() {
                return this._form
            }
        }]);
        return bY
    }(bF);
    var bZ = function(c) {
        bu(bZ, c);

        function bZ(a) {
            br(this, bZ);
            var b = bv(this, (bZ.__proto__ || Object.getPrototypeOf(bZ)).call(this));
            b._button = a;
            return b
        }
        bs(bZ, [{
            key: 'button',
            get: function get$$1() {
                return this._button
            }
        }]);
        return bZ
    }(bF);
    var ca = function(c) {
        bu(ca, c);

        function ca(a) {
            br(this, ca);
            var b = bv(this, (ca.__proto__ || Object.getPrototypeOf(ca)).call(this));
            b._cell = a;
            return b
        }
        bs(ca, [{
            key: 'cell',
            get: function get$$1() {
                return this._cell
            }
        }]);
        return ca
    }(bD);
    var cb = function(c) {
        bu(cb, c);

        function cb(a) {
            br(this, cb);
            var b = bv(this, (cb.__proto__ || Object.getPrototypeOf(cb)).call(this));
            b._type = a;
            return b
        }
        bs(cb, [{
            key: 'type',
            get: function get$$1() {
                return this._type
            }
        }]);
        return cb
    }(bD);
    var cc = function(e) {
        bu(cc, e);

        function cc(a, b, c) {
            br(this, cc);
            var d = bv(this, (cc.__proto__ || Object.getPrototypeOf(cc)).call(this));
            d._startTime = a;
            d._endTime = b;
            d._resource = c;
            return d
        }
        bs(cc, [{
            key: 'startTime',
            get: function get$$1() {
                return this._startTime
            }
        }, {
            key: 'endTime',
            get: function get$$1() {
                return this._endTime
            }
        }, {
            key: 'resource',
            get: function get$$1() {
                return this._resource
            }
        }]);
        return cc
    }(bF);
    var cd = function(c) {
        bu(cd, c);

        function cd(a) {
            br(this, cd);
            var b = bv(this, (cd.__proto__ || Object.getPrototypeOf(cd)).call(this));
            b._item = a;
            return b
        }
        bs(cd, [{
            key: 'item',
            get: function get$$1() {
                return this._item
            }
        }]);
        return cd
    }(bF);
    var ce = function(e) {
        bu(ce, e);

        function ce(a, b, c) {
            br(this, ce);
            var d = bv(this, (ce.__proto__ || Object.getPrototypeOf(ce)).call(this));
            d._item = a;
            d._changes = b;
            d._action = c;
            return d
        }
        bs(ce, [{
            key: 'item',
            get: function get$$1() {
                return this._item
            }
        }, {
            key: 'changes',
            get: function get$$1() {
                return this._changes
            }
        }, {
            key: 'action',
            get: function get$$1() {
                return this._action
            }
        }]);
        return ce
    }(bF);
    var cf = function(e) {
        bu(cf, e);

        function cf(a, b, c) {
            br(this, cf);
            var d = bv(this, (cf.__proto__ || Object.getPrototypeOf(cf)).call(this));
            d._item = a;
            d._oldItem = b;
            d._action = c;
            return d
        }
        bs(cf, [{
            key: 'item',
            get: function get$$1() {
                return this._item
            }
        }, {
            key: 'oldItem',
            get: function get$$1() {
                return this._oldItem
            }
        }, {
            key: 'action',
            get: function get$$1() {
                return this._action
            }
        }]);
        return cf
    }(bD);
    var cg = function(c) {
        bu(cg, c);

        function cg(a) {
            br(this, cg);
            var b = bv(this, (cg.__proto__ || Object.getPrototypeOf(cg)).call(this));
            b._task = a;
            return b
        }
        bs(cg, [{
            key: 'task',
            get: function get$$1() {
                return this._task
            }
        }]);
        return cg
    }(bF);
    var ch = function(d) {
        bu(ch, d);

        function ch(a, b) {
            br(this, ch);
            var c = bv(this, (ch.__proto__ || Object.getPrototypeOf(ch)).call(this));
            c._newDate = a;
            c._prevDate = b;
            return c
        }
        bs(ch, [{
            key: 'newDate',
            get: function get$$1() {
                return this._newDate
            }
        }, {
            key: 'prevDate',
            get: function get$$1() {
                return this._prevDate
            }
        }]);
        return ch
    }(bD);
    var ci = function() {
        function ci(a, b) {
            var c = this;
            br(this, ci);
            if (a === null || a === {} || a.id === null || b === null) return null;
            this.id = a.id;
            this.element = a.element;
            this.initValue = a.initValue;
            this.formatInfo = a.formatInfo || {};
            if (a.events !== null) {
                for (var d in a.events) {
                    if (a.events.hasOwnProperty(d)) {
                        this.element.addEventListener(d, a.events[d])
                    }
                }
            }
            this.keyUp = new bK();
            this.element.addEventListener("keyup", function(e) {
                return c.onKeyUp(e)
            })
        }
        bs(ci, [{
            key: 'getValue',
            value: function getValue() {
                if (this.element.type === "checkbox") return this.element.checked;
                return this.element.value
            }
        }, {
            key: 'isChanged',
            value: function isChanged() {
                return this.initValue !== this.getValue()
            }
        }, {
            key: 'clearObject',
            value: function clearObject() {}
        }, {
            key: 'onKeyUp',
            value: function onKeyUp(e) {
                this.keyUp.raiseEvent(this, e)
            }
        }]);
        return ci
    }();
    var cj = function() {
        function cj(a) {
            br(this, cj);
            if (a === null || a.id === null || a.parent === null) return;
            this.id = a.id;
            if (a.type !== null) this.type = a.type;
            else this.type = "date";
            if (a.initValue !== null) {
                this.initValue = a.initValue;
                this.value = a.initValue
            } else this.value = "";
            if (this.type !== "numeric") {
                this.isOpen = false
            }
            if (a.theme !== null && typeof a.theme !== "undefined") {
                this.theme = a.theme
            }
            this.oldValue = null;
            if (a.width !== null) this.width = a.width;
            this.cssClass = "mfp-edit-box";
            this.parentElement = a.parent;
            if (a.visible === false) this.visible = a.visible;
            this.formatInfo = a.formatInfo;
            this.localInfo = a.localInfo;
            this.timeFormat = this.formatInfo.dateFormats.longTime;
            this.dateFormat = this.formatInfo.dateFormats.shortDate;
            this._textBox = null;
            if (this.type === "numeric") {
                this._buttonUp = null;
                this._buttonDown = null;
                this.minValue = a.minValue || 0;
                this.maxValue = a.maxValue || 999;
                this.increment = a.increment || 1;
                this.maxLength = a.maxLength || 3;
                this.cssClass += " mfp-numeric-box";
                if (a.width === undefined) this.width = "40px"
            } else {
                var b = new bx(new Date(1970, 11, 30, 12, 12, 12));
                this._buttonDropDown = null;
                this._dropDownList = null;
                if (this.type === "date") {
                    this.cssClass += " mfp-date-box";
                    this.maxLength = b.toString(this.dateFormat, this.formatInfo).length;
                    if (a.width === undefined) this.width = "100px"
                } else {
                    this.maxLength = b.toString(this.timeFormat, this.formatInfo).length + 2;
                    this.cssClass += " mfp-time-box";
                    if (a.width === undefined) this.width = "80px"
                }
            }
            this.element = this.drawControl()
        }
        bs(cj, [{
            key: 'drawControl',
            value: function drawControl() {
                var a = this;
                var c = document.createElement("div");
                c.id = this.id;
                c.className = this.cssClass;
                if (this.visible === false) c.style.display = "none";
                var d = document.createElement("input");
                d.type = "text";
                d.className = "mfp-text-box";
                d.value = this._getValueAsText();
                d.style.width = this.width;
                d.maxLength = this.maxLength;
                d.addEventListener("mousedown", function(e) {
                    return a._onTextBoxMouseDown(e)
                });
                d.addEventListener("focus", function(e) {
                    return a._onTextBoxFocus(e)
                });
                d.addEventListener("blur", function(e) {
                    return a._onTextBoxBlur(e)
                });
                d.addEventListener("change", function(e) {
                    return a._onTextBoxChanged(e)
                });
                d.addEventListener("keyup", function(e) {
                    return a._onKeyUp(e)
                });
                var b;
                if (this.type !== "numeric") {
                    c.appendChild(d);
                    this._textBox = d;
                    var f = document.createElement("a");
                    f.className = "mfp-dropdown-button";
                    b = document.createElement("i");
                    f.appendChild(b);
                    f.addEventListener("mousedown", function(e) {
                        return a._onButtonMouseDown(e)
                    });
                    f.addEventListener("mouseup", function(e) {
                        return a._onButtonMouseUp(e)
                    });
                    c.appendChild(f);
                    this._buttonDropDown = f
                } else {
                    var g = document.createElement("table");
                    g.cellPadding = 0;
                    g.cellSpacing = 0;
                    var h = document.createElement("tr");
                    g.appendChild(h);
                    var i = document.createElement("td");
                    i.rowSpan = 2;
                    h.appendChild(i);
                    var j = document.createElement("td");
                    h.appendChild(j);
                    var k = document.createElement("tr");
                    g.appendChild(k);
                    var l = document.createElement("td");
                    k.appendChild(l);
                    i.appendChild(d);
                    this._textBox = d;
                    var m = document.createElement("a");
                    b = document.createElement("i");
                    m.appendChild(b);
                    m.className = "mfp-buttonup";
                    m.addEventListener("mousedown", function(e) {
                        return a._onButtonUpMouseDown(e)
                    });
                    j.appendChild(m);
                    this._buttonUp = m;
                    var n = document.createElement("a");
                    b = document.createElement("i");
                    n.appendChild(b);
                    n.className = "mfp-buttondown";
                    n.addEventListener("mousedown", function(e) {
                        return a._onButtonDownMouseDown(e)
                    });
                    l.appendChild(n);
                    this._buttonDown = n;
                    c.appendChild(g)
                }
                return c
            }
        }, {
            key: '_onKeyUp',
            value: function _onKeyUp(e) {
                if (e.keyCode === 13) {
                    e.stopPropagation();
                    e.target.blur();
                    return false
                }
            }
        }, {
            key: '_onKeyDown',
            value: function _onKeyDown(e) {
                if (e.keyCode === 13) {
                    e.preventDefault();
                    return false
                }
            }
        }, {
            key: 'showDateView',
            value: function showDateView() {
                this.dropDown = this.createDateView();
                var a = {
                    x: this._textBox.offsetLeft,
                    y: this._textBox.offsetTop
                };
                var b = this.dropDown.style;
                b.left = a.x + "px";
                b.top = a.y + this._textBox.offsetHeight + "px";
                this.parentElement.appendChild(this.dropDown);
                this.isOpen = true
            }
        }, {
            key: 'showTimeView',
            value: function showTimeView() {
                this.dropDown = this.createTimesView();
                var a = {
                    x: this._textBox.offsetLeft,
                    y: this._textBox.offsetTop
                };
                var b = this.dropDown.style;
                b.left = a.x + "px";
                b.top = a.y + this._textBox.offsetHeight + "px";
                this.parentElement.appendChild(this.dropDown);
                this.isOpen = true
            }
        }, {
            key: '_getValueAsText',
            value: function _getValueAsText() {
                var a = this.type;
                if (a === "numeric") return this.value.toString();
                if (a === "date") {
                    return this.value.toString(this.dateFormat, this.formatInfo)
                }
                if (a === "time") return this.value.toString(this.timeFormat, this.formatInfo);
                return ""
            }
        }, {
            key: 'getValue',
            value: function getValue() {
                var a = this.type;
                if (a === "numeric") return this._textBox.value;
                if (a === "date") return this.value;
                if (a === "time") return this.value;
                return null
            }
        }, {
            key: '_updateValue',
            value: function _updateValue(a) {
                switch (this.type) {
                    case "date":
                    case "time":
                    default:
                        var b = this.type === "date" ? this.dateFormat : this.timeFormat;
                        this.oldValue = this.value.toString(b);
                        this.value = new bx(new Date(a));
                        this._textBox.value = this._getValueAsText();
                        break;
                    case "numeric":
                        if (a >= this.minValue && a <= this.maxValue) {
                            this.oldValue = this.value;
                            this.value = a;
                            this._textBox.value = this._getValueAsText()
                        }
                        break
                }
            }
        }, {
            key: 'validateNumericInput',
            value: function validateNumericInput(a) {
                if (this.type !== "numeric") {
                    return true
                }
                var b = /^\d{1,3}$/;
                return b.test(a)
            }
        }, {
            key: 'clearObject',
            value: function clearObject() {
                this._closeDropDown()
            }
        }, {
            key: '_closeDropDown',
            value: function _closeDropDown() {
                if (this.dropDown !== null) {
                    this.parentElement.removeChild(this.dropDown);
                    this.dropDown = null;
                    this.isOpen = false
                }
            }
        }, {
            key: 'isInt',
            value: function isInt(x) {
                var y = parseInt(x, 10);
                if (isNaN(y)) return false;
                return x === y && x.toString() === y.toString()
            }
        }, {
            key: '_onButtonUpMouseDown',
            value: function _onButtonUpMouseDown(e) {
                var a = parseInt(this._textBox.value, 10);
                if (a + this.increment <= this.maxValue) {
                    this._textBox.value = a + this.increment;
                    e.stopPropagation();
                    return true
                }
            }
        }, {
            key: '_onButtonDownMouseDown',
            value: function _onButtonDownMouseDown(e) {
                var a = parseInt(this._textBox.value);
                if (a - this.increment >= this.minValue) {
                    this._textBox.value = a - this.increment;
                    e.stopPropagation();
                    return true
                }
            }
        }, {
            key: 'onBlur',
            value: function onBlur(e) {
                if (e.target.getAttribute('class') === 'mfp-dropdown-button') {
                    return
                } else if (this.isOpen === true) {
                    var a = bz.getParent(e.target, "mfp-dtpicker");
                    if (a !== undefined) {
                        return true
                    }
                    this._closeDropDown()
                }
            }
        }, {
            key: '_onTextBoxMouseDown',
            value: function _onTextBoxMouseDown(e) {
                e.stopPropagation()
            }
        }, {
            key: '_onTextBoxFocus',
            value: function _onTextBoxFocus(e) {
                this.oldValue = e.target.value
            }
        }, {
            key: '_onTextBoxBlur',
            value: function _onTextBoxBlur(e) {
                if (this.type === "date" && bx.getDateToFormat(e.target.value, this.dateFormat, this.formatInfo) === 0 || this.type === "time" && bx.getDateToFormat(e.target.value, this.timeFormat, this.formatInfo) === 0 || this.type === "numeric" && !this.validateNumericInput(e.target.value) || +e.target.value < this.minValue || +e.target.value > this.maxValue) {
                    this._textBox.value = this.oldValue
                }
            }
        }, {
            key: '_onTextBoxChanged',
            value: function _onTextBoxChanged(e) {
                var a = e.target.value;
                var b = 0;
                switch (this.type) {
                    case "date":
                        b = bx.getDateToFormat(a, this.dateFormat, this.formatInfo);
                        if (b > 0) {
                            b = new Date(b).setHours(0, 0, 0, 0).valueOf();
                            this._updateValue(b)
                        }
                        break;
                    case "time":
                        b = bx.getDateToFormat(a, this.timeFormat, this.formatInfo);
                        if (b > 0) {
                            this._updateValue(b)
                        }
                        break;
                    case "numeric":
                        b = +a;
                        if (b) {
                            this._updateValue(b)
                        }
                        break
                }
            }
        }, {
            key: '_onButtonMouseDown',
            value: function _onButtonMouseDown(e) {
                this.buttonClicked = true
            }
        }, {
            key: '_onButtonMouseUp',
            value: function _onButtonMouseUp(e) {
                if (this.type === "date") {
                    if (this.dropDown == null) this.showDateView();
                    else this._closeDropDown()
                } else {
                    if (this.dropDown == null) this.showTimeView();
                    else this._closeDropDown()
                }
                this.buttonClicked = false;
                this._textBox.focus()
            }
        }, {
            key: 'createTimesView',
            value: function createTimesView() {
                var b = this;
                this.parentElement.addEventListener("mousedown", function(e) {
                    return b.onBlur(e)
                });
                var c = document.createElement("div");
                c.className = "mfp-dtpicker";
                var d = document.createElement("table");
                d.cellSpacing = 0;
                d.cellPadding = 0;
                d.className = "mfp-dtpicker-content";
                var f = null;
                var g = this.value.toString(this.timeFormat, this.formatInfo);
                var h = new bx(new Date(0, 0, 0, 0, 0, 0, 0));
                var j = "",
                    textVal = "";
                var a = null,
                    cellClass = null;
                for (var i = 0; i < 8; i++) {
                    f = document.createElement("tr");
                    for (var k = 0; k < 3; k++) {
                        cellClass = '';
                        j = h.toString(this.formatInfo.dateFormats.shortTime, this.formatInfo).toLowerCase();
                        textVal = h.toString(this.timeFormat, this.formatInfo);
                        if (textVal === g) cellClass = "mfp-dtp-selected";
                        var l = document.createElement("td");
                        l.className = cellClass;
                        l.title = textVal;
                        l.innerHTML = j;
                        l.addEventListener("click", function(e) {
                            return b.onTimeCellClick(e)
                        });
                        f.appendChild(l);
                        h.addHours(1)
                    }
                    d.appendChild(f)
                }
                c.appendChild(d);
                return c
            }
        }, {
            key: 'onTimeCellClick',
            value: function onTimeCellClick(e) {
                this._updateValue(bx.getDateToFormat(e.target.getAttribute("title"), this.timeFormat, this.formatInfo));
                this._closeDropDown()
            }
        }, {
            key: 'createDateView',
            value: function createDateView() {
                var a = this;
                this.parentElement.addEventListener("mousedown", function(e) {
                    return a.onBlur(e)
                });
                this.currentView = {};
                this.currentView.view = null;
                this.currentView.type = 0;
                this.currentView.header = null;
                this.currentView.titleCell = null;
                this.currentView.content = null;
                this.currentView.DaysTable = null;
                this.currentView.MonthsTable = null;
                this.currentView.YearsTable = null;
                var b = new Date(this.value._date.getTime());
                b.setHours(12, 0, 0, 0);
                this.currentView.currentDate = new Date(b.getTime());
                this.currentView.selectedCell = null;
                var d = document.createElement("div");
                d.className = "mfp-dtpicker";
                this.currentView.view = d;
                var h = document.createElement("div");
                h.className = "mfp-dtpicker-header";
                this.currentView.view.appendChild(h);
                this.currentView.header = h;
                this.createCalendarHeader();
                var c = document.createElement("div");
                this.currentView.view.appendChild(c);
                this.currentView.content = c;
                this.createCalendarContent();
                var f = document.createElement("div");
                f.className = "mfp-dtpicker-footer";
                this.currentView.view.appendChild(f);
                this.currentView.footer = f;
                this.createTodayButton();
                return this.currentView.view
            }
        }, {
            key: 'createCalendarHeader',
            value: function createCalendarHeader() {
                var a = this;
                this.currentView.header.innerHTML = "";
                var h = this.currentView.header;
                var b = document.createElement("div");
                bz.addCssClass(b, "button");
                b.innerHTML = '&#x00ab;';
                if (this.currentView.type === 0) {
                    h.appendChild(b);
                    b.addEventListener("click", function(e) {
                        return a.onCalendarPreviousYearClick(e)
                    })
                }
                b = document.createElement("div");
                bz.addCssClass(b, "button");
                b.innerHTML = '&#x2039;';
                h.appendChild(b);
                b.addEventListener("click", function(e) {
                    return a.onCalendarPreviousMonthClick(e)
                });
                b = document.createElement("div");
                bz.addCssClass(b, "button");
                bz.addCssClass(b, "title");
                this.currentView.titleCell = b;
                this.setCalendarHeaderText();
                h.appendChild(b);
                b.addEventListener("click", function(e) {
                    return a.onCalendarTitleClick(e)
                });
                b = document.createElement("div");
                bz.addCssClass(b, "button");
                b.innerHTML = '&#x203a;';
                h.appendChild(b);
                b.addEventListener("click", function(e) {
                    return a.onCalendarNextMonthClick(e)
                });
                b = document.createElement("div");
                bz.addCssClass(b, "button");
                b.innerHTML = '&#x00bb;';
                if (this.currentView.type === 0) {
                    h.appendChild(b);
                    b.addEventListener("click", function(e) {
                        return a.onCalendarNextYearClick(e)
                    })
                }
            }
        }, {
            key: 'setCalendarHeaderText',
            value: function setCalendarHeaderText() {
                if (this.currentView.titleCell) {
                    var a = new Date(this.currentView.currentDate.getTime());
                    switch (this.currentView.type) {
                        case 1:
                            this.currentView.titleCell.innerHTML = a.getFullYear();
                            break;
                        case 2:
                            this.currentView.titleCell.innerHTML = a.getFullYear() + ' - ' + (a.getFullYear() + 9);
                            break;
                        default:
                            this.currentView.titleCell.innerHTML = bx.formatDate(a, this.formatInfo.dateFormats.yearMonth, this.formatInfo);
                            break
                    }
                }
            }
        }, {
            key: 'createCalendarContent',
            value: function createCalendarContent() {
                var a = this;
                if (this.currentView.DaysTable) {
                    bz.removeNode(this.currentView.DaysTable, this.currentView.content);
                    this.currentView.DaysTable = null
                }
                if (this.currentView.MonthsTable) {
                    bz.removeNode(this.currentView.MonthsTable, this.currentView.content);
                    this.currentView.MonthsTable = null
                }
                if (this.currentView.YearsTable) {
                    bz.removeNode(this.currentView.YearsTable, this.currentView.content);
                    this.currentView.YearsTable = null
                }
                var b = new Date();
                b.setHours(12, 0, 0, 0);
                var c = new Date(this.currentView.currentDate.getTime());
                var d = document.createElement("table");
                d.cellSpacing = 0;
                d.cellPadding = 0;
                d.className = "mfp-dtpicker-content";
                this.currentView.content.appendChild(d);
                this.currentView.YearsTable = d;
                var f = document.createElement("tbody");
                d.appendChild(f);
                var g = c.getFullYear() - 1;
                for (var h = 0; h < 3; h++) {
                    var j = document.createElement("tr");
                    for (var k = 0; k < 4; k++) {
                        var m = document.createElement("td");
                        m.className = "mfp-yearmonth";
                        if (h === 0 && k === 0 || h === 2 && k === 3) m.className = 'mfp-dtp-padding';
                        if (c.getFullYear() === g) {
                            bz.addCssClass(m, 'mfp-dtp-selected')
                        }
                        j.appendChild(m);
                        if (g >= 1970) {
                            m.innerHTML = g;
                            m.setAttribute('_dateValue', g);
                            m.addEventListener("click", function(e) {
                                return a.onCalendarCellClick(e)
                            })
                        } else {
                            m.innerHTML = ' ';
                            m.setAttribute('_dateValue', -1)
                        }
                        g += 1
                    }
                    f.appendChild(j)
                }
                d.style.display = 'none';
                var d = document.createElement("table");
                d.cellPadding = 0;
                d.cellSpacing = 0;
                d.className = "mfp-dtpicker-content";
                this.currentView.content.appendChild(d);
                this.currentView.MonthsTable = d;
                f = document.createElement("tbody");
                d.appendChild(f);
                var n = 0;
                for (var h = 0; h < 3; h++) {
                    j = document.createElement("tr");
                    for (var k = 0; k < 4; k++) {
                        m = document.createElement("td");
                        m.className = "mfp-yearmonth";
                        if (c.getMonth() === n) {
                            bz.addCssClass(m, 'mfp-dtp-selected')
                        }
                        m.innerHTML = this.formatInfo.months.short[n];
                        m.setAttribute('_dateValue', n);
                        j.appendChild(m);
                        m.addEventListener("click", function(e) {
                            return a.onCalendarCellClick(e)
                        });
                        m.addEventListener("dbclick", function(e) {
                            return a.onCalendarCellClick(e)
                        });
                        n += 1
                    }
                    f.appendChild(j)
                }
                d.style.display = 'none';
                d = document.createElement("table");
                d.cellPadding = 0;
                d.cellSpacing = 0;
                d.className = "mfp-dtpicker-content";
                this.currentView.content.appendChild(d);
                this.currentView.DaysTable = d;
                j = document.createElement("tr");
                this.currentView.selectedDate = this.value._date;
                var o = this.currentView.selectedDate;
                var c = this.currentView.selectedDate;
                var p = 24 * 60 * 60 * 1000;
                var q = new Date(c.getTime());
                q.setDate(1);
                q.setHours(12, 0, 0, 0);
                while (q.getDay() !== +this.formatInfo.firstDayOfWeek) {
                    q.setTime(q.getTime() - p)
                }
                var r = new Date(q.getTime());
                r.setHours(12, 0, 0, 0);
                for (var i = +this.formatInfo.firstDayOfWeek, l = i + 7; i < l; i++) {
                    var s = document.createElement("th");
                    s.innerHTML = this.formatInfo.days.short[i % 7];
                    j.appendChild(s);
                    d.appendChild(j)
                }
                for (var h = 0; h < 6; h++) {
                    var j = document.createElement("tr");
                    for (var k = 0; k < 7; k++) {
                        var t = '';
                        if (r.getMonth() === c.getMonth()) {
                            if (r.getFullYear() === b.getFullYear() && r.getMonth() === b.getMonth() && r.getDate() === b.getDate()) t = 'mfp-dtp-today';
                            else t = '';
                            if (r.getFullYear() === o.getFullYear() && r.getMonth() === o.getMonth() && r.getDate() === o.getDate()) {
                                t = 'mfp-dtp-selected'
                            }
                        } else t = 'mfp-dtp-padding';
                        if (r.valueOf() >= 0) {
                            var m = document.createElement("td");
                            m.className = t;
                            m.innerHTML = r.getDate();
                            m.setAttribute('_dateValue', r.valueOf());
                            m.addEventListener("click", function(e) {
                                return a.onCalendarCellClick(e)
                            });
                            j.appendChild(m)
                        } else {
                            var u = document.createElement("td");
                            u.className = t;
                            j.appendChild(u)
                        }
                        r.setTime(r.getTime() + p)
                    }
                    d.appendChild(j)
                }
            }
        }, {
            key: 'createTodayButton',
            value: function createTodayButton() {
                var a = this;
                var d = document.createElement("div");
                d.className = "mfp-button";
                var b = new Date();
                b.setHours(12, 0, 0, 0);
                d.innerHTML = String.format('{0}: ', this.localInfo.todayCaption) + bx.formatDate(b, this.formatInfo.dateFormats.longDate, this.formatInfo);
                this.currentView.footer.appendChild(d);
                d.addEventListener("click", function(e) {
                    return a.onCalendarTodayButtonClick(e)
                })
            }
        }, {
            key: 'changeCalendarView',
            value: function changeCalendarView() {
                if (this.currentView.content) {
                    this.createCalendarHeader();
                    switch (this.currentView.type) {
                        case 1:
                            this.currentView.DaysTable.style.display = 'none';
                            this.currentView.MonthsTable.style.display = 'table';
                            this.currentView.YearsTable.style.display = 'none';
                            break;
                        case 2:
                            this.currentView.DaysTable.style.display = 'none';
                            this.currentView.MonthsTable.style.display = 'none';
                            this.currentView.YearsTable.style.display = 'table';
                            break;
                        default:
                            this.currentView.DaysTable.style.display = '';
                            this.currentView.MonthsTable.style.display = 'none';
                            this.currentView.YearsTable.style.display = 'none';
                            break
                    }
                }
            }
        }, {
            key: 'onCalendarMouseDown',
            value: function onCalendarMouseDown(e) {
                this.calendarClicked = true
            }
        }, {
            key: 'onCalendarTodayButtonClick',
            value: function onCalendarTodayButtonClick(e) {
                this.currentView.currentDate = new Date();
                this.currentView.currentDate.setHours(12, 0, 0, 0);
                this._updateValue(this.currentView.currentDate);
                this.currentView.type = 0;
                this.setCalendarHeaderText();
                this.createCalendarContent();
                this.changeCalendarView()
            }
        }, {
            key: 'onCalendarPreviousYearClick',
            value: function onCalendarPreviousYearClick(e) {
                if (this.currentView.currentDate.getFullYear() - 1 < 1970) {
                    e.stopPropagation();
                    return false
                }
                this.currentView.currentDate.setFullYear(this.currentView.currentDate.getFullYear() - 1);
                this.value._date = this.currentView.currentDate;
                this.setCalendarHeaderText();
                this.createCalendarContent();
                this.changeCalendarView()
            }
        }, {
            key: 'onCalendarPreviousMonthClick',
            value: function onCalendarPreviousMonthClick(e) {
                switch (this.currentView.type) {
                    case 1:
                        if (this.currentView.currentDate.getFullYear() - 1 < 1970) {
                            e.stopPropagation();
                            return false
                        }
                        this.currentView.currentDate.setFullYear(this.currentView.currentDate.getFullYear() - 1);
                        break;
                    case 2:
                        if (this.currentView.currentDate.getFullYear() - 10 < 1970) {
                            e.stopPropagation();
                            return false
                        }
                        this.currentView.currentDate.setFullYear(this.currentView.currentDate.getFullYear() - 10);
                        break;
                    default:
                        var a = new Date(this.currentView.currentDate.getTime());
                        a.setMonth(a.getMonth() - 1);
                        if (a.getFullYear() < 1970) {
                            e.stopPropagation();
                            return false
                        }
                        this.currentView.currentDate.setMonth(this.currentView.currentDate.getMonth() - 1);
                        break
                }
                this.value._date = this.currentView.currentDate;
                this.setCalendarHeaderText();
                this.createCalendarContent();
                this.changeCalendarView()
            }
        }, {
            key: 'onCalendarNextMonthClick',
            value: function onCalendarNextMonthClick(e) {
                switch (this.currentView.type) {
                    case 1:
                        this.currentView.currentDate.setFullYear(this.currentView.currentDate.getFullYear() + 1);
                        break;
                    case 2:
                        this.currentView.currentDate.setFullYear(this.currentView.currentDate.getFullYear() + 10);
                        break;
                    default:
                        this.currentView.currentDate.setMonth(this.currentView.currentDate.getMonth() + 1);
                        break
                }
                this.value._date = this.currentView.currentDate;
                this.setCalendarHeaderText();
                this.createCalendarContent();
                this.changeCalendarView()
            }
        }, {
            key: 'onCalendarNextYearClick',
            value: function onCalendarNextYearClick(e) {
                this.currentView.currentDate.setFullYear(this.currentView.currentDate.getFullYear() + 1);
                this.value._date = this.currentView.currentDate;
                this.setCalendarHeaderText();
                this.createCalendarContent();
                this.changeCalendarView()
            }
        }, {
            key: 'onCalendarTitleClick',
            value: function onCalendarTitleClick(e) {
                e.stopPropagation();
                if (this.currentView.type === 0) {
                    this.currentView.type = 1;
                    this.createCalendarContent();
                    this.changeCalendarView()
                } else {
                    if (this.currentView.type === 1) {
                        this.currentView.type = 2;
                        this.createCalendarContent();
                        this.changeCalendarView()
                    }
                }
            }
        }, {
            key: 'onCalendarCellClick',
            value: function onCalendarCellClick(e) {
                e.stopPropagation();
                if (this.currentView.type === 0) {
                    if (this.currentView.selectedCell !== null) {
                        bz.removeCssClass(this.currentView.selectedCell, 'mfp-dtp-selected');
                        this.currentView.selectedCell = e.target;
                        bz.addCssClass(this.currentView.selectedCell, 'mfp-dtp-selected')
                    }
                    var a = +e.target.getAttribute('_dateValue');
                    this._updateValue(a);
                    this._closeDropDown()
                }
                if (this.currentView.type === 1) {
                    this.currentView.type = 0;
                    this.currentView.currentDate.setMonth(e.target.getAttribute('_dateValue'));
                    this._updateValue(this.currentView.currentDate);
                    this.createCalendarContent();
                    this.changeCalendarView()
                } else {
                    if (this.currentView.type === 2) {
                        this.currentView.type = 1;
                        if (e.target.getAttribute('_dateValue')) this.currentView.currentDate.setFullYear(e.target.getAttribute('_dateValue'));
                        this._updateValue(this.currentView.currentDate);
                        this.createCalendarContent();
                        this.changeCalendarView()
                    }
                }
            }
        }]);
        return cj
    }();
    var ck = function() {
        function ck(a) {
            br(this, ck);
            if (a == null || a.id == null) return;
            else this.id = a.id;
            this.items = [];
            this.selectedValues = [];
            this.width = null;
            this.height = null;
            this.cssClass = "mfp-checkbox-list";
            this.groupName = this.id + "_GroupName1";
            this.element = null;
            if (a.width != null) this.width = a.width;
            if (a.height != null) this.height = a.height;
            if (a.cssClass != null) this.cssClass += " " + a.cssClass;
            if (a.groupName != null) this.groupName = a.groupName;
            if (a.items != null) this.items = a.items;
            if (a.selectedValues != null) this.selectedValues = a.selectedValues;
            this.drawControl()
        }
        bs(ck, [{
            key: 'isChecked',
            value: function isChecked(a) {
                var b = this.selectedValues;
                if (b !== null && b.length > 0) {
                    for (var i = 0, l = b.length; i < l; i++) {
                        if (a === b[i]) return true
                    }
                }
                return false
            }
        }, {
            key: 'drawControl',
            value: function drawControl() {
                var a = document.createElement("div");
                a.id = this.id;
                a.className = this.cssClass;
                var b = document.createElement("div");
                this.drawItems(b);
                a.appendChild(b);
                if (this.width !== undefined) a.style.width = this.width + "px";
                if (this.height !== undefined) a.style.height = this.height + "px";
                this.element = a
            }
        }, {
            key: 'drawItems',
            value: function drawItems(a) {
                var b = this.items;
                if (b === null || b.length === 0) return;
                var c = null,
                    itemId = "";
                var d = null,
                    e = null;
                for (var i = 0, l = b.length; i < l; i++) {
                    c = b[i];
                    itemId = this.id + "_item" + i;
                    var e = document.createElement("div");
                    e.className = "mfp-checkbox-item";
                    var f = '<input id="{0}" value="{1}" name="{2}" type="checkbox" class="mfp-check-box" />';
                    e.innerHTML = String.format(f, itemId, c.value, this.groupName);
                    var d = e.childNodes[0];
                    var g = document.createElement("label");
                    g.for = this.groupName;
                    g.innerHTML = c.text;
                    e.appendChild(g);
                    d.checked = this.isChecked(d.value);
                    c.checked = d.checked;
                    a.appendChild(e)
                }
            }
        }, {
            key: 'getSelected',
            value: function getSelected() {
                var a = [];
                var c = this.element.querySelectorAll("input.mfp-check-box");
                if (c.length > 0) {
                    var a = [];
                    for (var i = 0, l = c.length; i < l; i++) {
                        if (c[i].checked) a.push(c[i].value)
                    }
                }
                return a
            }
        }]);
        return ck
    }();
    var cl = function() {
        function cl(a, b) {
            var c = this;
            br(this, cl);
            this.calendar = a;
            this.item = b;
            this._id = "Base";
            this._headerText = "BasePopup";
            this.dragging = false;
            this.dragOffset = null;
            this.parentBounds = null;
            this.dimensions = null;
            this._controls = new bV();
            this.elementId = bz.genId("popup");
            this.mouseMoveHandler = function(e) {
                return c.onMouseMove(e)
            };
            this.mouseUpHandler = function(e) {
                return c.onMouseUp(e)
            }
        }
        bs(cl, [{
            key: 'willFitParentBounds',
            value: function willFitParentBounds(a, b) {
                var c = bz.getBounds(b);
                var p = bz.getBounds(a);
                return p.width >= c.width && p.height >= c.height
            }
        }, {
            key: 'checkBounds',
            value: function checkBounds(a, b, c) {
                var d = b.x;
                var e = b.y;
                var f = 0;
                var g = 0;
                if (c === true) {
                    f = a.x;
                    g = a.y
                }
                if (d < f) d = f;
                if (d + b.width >= f + a.width) d = f + a.width - b.width;
                if (e < g) e = g;
                if (e + b.height >= g + a.height) e = g + a.height - b.height;
                return {
                    x: d < 0 ? 0 : d,
                    y: e < 0 ? 0 : e
                }
            }
        }, {
            key: 'row',
            value: function row() {
                var r = document.createElement("div");
                r.className = "mfp-popup-row";
                return r
            }
        }, {
            key: 'col',
            value: function col() {
                var r = document.createElement("div");
                r.className = "mfp-popup-column";
                return r
            }
        }, {
            key: 'divider',
            value: function divider() {
                var l = document.createElement("div");
                l.className = "mfp-hr-line";
                return l
            }
        }, {
            key: '_getContacts',
            value: function _getContacts() {
                var a = [];
                this.calendar.schedule.contacts.forEach(function(l, i) {
                    a.push({
                        value: i,
                        text: l.toString()
                    })
                }, this);
                return a
            }
        }, {
            key: '_getLocations',
            value: function _getLocations() {
                var a = [];
                this.calendar.schedule.locations.forEach(function(l, i) {
                    a.push({
                        value: i,
                        text: l.toString()
                    })
                }, this);
                return a
            }
        }, {
            key: 'getChanges',
            value: function getChanges() {
                return null
            }
        }, {
            key: 'getControls',
            value: function getControls() {
                return this._controls
            }
        }, {
            key: 'addControl',
            value: function addControl(a) {
                if (a == null || a.id == null) return;
                this._controls[a.id] = a
            }
        }, {
            key: 'removeControl',
            value: function removeControl(a) {
                if (a == null || a.id == null) return;
                this._controls[a.id] = null
            }
        }, {
            key: 'clearControls',
            value: function clearControls() {
                var a = this._controls;
                if (a.count > 0) {
                    var b = null;
                    for (var c in a) {
                        if (a[c]) {
                            b = a[c];
                            if (b.clearObject != null) b.clearObject();
                            this.removeControl(b)
                        }
                    }
                }
            }
        }, {
            key: 'getControlValue',
            value: function getControlValue(a) {
                var b = this._controls[a];
                if (b == null) return "";
                return b.getValue()
            }
        }, {
            key: 'showForm',
            value: function showForm() {
                var a = this.calendar.getElement().children[0];
                if (a == null) return;
                this.parentElement = a;
                this.closeForm(this.id);
                var c = this.drawPopup();
                var r = this.calendar.onFormShow(new bY(this));
                if (!r) {
                    return
                }
                a.appendChild(c);
                this.fits = this.willFitParentBounds(a, c);
                if (this.fits !== true || this.calendar.popups.count > 0) {
                    a.removeChild(c);
                    a = document.body;
                    a.appendChild(c);
                    var d = bz.getScrollXY();
                    this.parentBounds = bz.getBodySize();
                    this.parentBounds.x = d.scrollLeft;
                    this.parentBounds.y = d.scrollTop;
                    this.parentElement = a
                } else {
                    this.parentBounds = bz.getBounds(a)
                }
                this.setLocation();
                this.calendar.popups.set(this.id, this);
                var b = bz.getBounds(c);
                this.dimensions = {
                    width: b.width,
                    height: b.height
                };
                if (this.id !== 'ItemsCueForm') this.calendar.view._selectionPaused = true;
                if (this._controls['subject'] != null) {
                    this._controls['subject'].element.focus()
                }
            }
        }, {
            key: 'setLocation',
            value: function setLocation() {
                var a = bz.getBodySize();
                var c = bz.getScrollXY();
                var d = this.parentBounds;
                var e = this.element;
                var b = bz.getBounds(e);
                var f = b.width;
                var g = b.height;
                var h = 0;
                if (d.width > a.width) {
                    h = (a.width - f) / 2 - d.x
                } else {
                    h = (d.width - f) / 2
                }
                if (a.width <= d.width) {
                    h += c.scrollLeft
                }
                var i = 0;
                if (d.height > a.height) {
                    i = (a.height - g) / 2 - d.y
                } else {
                    i = (d.height - g) / 2
                }
                if (a.height <= d.height) {
                    i += c.scrollTop
                }
                var j = this.checkBounds(d, {
                    x: h,
                    y: i,
                    width: f,
                    height: g
                }, !this.fits);
                e.style.left = j.x + "px";
                e.style.top = j.y + "px"
            }
        }, {
            key: 'closeForm',
            value: function closeForm(a) {
                var r = this.calendar.onFormClose(new bY(this));
                if (!r) {
                    return
                }
                var b = this.calendar.popups;
                if (a != null) {
                    var c = b.get(a);
                    if (c == null) return;
                    c.clearObject();
                    bz.removeNode(c.element, c.parentElement);
                    b.remove(a)
                } else {
                    this.clearObject();
                    bz.removeNode(this.element, this.parentElement);
                    b.remove(this.id)
                }
                if (this.calendar.popups.count === 0 || this.calendar.popups.count === 1 && this.calendar.popups.get("ItemsCueForm")) {
                    this.calendar.view._selectionPaused = false
                }
            }
        }, {
            key: 'getElement',
            value: function getElement() {
                return this.element
            }
        }, {
            key: 'getContent',
            value: function getContent() {
                return this.content
            }
        }, {
            key: 'getHeader',
            value: function getHeader() {
                return this._header
            }
        }, {
            key: 'drawPopup',
            value: function drawPopup() {
                var d = document.createElement("div");
                bz.addCssClass(d, "mfp-popup");
                if (this.cssClass) bz.addCssClass(d, this.cssClass);
                if (this.calendar.theme) bz.addCssClass(d, this.calendar.theme);
                d.id = this.elementId;
                this.element = d;
                var h = this.drawHeader();
                d.appendChild(h);
                var c = this.drawContent();
                d.appendChild(c);
                if (c != null) {
                    var b = this.drawButtons();
                    if (b != null) c.appendChild(b)
                }
                return d
            }
        }, {
            key: 'drawHeader',
            value: function drawHeader() {
                var b = this;
                var h = document.createElement("div");
                h.className = "mfp-popup-header";
                h.addEventListener("mousedown", function(e) {
                    return b.onHeaderMouseDown(e)
                });
                var s = document.createElement("a");
                s.text = this.headerText;
                h.appendChild(s);
                var a = document.createElement("a");
                a.className = "mfp-close-button";
                a.addEventListener("click", function(e) {
                    return b.onCloseButtonClick(e)
                });
                h.appendChild(a);
                this.addControl({
                    id: "headerElement",
                    element: h
                });
                this.addControl({
                    id: "headerClose",
                    element: a
                });
                this._header = h;
                return h
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var c = document.createElement("div");
                c.className = "mfp-popup-content";
                this.content = c;
                return c
            }
        }, {
            key: 'drawButtons',
            value: function drawButtons() {
                this._buttons = null
            }
        }, {
            key: 'createButton',
            value: function createButton(b) {
                if (b == null || b == {}) return;
                if (b.id == null) b.id = "button" + this.controls.count() + 1;
                if (b.text === "") b.text = b.id;
                var c = {
                    id: b.id,
                    text: b.text,
                    element: null
                };
                var a = document.createElement("a");
                a.className = "mfp-button";
                a.innerHTML = c.text;
                c.element = a;
                if (b.events != null) {
                    for (var d in b.events) {
                        if (b.events.hasOwnProperty(d)) {
                            c.element.addEventListener(d, b.events[d])
                        }
                    }
                }
                return c
            }
        }, {
            key: 'createTextArea',
            value: function createTextArea(d) {
                var e = this;
                if (d == null) return;
                if (d.id == null) d.id = "textArea" + this.controls.count() + 1;
                var t = document.createElement("textarea");
                t.className = "mfp-text-area";
                var f = typeof d.initValue !== "undefined" && d.initValue !== null ? d.initValue : "";
                t.id = d.id;
                t.value = f;
                d.element = t;
                var c = new ci(d, this);
                c.keyUp.addEventListener(function(a, b) {
                    e.onControlKeyUp(a, b)
                });
                return c
            }
        }, {
            key: 'createTextBox',
            value: function createTextBox(d) {
                var e = this;
                if (d == null) return;
                if (d.id == null) d.id = "textBox" + this.controls.count() + 1;
                var t = document.createElement("input");
                t.type = "text";
                t.className = "mfp-text-box";
                t.id = d.id;
                t.value = d.initValue;
                d.element = t;
                var c = new ci(d, this);
                c.keyUp.addEventListener(function(a, b) {
                    e.onControlKeyUp(a, b)
                });
                return c
            }
        }, {
            key: 'createDropDownList',
            value: function createDropDownList(d) {
                var e = this;
                if (d == null) return;
                if (d.id == null) d.id = "dropDownList" + this.controls.count() + 1;
                var f = document.createElement("select");
                f.className = "mfp-dropDown-list";
                f.id = d.id;
                var g = d.items;
                if (d.addEmptyValue !== false) {
                    var h = document.createElement("option");
                    f.appendChild(h)
                }
                for (var i = 0; i < g.length; i++) {
                    var h = document.createElement("option");
                    h.value = g[i].value.toString();
                    h.innerHTML = g[i].text;
                    f.appendChild(h)
                }
                d.element = f;
                if (d.initValue != null) d.element.value = d.initValue;
                var j = {
                    id: d.id,
                    element: d.element,
                    initValue: d.initValue,
                    events: d.events
                };
                var c = new ci(j, this);
                c.keyUp.addEventListener(function(a, b) {
                    e.onControlKeyUp(a, b)
                });
                return c
            }
        }, {
            key: 'createCheckBox',
            value: function createCheckBox(a) {
                if (a == null) return;
                if (a.id == null) a.id = "checkBox" + this.controls.count() + 1;
                if (a.name == null) a.name = a.id;
                if (a.text == null) a.text = a.id;
                var b = {
                    id: a.id,
                    element: null,
                    text: a.text
                };
                var c = document.createElement("input");
                c.type = "checkbox";
                c.className = "mfp-check-box";
                c.id = a.id;
                var d = document.createElement("label");
                d.for = a.id;
                d.innerHTML = a.text;
                a.element = c;
                if (a.initValue === true) a.element.checked = true;
                delete a.text;
                return {
                    control: new ci(a, this),
                    label: d
                }
            }
        }, {
            key: 'createCheckBoxList',
            value: function createCheckBoxList(a) {
                if (a == null || a === {}) return;
                if (a.id == null) a.id = "checkBoxList" + this.controls.count() + 1;
                return new ck(a)
            }
        }, {
            key: 'createEditBox',
            value: function createEditBox(a) {
                if (a == null || a === {}) return;
                if (a.id == null) a.id = "editBox" + this.controls.count() + 1;
                a.parent = this.element;
                a.formatInfo = this.formatInfo;
                a.localInfo = this.localInfo;
                return new cj(a)
            }
        }, {
            key: 'createRadioButton',
            value: function createRadioButton(a) {
                if (a === null || a === {}) return;
                if (a.id === null) a.id = "radioButton" + this.controls.count() + 1;
                if (a.text === null) a.text = a.id;
                if (a.name === null) a.name = a.id;
                var b = {
                    id: a.id,
                    element: null,
                    text: a.text,
                    name: a.name
                };
                var c = document.createElement("input");
                c.type = "radio";
                c.className = "mfp-check-box";
                c.id = a.id;
                c.name = b.name;
                b.element = c;
                var d = document.createElement("label");
                d.for = a.id;
                d.innerHTML = a.text;
                c.appendChild(d);
                if (a.checked === true) b.element.checked = true;
                b.getValue = function() {
                    return this.element.checked
                };
                if (a.events != null) {
                    for (var e in a.events) {
                        if (a.events.hasOwnProperty(e)) {
                            b.element.addEventListener(e, a.events[e])
                        }
                    }
                }
                return {
                    control: b,
                    label: d
                }
            }
        }, {
            key: 'clearObject',
            value: function clearObject() {
                this.clearControls()
            }
        }, {
            key: 'onCloseButtonClick',
            value: function onCloseButtonClick(e) {
                this.closeForm()
            }
        }, {
            key: 'onCancelButtonClick',
            value: function onCancelButtonClick(e) {
                this.closeForm()
            }
        }, {
            key: 'onSaveButtonClick',
            value: function onSaveButtonClick(e) {}
        }, {
            key: 'onPopupMouseDown',
            value: function onPopupMouseDown(e) {
                e.preventDefault();
                e.stopPropagation()
            }
        }, {
            key: 'onHeaderMouseDown',
            value: function onHeaderMouseDown(a) {
                if (a.button == 0) {
                    this.dragging = true;
                    var b = bz.getLocation(this.element);
                    this.dragOffset = {
                        x: a.clientX - b.x,
                        y: a.clientY - b.y
                    };
                    document.addEventListener('mousemove', this.mouseMoveHandler);
                    document.addEventListener('mouseup', this.mouseUpHandler)
                }
            }
        }, {
            key: 'onMouseMove',
            value: function onMouseMove(a) {
                if (this.dragging === true) {
                    if (!this.fits) {
                        this.parentBounds = bz.getBodySize();
                        var b = bz.getScrollXY();
                        this.parentBounds.x = b.scrollLeft;
                        this.parentBounds.y = b.scrollTop
                    }
                    var c = this.element;
                    var e = bz.getLocation(c.parentNode);
                    var f = this.dragOffset;
                    var g = {
                        x: this.fits ? 0 : this.parentBounds.x,
                        y: this.fits ? 0 : this.parentBounds.y,
                        width: this.parentBounds.width,
                        height: this.parentBounds.height
                    };
                    var d = this.dimensions;
                    var r = this.checkBounds(g, {
                        x: a.clientX - e.x - f.x,
                        y: a.clientY - e.y - f.y,
                        width: d.width,
                        height: d.height
                    }, true);
                    c.style.left = r.x + "px";
                    c.style.top = r.y + "px"
                }
            }
        }, {
            key: 'onMouseUp',
            value: function onMouseUp(a) {
                if (this.dragging === true) {
                    this.dragging = false;
                    this.dragOffset = null;
                    document.removeEventListener('mousemove', this.mouseMoveHandler);
                    document.removeEventListener('mouseup', this.mouseUpHandler)
                }
            }
        }, {
            key: 'onKeyUp',
            value: function onKeyUp(e) {
                this.onControlKeyUp(this, e)
            }
        }, {
            key: 'onControlKeyUp',
            value: function onControlKeyUp(a, e) {
                if (e.keyCode == 13) {
                    this.onSaveButtonClick(e);
                    e.preventDefault();
                    return false
                }
                if (e.keyCode == 27) {
                    this.onCancelButtonClick(e);
                    e.preventDefault();
                    return false
                }
            }
        }, {
            key: 'formatInfo',
            get: function get$$1() {
                return this.calendar.formatInfo
            }
        }, {
            key: 'localInfo',
            get: function get$$1() {
                return this.calendar.localInfo
            }
        }, {
            key: 'type',
            get: function get$$1() {
                return this._type
            }
        }, {
            key: 'id',
            get: function get$$1() {
                return this._id
            }
        }, {
            key: 'headerText',
            get: function get$$1() {
                return this._headerText
            },
            set: function set$$1(a) {
                this._headerText = a
            }
        }]);
        return cl
    }();
    var cm = function(B) {
        bu(cm, B);

        function cm(a, b) {
            br(this, cm);
            var c = bv(this, (cm.__proto__ || Object.getPrototypeOf(cm)).call(this, a, b));
            c._id = "RecurrenceForm";
            c.cssClass = "mfp-popup-recurrence";
            c.item = b;
            if (b != null && b.currentRecurrence != null) {
                if (b.recurrence != null) {
                    c._type = 'edit';
                    c._headerText = c.localInfo.editRecurrenceFormHeader
                } else {
                    c._type = 'new';
                    c._headerText = c.localInfo.newRecurrenceFormHeader
                }
                c.recurrence = b.currentRecurrence.clone()
            } else if (b != null && b.recurrence != null) {
                c._type = 'edit';
                c.recurrence = b.recurrence;
                c._headerText = c.localInfo.editRecurrenceFormHeader
            } else {
                c._type = 'new';
                c.recurrence = new bW();
                c.recurrence.startDate = b.startTime;
                c.recurrence.endDate = b.endTime;
                c.recurrence.daysOfWeek = b.startTime.getDay();
                c.recurrence.dayOfMonth = b.startTime._date.getDate();
                c.recurrence.day = b.startTime._date.getDay() + 3;
                c.recurrence.monthOfYear = b.startTime._date.getMonth() + 1;
                c.recurrence.occurrence = b.startTime.getMonthlyOccurrenceIndex();
                c._headerText = c.localInfo.newRecurrenceFormHeader
            }
            c.firstLastList = [{
                value: 0,
                text: c.localInfo.firstValue
            }, {
                value: 1,
                text: c.localInfo.secondValue
            }, {
                value: 2,
                text: c.localInfo.thirdValue
            }, {
                value: 3,
                text: c.localInfo.fourthValue
            }, {
                value: 4,
                text: c.localInfo.lastValue
            }];
            var d = [];
            d = c.formatInfo.days.long.slice(0);
            d.splice(0, 0, c.localInfo.weekendValue);
            d.splice(0, 0, c.localInfo.weekdayValue);
            d.splice(0, 0, c.localInfo.dayValue);
            c.dayNames = [];
            for (var i = 0, l = d.length; i < l; i++) {
                c.dayNames.push({
                    value: i,
                    text: d[i]
                })
            }
            var d = [];
            d = c.formatInfo.months.long.slice(0);
            c.monthNames = [];
            for (var i = 0, l = d.length; i < l; i++) {
                c.monthNames.push({
                    value: i,
                    text: d[i]
                })
            }
            return c
        }
        bs(cm, [{
            key: 'drawContent',
            value: function drawContent() {
                var a = this;
                bt(cm.prototype.__proto__ || Object.getPrototypeOf(cm.prototype), 'drawContent', this).call(this);
                var b = this.getContent();
                var c = this.item;
                if (c == null) c = {};
                var d = this.recurrence;
                var f = [];
                f.push({
                    value: 0,
                    text: this.localInfo.dailyValue
                });
                f.push({
                    value: 1,
                    text: this.localInfo.weeklyValue
                });
                f.push({
                    value: 2,
                    text: this.localInfo.monthlyValue
                });
                f.push({
                    value: 3,
                    text: this.localInfo.yearlyValue
                });
                f.push({
                    value: 4,
                    text: this.localInfo.intervalValue
                });
                var g = this.createDropDownList({
                    id: "pattern",
                    items: f,
                    initValue: d.pattern,
                    addEmptyValue: false,
                    events: {
                        change: function change(e) {
                            return a.onPatternChange(e)
                        }
                    }
                });
                g.element.style.width = "45%";
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = this.localInfo.patternCaption;
                var h = this.row();
                bz.addCssClass(h, "pattern");
                h.appendChild(s);
                h.appendChild(g.element);
                b.appendChild(h);
                this.addControl(g);
                var j = b;
                var k = this.row();
                bz.addCssClass(k, "mfp-pattern-details");
                k.id = 'DayDiv';
                k.style.display = d.pattern == 0 ? 'block' : 'none';
                this.addControl(k);
                var g = this.createRadioButton({
                    id: "dailyEvery",
                    text: this.localInfo.everyCaption,
                    name: "daily",
                    checked: d.dailyRecurrence == 0
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                var g = this.createEditBox({
                    id: "dailyEveryDay",
                    type: "numeric",
                    initValue: d.days,
                    minValue: 1
                });
                h.appendChild(g.element);
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.dayValue;
                h.appendChild(s);
                this.addControl(g);
                k.appendChild(h);
                var g = this.createRadioButton({
                    id: "dailyWeekday",
                    text: this.localInfo.everyCaption + " " + this.localInfo.weekdayValue,
                    name: "daily",
                    checked: d.dailyRecurrence == 1
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                k.appendChild(h);
                var g = this.createRadioButton({
                    id: "dailyWeekend",
                    text: this.localInfo.everyCaption + " " + this.localInfo.weekendValue,
                    name: "daily",
                    checked: d.dailyRecurrence == 2
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                k.appendChild(h);
                j.appendChild(k);
                var m = this.row();
                bz.addCssClass(m, "mfp-pattern-details");
                m.id = 'WeekDiv';
                m.style.display = d.pattern == 1 ? 'block' : 'none';
                this.addControl(m);
                var g = this.createEditBox({
                    id: "weekEvery",
                    type: "numeric",
                    initValue: d.weeks,
                    minValue: 1
                });
                h = this.row();
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.everyCaption;
                h.appendChild(s);
                h.appendChild(g.element);
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.weeksValue;
                h.appendChild(s);
                this.addControl(g);
                m.appendChild(h);
                var n = this.formatInfo.days.short;
                h = this.row();
                m.appendChild(h);
                for (var i = 0, l = n.length; i < l; i++) {
                    g = this.createCheckBox({
                        id: "dayOfWeek" + i,
                        text: n[i],
                        name: "weekDay",
                        initValue: (Math.pow(2, i) & d.daysOfWeek) == Math.pow(2, i)
                    });
                    h.appendChild(g.control.element);
                    h.appendChild(g.label);
                    this.addControl(g.control)
                }
                m.appendChild(h);
                j.appendChild(m);
                var o = this.row();
                bz.addCssClass(o, "mfp-pattern-details");
                o.id = "MonthDiv";
                o.style.display = d.pattern == 2 ? 'block' : 'none';
                this.addControl(o);
                var g = this.createRadioButton({
                    id: "monthDate",
                    text: this.localInfo.dayValue,
                    name: "monthly",
                    checked: d.monthlyRecurrence == 0
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                var g = this.createEditBox({
                    id: "monthDateEdit",
                    type: "numeric",
                    initValue: d.dayOfMonth,
                    minValue: 1,
                    maxValue: 31
                });
                h.appendChild(g.element);
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.ofEveryCaption;
                h.appendChild(s);
                this.addControl(g);
                var g = this.createEditBox({
                    id: "monthDateMonth",
                    type: "numeric",
                    initValue: d.months,
                    minValue: 1
                });
                h.appendChild(g.element);
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.monthValue;
                h.appendChild(s);
                this.addControl(g);
                o.appendChild(h);
                var g = this.createRadioButton({
                    id: "monthWeekDay",
                    text: "",
                    name: "monthly",
                    checked: d.monthlyRecurrence == 1
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                var p = {
                    id: "monthWeekDayOptions",
                    items: this.firstLastList,
                    initValue: d.occurrence,
                    addEmptyValue: false
                };
                g = this.createDropDownList(p);
                h.appendChild(g.element);
                this.addControl(g.element);
                p = {
                    id: "monthWeekDayExactOptions",
                    items: this.dayNames,
                    initValue: d.day,
                    addEmptyValue: false
                };
                g = this.createDropDownList(p);
                h.appendChild(g.element);
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.ofEveryCaption;
                h.appendChild(s);
                this.addControl(g.element);
                var g = this.createEditBox({
                    id: "monthWeekDayMonth",
                    type: "numeric",
                    initValue: d.months,
                    minValue: 1
                });
                h.appendChild(g.element);
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.monthValue;
                h.appendChild(s);
                this.addControl(g);
                o.appendChild(h);
                j.appendChild(o);
                var q = this.row();
                bz.addCssClass(q, "mfp-pattern-details");
                q.id = "YearDiv";
                q.style.display = d.pattern == 3 ? 'block' : 'none';
                this.addControl(q);
                var g = this.createRadioButton({
                    id: "yearExact",
                    text: this.localInfo.everyCaption,
                    name: "yearly",
                    checked: d.yearlyRecurrence == 0
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                p = {
                    id: "yearExactOption",
                    items: this.monthNames,
                    initValue: d.monthOfYear - 1,
                    addEmptyValue: false
                };
                g = this.createDropDownList(p);
                h.appendChild(g.element);
                this.addControl(g.element);
                var g = this.createEditBox({
                    id: "yearExactEdit",
                    type: "numeric",
                    initValue: d.dayOfMonth,
                    minValue: 1,
                    maxValue: 31
                });
                h.appendChild(g.element);
                this.addControl(g);
                q.appendChild(h);
                var g = this.createRadioButton({
                    id: "yearWeekDay",
                    text: "",
                    name: "yearly",
                    checked: d.yearlyRecurrence == 1
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                p = {
                    id: "yearWeekDayPosOptions",
                    items: this.firstLastList,
                    initValue: d.occurrence,
                    addEmptyValue: false
                };
                g = this.createDropDownList(p);
                h.appendChild(g.element);
                this.addControl(g.element);
                p = {
                    id: "yearWeekDayExactOptions",
                    items: this.dayNames,
                    initValue: d.day,
                    addEmptyValue: false
                };
                g = this.createDropDownList(p);
                h.appendChild(g.element);
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.ofEveryCaption;
                h.appendChild(s);
                this.addControl(g.element);
                p = {
                    id: "yearMonthExactOptions",
                    items: this.monthNames,
                    initValue: d.monthOfYear - 1,
                    addEmptyValue: false
                };
                g = this.createDropDownList(p);
                h.appendChild(g.element);
                this.addControl(g.element);
                q.appendChild(h);
                j.appendChild(q);
                var r = this.row();
                bz.addCssClass(r, "mfp-pattern-details");
                r.id = "IntervalDiv";
                r.style.display = d.pattern == 4 ? 'block' : 'none';
                this.addControl(r);
                var t = d.interval / bx.MillisPerHour;
                var u = Math.floor(t / 24.0);
                var v = Math.floor(t % 24);
                var w = Math.floor(t * 60) % 60;
                var x = Math.round(t * 60 % 60 * 60 % 60);
                if (x >= 60) {
                    w += x / 60;
                    x -= 60 * (x / 60)
                }
                var g = this.createEditBox({
                    id: "intervalDays",
                    type: "numeric",
                    initValue: u
                });
                h = this.row();
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.daysValue;
                h.appendChild(s);
                h.appendChild(g.element);
                this.addControl(g);
                g = this.createEditBox({
                    id: "intervalHours",
                    type: "numeric",
                    initValue: v
                });
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.hoursValue;
                h.appendChild(s);
                h.appendChild(g.element);
                this.addControl(g);
                r.appendChild(h);
                g = this.createEditBox({
                    id: "intervalMinutes",
                    type: "numeric",
                    initValue: w
                });
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.minutesValue;
                h.appendChild(s);
                h.appendChild(g.element);
                this.addControl(g);
                r.appendChild(h);
                g = this.createEditBox({
                    id: "intervalSeconds",
                    type: "numeric",
                    initValue: x
                });
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.secondsValue;
                h.appendChild(s);
                h.appendChild(g.element);
                this.addControl(g);
                r.appendChild(h);
                j.appendChild(r);
                b.appendChild(this.divider());
                var y = document.createElement("table");
                y.cellSpacing = 0;
                y.cellPadding = 0;
                var z = document.createElement("tr");
                y.appendChild(z);
                var A = document.createElement("td");
                z.appendChild(A);
                var j = document.createElement("td");
                z.appendChild(j);
                var p = {
                    id: "startDate",
                    type: "date",
                    initValue: d.startDate.clone()
                };
                g = this.createEditBox(p);
                h = this.row();
                var s = document.createElement("span");
                s.className = "mfp-text-label";
                s.innerHTML = "&nbsp;" + this.localInfo.startCaption;
                h.appendChild(s);
                h.appendChild(g.element);
                this.addControl(g);
                A.appendChild(h);
                g = this.createRadioButton({
                    id: "noEnd",
                    text: this.localInfo.noEndCaption,
                    name: "recEnd",
                    checked: d.recurrenceEnd == 0
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                j.appendChild(h);
                g = this.createRadioButton({
                    id: "endAfter",
                    text: this.localInfo.endAfterCaption,
                    name: "recEnd",
                    checked: d.recurrenceEnd == 1
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                var g = this.createEditBox({
                    id: "numOccurences",
                    type: "numeric",
                    initValue: d.numOccurrences,
                    minValue: 1
                });
                h.appendChild(g.element);
                this.addControl(g);
                j.appendChild(h);
                g = this.createRadioButton({
                    id: "endBy",
                    text: this.localInfo.endDateCaption,
                    name: "recEnd",
                    checked: d.recurrenceEnd == 2
                });
                h = this.row();
                h.appendChild(g.control.element);
                h.appendChild(g.label);
                this.addControl(g.control);
                var p = {
                    id: "endDate",
                    type: "date",
                    initValue: d.endDate.clone(),
                    culture: this.culture,
                    localInfo: this._localInfo
                };
                g = this.createEditBox(p);
                h.appendChild(g.element);
                this.addControl(g);
                j.appendChild(h);
                h = this.row();
                bz.addCssClass(h, "range");
                h.appendChild(y);
                b.appendChild(h);
                b.appendChild(this.divider());
                return b
            }
        }, {
            key: 'drawButtons',
            value: function drawButtons() {
                var a = this;
                var b = this.createButton({
                    id: "btnSave",
                    text: this.localInfo.saveButtonCaption,
                    events: {
                        click: function click(e) {
                            return a.onSaveButtonClick(e)
                        }
                    }
                });
                var c = this.row();
                bz.addCssClass(c, "mfp-buttons-row");
                c.appendChild(b.element);
                this.addControl(b);
                b = this.createButton({
                    id: "btnCancel",
                    text: this.localInfo.cancelButtonCaption,
                    events: {
                        click: function click(e) {
                            return a.onCancelButtonClick(e)
                        }
                    }
                });
                c.appendChild(b.element);
                this.addControl(b);
                if (this._type == 'edit') {
                    b = this.createButton({
                        id: "btnDelete",
                        text: this.localInfo.deleteButtonCaption,
                        events: {
                            click: function click(e) {
                                return a.onDeleteButtonClick(e)
                            }
                        }
                    });
                    c.appendChild(b.element);
                    this.addControl(b)
                }
                this._buttons = c;
                return c
            }
        }, {
            key: 'getChanges',
            value: function getChanges() {
                var a = new bW();
                a._pattern = +this._controls["pattern"].getValue();
                a._end = this.getRadioGroupValue("recEnd");
                a._startDate = this._controls["startDate"].getValue().clone();
                switch (a._end) {
                    case 1: {
                        if (this._controls["numOccurences"].getValue() != '') a._numOccurrences = +this._controls["numOccurences"].getValue();
                        else a._numOccurrences = 1;
                        break
                    }
                    case 2: {
                        a._endDate = this._controls["endDate"].value;
                        break
                    }
                }
                switch (a._pattern) {
                    case 0: {
                        a._daily = this.getRadioGroupValue("daily");
                        if (a._daily == 0) a._days = +this._controls["dailyEveryDay"].getValue();
                        break
                    }
                    case 1: {
                        if (this._controls["weekEvery"].getValue() != '') a._weeks = +this._controls["weekEvery"].getValue();
                        else a._weeks = 1;
                        var b = 0;
                        for (var i = 0, l = 6; i <= l; i++) {
                            if (this._controls["dayOfWeek" + i].getValue() == true) {
                                b |= Math.pow(2, i)
                            }
                        }
                        if (b === 0) {
                            b = 1
                        }
                        a._daysOfWeek = b;
                        break
                    }
                    case 2: {
                        a._monthly = this.getRadioGroupValue("monthly");
                        if (a._monthly == 0) {
                            a._dayOfMonth = +this._controls["monthDateEdit"].getValue();
                            a._months = +this._controls["monthDateMonth"].getValue()
                        } else if (a._monthly == 1) {
                            a._occurrence = +this._controls["monthWeekDayOptions"].selectedIndex;
                            a._day = +this._controls["monthWeekDayExactOptions"].selectedIndex;
                            a._months = +this._controls["monthWeekDayMonth"].getValue()
                        }
                        break
                    }
                    case 3: {
                        a._yearly = this.getRadioGroupValue("yearly");
                        if (a._yearly == 0) {
                            a._monthOfYear = +this._controls["yearExactOption"].selectedIndex + 1;
                            a._dayOfMonth = +this._controls["yearExactEdit"].getValue()
                        } else if (a._yearly == 1) {
                            a._occurrence = +this._controls["yearWeekDayPosOptions"].selectedIndex;
                            a._day = +this._controls["yearWeekDayExactOptions"].selectedIndex;
                            a._monthOfYear = +this._controls["yearMonthExactOptions"].selectedIndex + 1
                        }
                        break
                    }
                    case 4: {
                        var b = +this._controls["intervalDays"].getValue();
                        var c = +this._controls["intervalHours"].getValue();
                        var d = +this._controls["intervalMinutes"].getValue();
                        var e = +this._controls["intervalSeconds"].getValue();
                        a._interval = (b * 24 + c + d / 60 + e / 3600) * bx.MillisPerHour;
                        if (a._interval === 0) {
                            a._interval = 1
                        }
                        break
                    }
                }
                return a
            }
        }, {
            key: 'getRadioGroupValue',
            value: function getRadioGroupValue(a) {
                var b = this.getContent().querySelectorAll("input[name=" + a + "]");
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].checked) return i
                }
            }
        }, {
            key: 'onSaveButtonClick',
            value: function onSaveButtonClick(e) {
                this.item.currentRecurrence = this.getChanges();
                this.closeForm();
                if (this.calendar && this.calendar.popups.get("EditForm")) {
                    this.calendar.popups.get("EditForm").updateRecurrenceInfo()
                }
            }
        }, {
            key: 'onDeleteButtonClick',
            value: function onDeleteButtonClick(e) {
                this.item.currentRecurrence = null;
                this.closeForm();
                if (this.calendar && this.calendar.popups.get("EditForm")) {
                    this.calendar.popups.get("EditForm").updateRecurrenceInfo()
                }
            }
        }, {
            key: 'onPatternChange',
            value: function onPatternChange(e) {
                var a = e.target.selectedIndex;
                this._controls["DayDiv"].style.display = a == 0 ? 'block' : 'none';
                this._controls["WeekDiv"].style.display = a == 1 ? 'block' : 'none';
                this._controls["MonthDiv"].style.display = a == 2 ? 'block' : 'none';
                this._controls["YearDiv"].style.display = a == 3 ? 'block' : 'none';
                this._controls["IntervalDiv"].style.display = a == 4 ? 'block' : 'none';
                e.stopPropagation()
            }
        }]);
        return cm
    }(cl);
    var cn = function(y) {
        bu(cn, y);

        function cn(a, b, c) {
            br(this, cn);
            var d = bv(this, (cn.__proto__ || Object.getPrototypeOf(cn)).call(this, a, b));
            d._id = "EditForm";
            d._type = c || 'edit';
            if (d._type == "edit") d._headerText = d.localInfo.editFormHeader;
            else d._headerText = d.localInfo.newFormHeader;
            d.cssClass = "mfp-popup-edit";
            var e = bx.TicksPerMinute;
            var f = bx.TicksPerHour;
            var g = bx.TicksPerDay;
            d.reminderTexts = [{
                value: 0,
                text: String.format('0 {0}', d.localInfo.minutesValue)
            }, {
                value: 5 * e,
                text: String.format('5 {0}', d.localInfo.minutesValue)
            }, {
                value: 10 * e,
                text: String.format('10 {0}', d.localInfo.minutesValue)
            }, {
                value: 15 * e,
                text: String.format('15 {0}', d.localInfo.minutesValue)
            }, {
                value: 30 * e,
                text: String.format('30 {0}', d.localInfo.minutesValue)
            }, {
                value: f,
                text: String.format('1 {0}', d.localInfo.hourValue)
            }, {
                value: 2 * f,
                text: String.format('2 {0}', d.localInfo.hoursValue)
            }, {
                value: 3 * f,
                text: String.format('3 {0}', d.localInfo.hoursValue)
            }, {
                value: 4 * f,
                text: String.format('4 {0}', d.localInfo.hoursValue)
            }, {
                value: 5 * f,
                text: String.format('5 {0}', d.localInfo.hoursValue)
            }, {
                value: 6 * f,
                text: String.format('6 {0}', d.localInfo.hoursValue)
            }, {
                value: 7 * f,
                text: String.format('7 {0}', d.localInfo.hoursValue)
            }, {
                value: 8 * f,
                text: String.format('8 {0}', d.localInfo.hoursValue)
            }, {
                value: 9 * f,
                text: String.format('9 {0}', d.localInfo.hoursValue)
            }, {
                value: 10 * f,
                text: String.format('10 {0}', d.localInfo.hoursValue)
            }, {
                value: 11 * f,
                text: String.format('11 {0}', d.localInfo.hoursValue)
            }, {
                value: 12 * f,
                text: String.format('12 {0}', d.localInfo.hoursValue)
            }, {
                value: g,
                text: String.format('1 {0}', d.localInfo.dayValue)
            }, {
                value: 2 * g,
                text: String.format('2 {0}', d.localInfo.daysValue)
            }];
            return d
        }
        bs(cn, [{
            key: '_getItemContacts',
            value: function _getItemContacts() {
                if (this.item != null) {
                    var a = this.item.contacts;
                    if (a != null) {
                        var b = [];
                        for (var i = 0, l = a.count(); i < l; i++) {
                            for (var j = 0, m = this.calendar._schedule.contacts.count(); j < m; j++) {
                                if (a.items()[i].equals(this.calendar._schedule.contacts.items()[j])) {
                                    b.push(j.toString());
                                    break
                                }
                            }
                        }
                        return b
                    }
                }
                return null
            }
        }, {
            key: '_getItemLocationIndex',
            value: function _getItemLocationIndex() {
                if (this.item != null && this.item.location != null) {
                    return this.calendar._schedule.locations.items().indexOf(this.item.location)
                }
                return -1
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var a = this;
                bt(cn.prototype.__proto__ || Object.getPrototypeOf(cn.prototype), 'drawContent', this).call(this);
                var b = this.getContent();
                var c = this.item;
                if (c == null) c = {};
                var d = c.subject;
                var f = this.createTextBox({
                    id: "subject",
                    events: {
                        keydown: this._areaKeyDown
                    },
                    initValue: d
                });
                f.element.style.width = "355px";
                var s = document.createElement("span");
                s.className = "mfp-text-label-fixed";
                s.innerHTML = this.localInfo.subjectCaption;
                var g = this.row();
                bz.addCssClass(g, "mfp-subject");
                g.appendChild(s);
                g.appendChild(f.element);
                b.appendChild(g);
                this.addControl(f);
                var h = c.location != null ? c.location.id : "";
                f = this.createDropDownList({
                    id: "location",
                    items: this._getLocations(),
                    initValue: this._getItemLocationIndex()
                });
                f.element.style.width = "45%";
                var s = document.createElement("span");
                s.className = "mfp-text-label-fixed";
                s.innerHTML = this.localInfo.locationCaption;
                g = this.row();
                bz.addCssClass(g, "mfp-location");
                g.appendChild(s);
                g.appendChild(f.element);
                b.appendChild(g);
                this.addControl(f);
                b.appendChild(this.divider());
                var j = c.allDayEvent === true;
                var k = new bx(c.startTime.getDate());
                var m = {
                    id: "startDate",
                    type: "date",
                    initValue: k,
                    localInfo: this.localInfo
                };
                f = this.createEditBox(m);
                var s = document.createElement("span");
                s.className = "mfp-text-label-fixed";
                s.innerHTML = this.localInfo.startTimeCaption;
                g = this.row();
                bz.addCssClass(g, "mfp-startTime");
                g.appendChild(s);
                g.appendChild(f.element);
                this.addControl(f);
                var m = {
                    id: "startTime",
                    type: "time",
                    initValue: c.startTime.clone(),
                    localInfo: this.localInfo
                };
                if (j === true) m.visible = false;
                f = this.createEditBox(m);
                g.appendChild(f.element);
                this.addControl(f);
                var n = this.createCheckBox({
                    id: "allDayEvent",
                    text: this.localInfo.allDayEventCaption,
                    initValue: j
                });
                f = n.control;
                f.element.addEventListener("change", function(e) {
                    return a.onAllDayChange(e)
                });
                g.appendChild(f.element);
                g.appendChild(n.label);
                this.addControl(f);
                b.appendChild(g);
                var o = new bx(c.endTime.getDate());
                if (j == true) {
                    var p = o.__getTimezoneOffset() - k.__getTimezoneOffset();
                    var q = bx.MillisPerDay + p * 60 * 1000;
                    if (o._date.valueOf() - k._date.valueOf() >= q) {
                        o.addDays(-1);
                        this.subtractedEndDate = true
                    }
                }
                var m = {
                    id: "endDate",
                    type: "date",
                    initValue: o,
                    localInfo: this.localInfo
                };
                f = this.createEditBox(m);
                var s = document.createElement("span");
                s.className = "mfp-text-label-fixed";
                s.innerHTML = this.localInfo.endTimeCaption;
                g = this.row();
                bz.addCssClass(g, "mfp-endTime");
                g.appendChild(s);
                g.appendChild(f.element);
                this.addControl(f);
                var m = {
                    id: "endTime",
                    type: "time",
                    initValue: c.endTime.clone(),
                    localInfo: this.localInfo
                };
                if (j === true) m.visible = false;
                f = this.createEditBox(m);
                g.appendChild(f.element);
                this.addControl(f);
                b.appendChild(g);
                g = this.row();
                bz.addCssClass(g, "mfp-recurrence-info");
                var r = document.createElement("span");
                r.className = "mfp-text-label";
                g.appendChild(r);
                b.appendChild(g);
                this.updateRecurrenceInfo();
                b.appendChild(this.divider());
                var t = c.reminder != null && c.reminder.type == 1;
                var n = this.createCheckBox({
                    id: "reminderCheck",
                    text: this.localInfo.reminderCaption,
                    initValue: t
                });
                f = n.control;
                f.element.addEventListener("change", function(e) {
                    return a.onReminderChange(e)
                });
                f.element.style["line-height"] = "32px";
                var s = document.createElement("span");
                s.className = "mfp-reminder-img";
                var g = this.row();
                bz.addCssClass(g, "mfp-reminder");
                g.appendChild(s);
                g.appendChild(f.element);
                g.appendChild(n.label);
                this.addControl(f);
                var u = t ? c.reminder.timeInterval.ticks : 15 * bx.TicksPerMinute;
                var v = false;
                for (var i = 0, l = this.reminderTexts.length; i < l; i++) {
                    if (u == this.reminderTexts[i].value) {
                        v = true;
                        break
                    }
                }
                m = {
                    id: "reminder",
                    items: this.reminderTexts,
                    initValue: t && v ? u : 15 * bx.TicksPerMinute,
                    addEmptyValue: false
                };
                f = this.createDropDownList(m);
                f.element.style.width = "100px";
                f.element.disabled = !t;
                g.appendChild(f.element);
                this.addControl(f);
                b.appendChild(g);
                b.appendChild(this.divider());
                var g = this.row();
                var w = this.col();
                bz.addCssClass(w, "details");
                g.appendChild(w);
                d = "";
                if (this._type == "edit") {
                    if (this.calendar.itemSettings.enableTags) {
                        d = c.details
                    } else {
                        d = c.details
                    }
                }
                f = this.createTextArea({
                    id: "details",
                    initValue: d
                });
                var x = f.element.style;
                x.height = "100px";
                x.width = "206px";
                var s = document.createElement("span");
                s.className = "mfp-text-label-fixed";
                s.innerHTML = this.localInfo.detailsCaption;
                w.appendChild(s);
                w.appendChild(f.element);
                this.addControl(f);
                var w = this.col();
                bz.addCssClass(w, "contacts");
                g.appendChild(w);
                var m = {
                    id: "contacts",
                    items: this._getContacts(),
                    selectedValues: this._getItemContacts()
                };
                f = this.createCheckBoxList(m);
                var s = document.createElement("span");
                s.className = "mfp-text-label-fixed";
                s.innerHTML = this.localInfo.contactsCaption;
                w.appendChild(s);
                w.appendChild(f.element);
                this.addControl(f);
                b.appendChild(g);
                b.appendChild(this.divider());
                return b
            }
        }, {
            key: 'drawButtons',
            value: function drawButtons() {
                var a = this;
                var b = this.createButton({
                    id: "btnSave",
                    text: this.localInfo.saveButtonCaption,
                    events: {
                        click: function click(e) {
                            return a.onSaveButtonClick(e)
                        }
                    }
                });
                var c = this.row();
                bz.addCssClass(c, "mfp-buttons-row");
                c.appendChild(b.element);
                this.addControl(b);
                if (this._type == 'edit') {
                    b = this.createButton({
                        id: "btnDelete",
                        text: this.localInfo.deleteButtonCaption,
                        events: {
                            click: function click(e) {
                                return a.onDeleteButtonClick(e)
                            }
                        }
                    });
                    c.appendChild(b.element);
                    this.addControl(b)
                }
                b = this.createButton({
                    id: "btnCancel",
                    text: this.localInfo.cancelButtonCaption,
                    events: {
                        click: function click(e) {
                            return a.onCancelButtonClick(e)
                        }
                    }
                });
                c.appendChild(b.element);
                this.addControl(b);
                b = this.createButton({
                    id: "btnRecurrence",
                    text: this.localInfo.recurrenceButtonCaption,
                    events: {
                        click: function click(e) {
                            return a.onRecurrenceButtonClick(e)
                        }
                    }
                });
                c.appendChild(b.element);
                this.addControl(b);
                this._buttons = c;
                return c
            }
        }, {
            key: 'getChanges',
            value: function getChanges(a) {
                var b = {};
                var d = this.item;
                var e = false;
                if (a == 'new') e = true;
                var f = this._controls["subject"].getValue();
                if (f != d.subject || a == 'new') {
                    e = true;
                    b.subject = f
                }
                var g = this._controls["details"].getValue();
                if (g != d.details) {
                    e = true;
                    b.details = g
                }
                var h = this._controls["allDayEvent"].getValue();
                if (h != d.allDayEvent || a == 'new') {
                    e = true;
                    b.allDayEvent = h
                }
                var j = this._controls["startDate"].value;
                var k = this._controls["startTime"].value;
                if (h === true) {
                    var m = j.getDate()
                } else {
                    var m = bx.combine(j, k)._date
                }
                j = this._controls["endDate"].value;
                k = this._controls["endTime"].value;
                if (h === true) {
                    var n = j.addDays(1).getDate()
                } else {
                    var n = bx.combine(j, k)._date
                }
                if (m.valueOf() > n.valueOf()) m = n;
                if (a == 'new') {
                    b.startTime = new bx(m)
                } else if (d.startTime._date.valueOf() != m.valueOf()) {
                    b.startTime = new bx(m);
                    e = true
                }
                if (a == 'new') {
                    b.endTime = new bx(n)
                } else if (d.endTime._date.valueOf() != n.valueOf()) {
                    b.endTime = new bx(n);
                    e = true
                }
                var o = this._controls["reminderCheck"].getValue();
                if (o) {
                    var p = +this._controls["reminder"].getValue();
                    if (d.reminder != null) {
                        if (d.reminder.timeInterval != p) {
                            b.reminder = new bS({
                                timeInterval: new bw(p)
                            }, 0);
                            e = true
                        }
                    } else {
                        b.reminder = new bS({
                            timeInterval: new bw(p)
                        }, 0);
                        e = true
                    }
                } else {
                    if (d.reminder != null) {
                        b.reminder = null;
                        e = true
                    }
                }
                var q = this._controls["location"].getValue();
                if (q.length > 0) {
                    var r = this.calendar._schedule.locations.items()[q]
                } else {
                    var r = null
                }
                if (r != d.location) {
                    e = true;
                    b.location = r
                }
                if (a == 'new' && r) {
                    b.location = r
                }
                var s = this._controls["contacts"];
                var t = [];
                var c = s.getSelected();
                for (var i = 0, l = c.length; i < l; i++) {
                    t.push(this.calendar._schedule.contacts.items()[c[i]])
                }
                var u = false;
                if (a == 'new') {
                    u = true;
                    if (d.resources != undefined) {
                        b.resources = d.resources
                    }
                    if (d.task != undefined) {
                        b.task = d.task
                    }
                }
                if (d.contacts == null && t.length > 0) {
                    b.contacts = t;
                    e = true
                } else if (d.contacts && t.length != d.contacts.count()) {
                    b.contacts = t;
                    e = true
                } else if (d.contacts && t.length == d.contacts.count()) {
                    for (var i = 0, l = t.length; i < l; i++) {
                        if (!t[i].equals(d.contacts.items()[i])) {
                            u = true;
                            e = true;
                            break
                        }
                    }
                    if (u) b.contacts = t
                }
                if (d.currentRecurrence) {
                    if (d.recurrence) {
                        if (!d.recurrence.samePatternAs(d.currentRecurrence)) {
                            b.recurrence = d.currentRecurrence;
                            d.currentRecurrence = undefined;
                            b.recurrenceChanged = true;
                            e = true
                        }
                    } else {
                        b.recurrence = new bW();
                        b.recurrence.extend(d.currentRecurrence);
                        d.currentRecurrence = undefined;
                        b.recurrenceState = ba.Master;
                        e = true
                    }
                } else if (d.currentRecurrence === null) {
                    if (d.recurrence) {
                        b.recurrence = null;
                        e = true
                    }
                }
                if (e) {
                    return b
                } else return null
            }
        }, {
            key: 'setRecurrence',
            value: function setRecurrence(a) {
                this.recurrence = a
            }
        }, {
            key: 'onSaveButtonClick',
            value: function onSaveButtonClick(e) {
                var a = this.getChanges(this._type);
                if (a != null) {
                    if (this._type === 'new') {
                        this.calendar.createItem(a, "EditForm")
                    } else {
                        var b = bz.extend({}, a);
                        this.calendar.editItem(this.item, b)
                    }
                }
                if (this.calendar.popups.get("RecurrenceForm")) {
                    this.closeForm("RecurrenceForm")
                }
                if (this.calendar.popups.get("ItemsCueForm")) {
                    this.closeForm("ItemsCueForm")
                }
                this.closeForm()
            }
        }, {
            key: 'onDeleteButtonClick',
            value: function onDeleteButtonClick(e) {
                this.calendar.deleteItem(this.item);
                if (this.calendar.popups.get("ItemsCueForm")) {
                    this.closeForm("ItemsCueForm")
                }
                this.closeForm()
            }
        }, {
            key: 'onCancelButtonClick',
            value: function onCancelButtonClick(e) {
                this.item.currentRecurrence = undefined;
                if (this.calendar.popups.get("RecurrenceForm")) {
                    this.closeForm("RecurrenceForm")
                }
                if (this.calendar.popups.get("ItemsCueForm")) {
                    this.closeForm("ItemsCueForm")
                }
                this.closeForm()
            }
        }, {
            key: 'onRecurrenceButtonClick',
            value: function onRecurrenceButtonClick(e) {
                if (!this.calendar.popups.get("RecurrenceForm")) {
                    var p = new cm(this.calendar, this.item, null);
                    p.showForm()
                }
            }
        }, {
            key: 'onCloseButtonClick',
            value: function onCloseButtonClick(e) {
                if (this.calendar.popups.get("RecurrenceForm")) {
                    this.closeForm("RecurrenceForm")
                }
                if (this.calendar.popups.get("ItemsCueForm")) {
                    this.closeForm("ItemsCueForm")
                }
                this.closeForm()
            }
        }, {
            key: 'setTimeControls',
            value: function setTimeControls(a) {
                if (a == true) {
                    this._controls["startTime"].element.style.display = "none";
                    this._controls["endTime"].element.style.display = "none"
                } else {
                    this._controls["startTime"].element.style.display = "";
                    this._controls["endTime"].element.style.display = ""
                }
                var b = this._controls['startDate'].value;
                var c = this._controls['endDate'];
                var d = c.value;
                var e = d.clone();
                var f = d.__getTimezoneOffset() - b.__getTimezoneOffset();
                var g = bx.MillisPerDay + f * 60 * 1000;
                if (a) {
                    if (d._date.valueOf() - b._date.valueOf() >= g) {
                        this.subtractedEndDate = true;
                        e.addDays(-1);
                        c.oldValue = c._textBox.value;
                        c._updateValue(e._date.valueOf())
                    } else {
                        this.subtractedEndDate = false
                    }
                } else {
                    if (this.subtractedEndDate === true) {
                        e.addDays(1);
                        c.oldValue = c._textBox.value;
                        c._updateValue(e._date.valueOf())
                    }
                }
            }
        }, {
            key: 'updateRecurrenceInfo',
            value: function updateRecurrenceInfo() {
                if (this.item.currentRecurrence) {
                    this.showRecurrenceInfo(this.item.currentRecurrence)
                } else if (this.item.recurrence && this.item.currentRecurrence !== null) {
                    this.showRecurrenceInfo(this.item.recurrence)
                } else {
                    this.content.querySelector(".mfp-recurrence-info").style.display = 'none'
                }
            }
        }, {
            key: 'showRecurrenceInfo',
            value: function showRecurrenceInfo(a) {
                var s = this.content.querySelector(".mfp-recurrence-info").childNodes[0];
                var b = '';
                var r = a.clone();
                if (r) {
                    b = r.toLocalizedString(this.formatInfo, this.localInfo);
                    s.innerHTML = b;
                    bz.addCssClass(s, this.item.recurrenceState == 2 ? "mfp-exception" : "mfp-recurrence");
                    s.parentNode.style.display = 'block'
                }
            }
        }, {
            key: 'onAllDayChange',
            value: function onAllDayChange(e) {
                this.setTimeControls(e.target.checked)
            }
        }, {
            key: 'onReminderChange',
            value: function onReminderChange(e) {
                this._controls["reminder"].element.disabled = !this._controls["reminderCheck"].getValue()
            }
        }, {
            key: 'getItem',
            value: function getItem() {
                return this.item
            }
        }, {
            key: 'setItem',
            value: function setItem(a) {
                this.item = a
            }
        }]);
        return cn
    }(cl);
    var co = function() {
        function co(a, b) {
            var c = this;
            br(this, co);
            this.view = a;
            this.calendar = a.calendar;
            this.appointment = b;
            this.item = b.item;
            this.element = b.element;
            this.stopped = true;
            this.containerClickHandler = function(e) {
                return c.onContainerClick(e)
            };
            this.view.getElement().addEventListener('mouseup', this.containerClickHandler);
            this.clickHandler = function(e) {
                return c.onClick(e)
            };
            this.element.addEventListener('click', this.clickHandler);
            this.doubleClickHandler = function(e) {
                return c.onDoubleClick(e)
            };
            this.element.addEventListener('dblclick', this.doubleClickHandler)
        }
        bs(co, [{
            key: 'dispose',
            value: function dispose() {
                this.view.getElement().removeEventListener('mouseup', this.containerClickHandler);
                this.element.removeEventListener('click', this.clickHandler);
                this.element.removeEventListener('dblclick', this.doubleClickHandler)
            }
        }, {
            key: 'onContainerClick',
            value: function onContainerClick(e) {
                if (!this.view.inplaceEditing) return;
                if (e.target.className === 'mfp-inplace') {
                    return
                }
                this.onInplaceInputBlur(e, true)
            }
        }, {
            key: 'onClick',
            value: function onClick(e) {
                var a = this;
                if (this.view._selectionPaused) return;
                if (this.stopped) return;
                if (this.calendar.itemCloneKeyPressed(e)) {
                    return
                } else if (e.ctrlKey) return;
                this.popupMode = this.calendar.popups.get("ItemsCueForm");
                if (this.calendar.allowInplaceEdit && !this.item.locked && !this.popupMode) {
                    if (this.calendar.onItemInplaceEditStart(new cd(this.item))) {
                        if (this.clickTimer) clearTimeout(this.clickTimer);
                        this.clickTimer = setTimeout(function() {
                            a.inplaceEdit()
                        }, 500)
                    }
                }
            }
        }, {
            key: 'onDoubleClick',
            value: function onDoubleClick(e) {
                clearTimeout(this.clickTimer)
            }
        }, {
            key: 'inplaceEdit',
            value: function inplaceEdit() {
                var a = this;
                if (this.view.inplaceEditing || this.appointment.Dom.inplaceInput || this.stopped) {
                    return
                }
                this.view.inplaceEditing = true;
                this.view._selectionPaused = true;
                var b = this.appointment.Dom.header.parentNode;
                if (b) {
                    var d = document.createElement("input");
                    d.type = "text";
                    d.className = "mfp-inplace";
                    d.value = this.appointment.item.subject;
                    this.inplaceInputFocusHandler = function(e) {
                        return a.onInplaceInputFocus(e)
                    };
                    d.addEventListener('focus', this.inplaceInputFocusHandler);
                    this.inplaceInputBlurHandler = function(e) {
                        return a.onInplaceInputBlur(e)
                    };
                    d.addEventListener('blur', this.inplaceInputBlurHandler);
                    this.inplaceInputKeyUpHandler = function(e) {
                        return a.onInplaceInputKeyUp(e)
                    };
                    d.addEventListener('keyup', this.inplaceInputKeyUpHandler);
                    Array.prototype.forEach.call(b.childNodes, function(c) {
                        c.style.display = "none"
                    });
                    b.appendChild(d);
                    this.appointment.Dom.inplaceInput = d;
                    setTimeout(function() {
                        a.focusInput()
                    }, 100)
                }
                return true
            }
        }, {
            key: 'onInplaceInputFocus',
            value: function onInplaceInputFocus(e) {
                e.target.value = e.target.value;
                e.target.select()
            }
        }, {
            key: 'onInplaceInputBlur',
            value: function onInplaceInputBlur(e, a) {
                if (this.view.inplaceEditing == false || this.appointment.Dom.inplaceInput == null) return;
                this.view._selectionPaused = false;
                var b = this.calendar.onItemInplaceEditEnd(new cd(this.item));
                if (b === false) a = b;
                if (a !== false) {
                    if (this.item.subject != this.appointment.Dom.inplaceInput.value) {
                        var c = {
                            subject: this.appointment.Dom.inplaceInput.value
                        };
                        this.clearInput();
                        this.calendar.editItem(this.item, c, true)
                    } else {
                        this.clearInput()
                    }
                } else {
                    this.clearInput()
                }
                delete this.appointment.Dom.inplaceInput;
                this.view.inplaceEditing = false
            }
        }, {
            key: 'onInplaceInputKeyUp',
            value: function onInplaceInputKeyUp(e) {
                if (e.keyCode === 13) {
                    this.onInplaceInputBlur(e, true);
                    return true
                }
                if (e.keyCode === 27) {
                    this.onInplaceInputBlur(e, false);
                    return true
                }
            }
        }, {
            key: 'clearInput',
            value: function clearInput() {
                Array.prototype.forEach.call(this.appointment.Dom.header.parentNode.childNodes, function(c) {
                    c.style.display = ""
                });
                if (this.appointment.Dom.inplaceInput !== null) {
                    this.appointment.Dom.inplaceInput.removeEventListener('focus', this.inplaceInputFocusHandler);
                    this.appointment.Dom.inplaceInput.removeEventListener('blur', this.inplaceInputBlurHandler);
                    bz.removeNode(this.appointment.Dom.inplaceInput)
                }
            }
        }, {
            key: 'focusInput',
            value: function focusInput() {
                if (this.appointment) {
                    if (this.appointment.Dom.inplaceInput) {
                        try {
                            this.appointment.Dom.inplaceInput.focus();
                            this.appointment.Dom.inplaceInput.select()
                        } catch (ex) {}
                    }
                }
            }
        }]);
        return co
    }();
    var cp = function() {
        function cp(a) {
            br(this, cp);
            if (a.prototype) {
                this.createPart(a)
            } else if (a.create) {
                this.create(a)
            } else if (a.edit) {
                return this.edit(a)
            } else if (a.occurrence) {
                this.createOccurrence(a)
            }
            if (!this.calendar.itemSettings.showItems || this.item.visible == false) {
                this.Dom.element.style.display = 'none'
            }
            this.attachHandlers();
            this.inplaceEdit = new co(this.view, this);
            return this
        }
        bs(cp, [{
            key: 'dispose',
            value: function dispose() {
                this.inplaceEdit.dispose();
                this.clearHandlers();
                bz.removeNode(this.Dom.wrapper, this.view.getElement())
            }
        }, {
            key: 'clearHandlers',
            value: function clearHandlers() {
                this.element.removeEventListener('mousedown', this.mouseDownHandler);
                this.element.removeEventListener('mouseup', this.mouseUpHandler);
                this.element.removeEventListener('click', this.clickHandler);
                this.element.removeEventListener('dblclick', this.doubleClickHandler)
            }
        }, {
            key: 'attachHandlers',
            value: function attachHandlers() {
                var a = this;
                this.clearHandlers();
                this.mouseDownHandler = function(e) {
                    return a.onMouseDown(e)
                };
                this.element.addEventListener('mousedown', this.mouseDownHandler);
                this.mouseUpHandler = function(e) {
                    return a.onMouseUp(e)
                };
                this.element.addEventListener('mouseup', this.mouseUpHandler);
                this.clickHandler = function(e) {
                    return a.onClick(e)
                };
                this.element.addEventListener('click', this.clickHandler);
                this.doubleClickHandler = function(e) {
                    return a.onDoubleClick(e)
                };
                this.element.addEventListener('dblclick', this.doubleClickHandler)
            }
        }, {
            key: 'create',
            value: function create(a) {
                this.view = a.view;
                this.calendar = this.view.calendar;
                this.item = a.item;
                this.orientation = this.view.orientation || 0;
                this.isHeader = a.isHeader || false;
                this.length = this.getLength(this.item);
                var b = this.createVisual()
            }
        }, {
            key: 'createPart',
            value: function createPart(a) {
                this.view = a.prototype.view;
                this.calendar = a.prototype.calendar;
                this.item = a.prototype.item;
                var b = a.prototype.Dom.wrapper.cloneNode(true);
                var c = bz.firstRealChild(b);
                var d = bz.firstRealChild(c);
                var e = c.querySelector('.mfp-subject');
                var f = c.querySelector('.mfp-details');
                this.Dom = {
                    element: c,
                    wrapper: b,
                    content: d,
                    header: e,
                    details: f
                };
                if (a.prototype.Dom.post) this.Dom.post = c.querySelector('.mfp-time-indicator');
                this.orientation = a.prototype.view.orientation || 0;
                this.length = this.getLength(this.item);
                this.isPartial = a.isPartial;
                this.partIndex = a.partIndex;
                this.isHeader = a.isHeader || false;
                this.cellIndex = a.cellIndex;
                this.cellsLength = a.cellsLength;
                if (this.cellsLength < 1) {
                    this.cellsLength = 1
                }
                this.startCellIndex = a.startCellIndex;
                this.lastCellIndex = a.lastCellIndex;
                this.monthCellIndex = a.monthCellIndex;
                this.groupColumnIndex = a.groupColumnIndex
            }
        }, {
            key: 'createOccurrence',
            value: function createOccurrence(a) {
                this.view = a.view;
                this.calendar = this.view.calendar;
                this.isHeader = a.isHeader;
                this.item = a.item;
                this.orientation = this.view.orientation || 0;
                this.length = this.getLength(this.item);
                var b = this.calendar.getAppointmentById(a.item.id, a.item.occurrenceIndex);
                if (b !== null && (typeof b === 'undefined' ? 'undefined' : bq(b)) !== undefined) {
                    this.Dom = b.Dom
                } else {
                    var c = this.calendar.getAppointmentById(a.item.id, -1);
                    if (c !== null && (typeof c === 'undefined' ? 'undefined' : bq(c)) !== undefined) {
                        var d = this.createVisual(c)
                    } else {
                        var d = this.createVisual()
                    }
                }
            }
        }, {
            key: 'edit',
            value: function edit(a) {
                this.view = a.view;
                this.calendar = this.view.calendar;
                var b = this.view.getItemAppointment(a.item.item);
                b.removeParts();
                b.isHeader = a.isHeader;
                b.length = this.getLength(b.item);
                b.orientation = b.view.orientation || 0;
                if (this.calendar.showTooltips === true) {
                    b.element.title = this.calendar.formatTooltip(b.item, this.calendar.itemSettings.tooltipFormat)
                }
                if (b.item.visible == false || !this.calendar.itemSettings.showItems) {
                    b.element.style.display = 'none'
                }
                return b
            }
        }, {
            key: 'createVisual',
            value: function createVisual(a) {
                if (a) {
                    var b = a.Dom.wrapper.cloneNode(true);
                    var c = bz.firstRealChild(b);
                    var d = c.querySelector('.mfp-subject');
                    var e = c.querySelector('.mfp-details');
                    var f = c.querySelector('.mfp-time-indicator');
                    this.Dom = {
                        element: c,
                        wrapper: b,
                        header: d,
                        details: e,
                        post: f
                    };
                    return b
                }
                var g = this.calendar.itemSettings;
                if (this.calendar._currentView == P.Timetable && !this.isHeader) {
                    var b = document.createElement("div");
                    b.className = "mfp-item-wrap";
                    if (this.view.orientation == W.Horizontal) {
                        b.style.position = 'absolute';
                        b.style.height = '100%';
                        b.style.float = 'left'
                    } else b.style.position = 'relative';
                    var c = document.createElement("div");
                    bz.addCssClass(c, "mfp-item-container");
                    var h = bA.generate('APP');
                    c.id = h;
                    if (this.view.orientation == W.Horizontal) {
                        bz.addCssClass(c, "mfp-item-horizontal-detail");
                        c.style.height = '100%'
                    } else {
                        bz.addCssClass(c, "mfp-item-vertical-detail");
                        c.style.width = '100%'
                    }
                    bz.addCssClass(c, this.calendar.itemSettings.cssClass);
                    bz.addCssClass(c, this.item.cssClass);
                    if (this.calendar.showTooltips) {
                        c.title = this.calendar.formatTooltip(this.item, this.calendar.itemSettings.tooltipFormat)
                    }
                    b.appendChild(c);
                    var i = document.createElement("div");
                    bz.addCssClass(i, "mfp-item");
                    c.appendChild(i);
                    var j = document.createElement("div");
                    j.className = "mfp-time-indicator-wrapper";
                    i.appendChild(j);
                    var k = document.createElement("div");
                    k.className = "mfp-time-indicator";
                    j.appendChild(k);
                    var l = document.createElement("div");
                    bz.addCssClass(l, "mfp-item-inwrap");
                    i.appendChild(l);
                    var d = document.createElement("div");
                    d.className = "mfp-subject";
                    l.appendChild(d);
                    var e = document.createElement("div");
                    e.className = "mfp-details";
                    l.appendChild(e);
                    this.Dom = {
                        element: c,
                        content: i,
                        wrapper: b,
                        header: d,
                        details: e,
                        post: k
                    };
                    return b
                } else if (this.calendar.currentView == P.List && this.view.orientation == W.Vertical || this.calendar.currentView == P.Timetable && this.view.orientation == W.Horizontal && this.isHeader) {
                    var b = document.createElement("div");
                    b.className = "mfp-item-wrap";
                    var c = document.createElement("div");
                    bz.addCssClass(c, "mfp-item-container");
                    bz.addCssClass(c, "mfp-item-vertical");
                    var h = bA.generate('APP');
                    c.id = h;
                    c.style.width = g.size + 'px';
                    bz.addCssClass(c, g.cssClass);
                    bz.addCssClass(c, this.item.cssClass);
                    if (this.calendar.showTooltips) {
                        c.title = this.calendar.formatTooltip(this.item, this.calendar.itemSettings.tooltipFormat)
                    }
                    b.appendChild(c);
                    var i = document.createElement("div");
                    bz.addCssClass(i, "mfp-item");
                    c.appendChild(i);
                    var d = document.createElement("div");
                    d.className = "mfp-subject";
                    i.appendChild(d);
                    this.Dom = {
                        element: c,
                        content: i,
                        wrapper: b,
                        header: d
                    };
                    return b
                } else {
                    var b = document.createElement("div");
                    b.className = "mfp-item-wrap";
                    var c = document.createElement("div");
                    bz.addCssClass(c, "mfp-item-container");
                    bz.addCssClass(c, "mfp-item-horizontal");
                    var h = bA.generate('APP');
                    c.id = h;
                    c.style.height = g.size + 'px';
                    bz.addCssClass(c, g.cssClass);
                    bz.addCssClass(c, this.item.cssClass);
                    if (this.calendar.showTooltips) {
                        c.title = this.calendar.formatTooltip(this.item, this.calendar.itemSettings.tooltipFormat)
                    }
                    b.appendChild(c);
                    var i = document.createElement("div");
                    bz.addCssClass(i, "mfp-item");
                    c.appendChild(i);
                    var d = document.createElement("div");
                    d.className = "mfp-subject";
                    i.appendChild(d);
                    this.Dom = {
                        element: c,
                        content: i,
                        wrapper: b,
                        header: d
                    };
                    return b
                }
            }
        }, {
            key: 'recreateVisual',
            value: function recreateVisual() {
                this.view.getContent().appendChild(this.Dom.wrapper);
                bz.removeNode(this.Dom.wrapper, this.view.getContent());
                var a = this.createVisual();
                this.attachHandlers()
            }
        }, {
            key: 'updateVisual',
            value: function updateVisual() {
                if (!this.item.visible) return;
                this.Dom.header.innerHTML = this.calendar.formatTooltip(this.item, this.calendar.itemSettings.titleFormat) || "&nbsp;";
                if (this.Dom.details) this.Dom.details.innerHTML = this.item.details || "&nbsp;";
                var a = this.Dom.element.querySelectorAll(".mfp-arrow, .mfp-icons");
                bz.removeNodes(a, this.Dom.element);
                bz.removeCssClass(this.Dom.element, "mfp-recurrence");
                bz.removeCssClass(this.Dom.element, "mfp-exception");
                bz.removeCssClass(this.Dom.element, "mfp-reminder");
                if (this.calendar.itemSettings.showContinuationArrows != false) {
                    if (this.isPartial && this.partIndex >= 0) {
                        var d = document.createElement("div");
                        bz.addCssClass(d, "mfp-arrow");
                        bz.addCssClass(d, "mfp-prev");
                        d.style.lineHeight = this.calendar.itemSettings.size + "px";
                        var s = document.createElement("span");
                        d.appendChild(s);
                        this.Dom.content.appendChild(d)
                    }
                }
                if (this.item.recurrence) {
                    if (this.item.recurrenceState != 2) {
                        bz.addCssClass(this.Dom.element, "mfp-recurrence")
                    }
                    if (this.item.recurrenceState == 2) {
                        bz.addCssClass(this.Dom.element, "mfp-exception")
                    }
                }
                if (this.item.reminder) {
                    bz.addCssClass(this.Dom.element, "mfp-reminder")
                }
                var d = document.createElement("div");
                bz.addCssClass(d, "mfp-icons");
                var s = document.createElement("span");
                d.appendChild(s);
                this.Dom.content.appendChild(d);
                if (this.calendar.itemSettings.showContinuationArrows != false) {
                    if (this.isPartial && this.partIndex <= 0) {
                        var d = document.createElement("div");
                        d.style.lineHeight = this.calendar.itemSettings.size + "px";
                        bz.addCssClass(d, "mfp-arrow");
                        bz.addCssClass(d, "mfp-next");
                        var s = document.createElement("span");
                        d.appendChild(s);
                        this.Dom.content.appendChild(d)
                    }
                }
                this.updateResizeHandles()
            }
        }, {
            key: 'updateResizeHandles',
            value: function updateResizeHandles(a) {
                var b = this.element.querySelector('div.mfp-item-inwrap') || this.Dom.content;
                var c = this.calendar.itemSettings.resizeBandSize + 'px';
                var d = this.isPartial && this.partIndex >= 0;
                var e = this.isPartial && this.partIndex <= 0;
                var f = this.element.querySelector('div.mfp-resize-start');
                var g = this.element.querySelector('div.mfp-resize-end');
                if (a || d && f || f && (this.item.locked || !this.item.allowChangeStart)) {
                    bz.removeNode(f)
                } else if (!d && !f && !this.item.locked && this.item.allowChangeStart) {
                    f = document.createElement('div');
                    bz.addCssClass(f, 'mfp-resize-start');
                    b.appendChild(f)
                }
                if (a || e && g || f && (this.item.locked || !this.item.allowChangeEnd)) {
                    bz.removeNode(g)
                } else if (!e && !g && !this.item.locked && this.item.allowChangeEnd) {
                    g = document.createElement('div');
                    bz.addCssClass(g, 'mfp-resize-end');
                    b.appendChild(g)
                }
            }
        }, {
            key: 'updateCueVisual',
            value: function updateCueVisual(a) {
                this.element.style.margin = this.calendar.itemSettings.spacing + 'px';
                if (this.calendar.itemSettings.spacing > 0) {}
                this.element.parentNode.style.cssText = '';
                this.element.parentNode.style.visibility = 'visible'
            }
        }, {
            key: 'updateTimeIndicator',
            value: function updateTimeIndicator() {
                if (this.calendar.currentView === P.Timetable && !this.isHeader) {
                    var a = "top";
                    var b = "bottom";
                    var d = this.view.cellHeight;
                    if (this.orientation == W.Horizontal) {
                        a = "left";
                        b = "right";
                        var d = this.view.cellWidth
                    }
                    var e = this.getParts();
                    if (e.length > 0) {
                        var f = 0;
                        var g = 0;
                        for (var i = 0, l = e.length; i < l; i++) {
                            this.Dom.post.style[a] = -1 + "px";
                            this.Dom.post.style[b] = -1 + "px"
                        }
                        if (e[0].cellIndex == undefined) {
                            return
                        }
                        var h = this.view.cells.items()[e[0].cellIndex].columnIndex;
                        var j = Math.max(0, this.item.startTime.__getTime() - this.view._columns.items()[h].startTime._date.getTime());
                        var c = j / this.view.settings.cellTime.milliseconds;
                        var k = c - Math.floor(c);
                        f = parseInt(d * k);
                        if (f == d || f == 0) f = -1;
                        var h = this.view.cells.items()[e[e.length - 1].cellIndex].columnIndex;
                        var j = Math.max(0, this.item.endTime.__getTime() - this.view._columns.items()[h].startTime.__getTime());
                        var c = j / this.view.settings.cellTime.milliseconds;
                        var k = c - Math.floor(c);
                        var g = parseInt(d - d * k);
                        if (this.item.startTime.__getTime() != this.item.endTime.__getTime() && g == d || g == 0) g = -1;
                        var m = this.getGroupParts();
                        if (m.length > 0) {
                            for (var i = 0, l = m.length; i < l; i++) {
                                var n = this.Dom.element.querySelector(".mfp-arrow.mfp-prev");
                                if (!n) this.Dom.post.style[a] = f + "px";
                                var o = this.Dom.element.querySelector(".mfp-arrow.mfp-next");
                                if (!o) this.Dom.post.style[b] = g + "px"
                            }
                        }
                    }
                }
            }
        }, {
            key: 'updateDragVisual',
            value: function updateDragVisual(a) {
                this.removeParts();
                var b = this.element.parentNode;
                if (this.calendar.currentView == P.List && this.view.orientation == W.Vertical) {
                    var c = b.style.width;
                    b.style.cssText = '';
                    b.style.height = a.height + 'px';
                    b.style.width = c;
                    this.element.style.margin = ''
                } else if (this.calendar.currentView != P.Timetable || this.isHeader) {
                    var d = b.style.height;
                    b.style.cssText = '';
                    b.style.width = a.width + 'px';
                    b.style.height = d
                }
                if (this.calendar.currentView != P.Timetable) {
                    b.style.zIndex = 10000;
                    b.style.display = 'none';
                    b.style.position = 'absolute'
                }
                if (this.calendar.currentView == P.Timetable && this.view.orientation == W.Horizontal && this.isHeader) {
                    b.style.float = 'left'
                }
            }
        }, {
            key: 'getData',
            value: function getData(e) {
                var a = this.calendar.currentView === P.List && this.view.orientation === W.Vertical;
                var b = a || this.calendar.currentView === P.Timetable && this.view.orientation === W.Vertical && !this.isHeader;
                var c = {
                    element: this.Dom.wrapper,
                    appointment: this,
                    item: this.item,
                    length: this.length,
                    dragHeight: !a ? this.element.offsetHeight : this.view.dragHeight,
                    startCellIndex: this.startCellIndex,
                    lastCellIndex: this.lastCellIndex,
                    isHeader: this.isHeader,
                    startTime: this.item.startTime,
                    endTime: this.item.endTime,
                    handle: e.target.className.indexOf('mfp-resize') > -1 ? e.target.className.split('mfp-resize-')[1] : null,
                    verticalResize: b
                };
                c.itemStartCell = this.getItemStartCell();
                c.itemLastCell = this.getItemEndCell();
                if (this.calendar._currentView == P.Timetable) {
                    c.startTimeOffset = this.item.startTime._date.valueOf() - c.itemStartCell.startTime._date.valueOf();
                    c.endTimeOffset = this.item.endTime._date.valueOf() - c.itemLastCell.endTime._date.valueOf();
                    c.resource = c.itemStartCell.startTime.resource;
                    c.startTimeOffset2 = this.item.startTime._date.valueOf() - c.itemStartCell.startTime._date.valueOf();
                    c.endTimeOffset2 = this.item.endTime._date.valueOf() - c.itemLastCell.endTime._date.valueOf()
                }
                return c
            }
        }, {
            key: 'getEndTime',
            value: function getEndTime(a) {
                return bx.addTicksToDate(a, this.length)
            }
        }, {
            key: 'getLength',
            value: function getLength(a) {
                var b = bx.millisecondsBetween(a.endTime, a.startTime) || 1;
                return b
            }
        }, {
            key: 'getItemStartCell',
            value: function getItemStartCell() {
                var a = this.getParts();
                if (this.calendar._currentView == P.Timetable) {
                    if (this.isHeader) {
                        return this.view.headerCells.items()[a[0].startCellIndex]
                    } else {
                        return this.view.cells.items()[a[0].startCellIndex]
                    }
                } else {
                    var b = this.view.getTimeCell(this.item.startTime, false, this.groupColumnIndex);
                    if (b == null) {
                        if (this.view.grouped) b = this.view.groupCols[this.groupColumnIndex].cells.items()[0];
                        else b = this.view.cells.items()[0]
                    }
                    return b
                }
            }
        }, {
            key: 'getItemEndCell',
            value: function getItemEndCell() {
                var a = this.getParts();
                if (this.calendar._currentView == P.Timetable) {
                    if (this.isHeader) return this.view.headerCells.items()[a[a.length - 1].lastCellIndex];
                    return this.view.cells.items()[a[a.length - 1].lastCellIndex]
                } else {
                    var b = this.view.getTimeCell(this.item.endTime, true, this.groupColumnIndex);
                    if (b == null) {
                        if (this.view.grouped) b = this.view.groupCols[this.groupColumnIndex].cells.items()[this.view.groupCols[this.groupColumnIndex].cells.count() - 1];
                        else b = this.view.cells.items()[this.view.cells.count() - 1]
                    }
                    return b
                }
            }
        }, {
            key: 'getParts',
            value: function getParts() {
                return this.view.getItemElements(this.item)
            }
        }, {
            key: 'getGroupParts',
            value: function getGroupParts() {
                var a = this.getParts();
                var b = [];
                if (a.length == 0) {
                    return b
                }
                var c = [];
                c.push(a[0]);
                var d = a[0].resource;
                for (var i = 1, l = a.length; i < l; i++) {
                    var e = this.view.cells.items()[a[i].startCellIndex].resource;
                    if (e != d) {
                        b.push(c);
                        c = []
                    }
                    c.push(a[i]);
                    d = e
                }
                b.push(c);
                return b
            }
        }, {
            key: 'removeParts',
            value: function removeParts() {
                if (this.isPartial) {
                    var a = this.view.getItemElements(this.item);
                    for (var i = 0, l = a.length; i < l; i++) {
                        if (a[i] != this) {
                            this.view.removeAppointment(a[i])
                        }
                    }
                    if (this.view.unit == R.Day) {
                        this.cellsLength = bx.daysBetween(this.item.startTime, this.item.endTime)
                    }
                    this.isPartial = false
                }
            }
        }, {
            key: 'onMouseUp',
            value: function onMouseUp(e) {
                var a = this.calendar.selectManager.resource;
                if (this.view._selecting) {
                    this.calendar.selectManager.stopSelect();
                    this.view._selecting = false;
                    e.stopPropagation()
                }
                if (this.view._dragging) {
                    this.calendar.selectManager.stopSelect();
                    this.view.endItemDrag(e, a);
                    this.inplaceEdit.stopped = true;
                    e.stopPropagation()
                } else {
                    if (this.view.drag) {
                        this.view.drag.dispose()
                    }
                }
                if (this.view._resizing) {
                    this.calendar.selectManager.stopSelect();
                    this.view.endItemResize(e, a);
                    this.inplaceEdit.stopped = true;
                    e.stopPropagation()
                } else {
                    if (this.view.resize) {
                        this.view.resize.dispose()
                    }
                }
            }
        }, {
            key: 'onMouseDown',
            value: function onMouseDown(e) {
                if (!this.calendar.enabled) {
                    return
                }
                if (e.button == 0) {
                    this.inplaceEdit.stopped = false;
                    this.view.selectItem(e, this.getData(e))
                }
                e.stopPropagation()
            }
        }, {
            key: 'onClick',
            value: function onClick(e) {
                if (e.button == 0) {
                    this.calendar.onItemClick(new cd(this.item));
                    if (this.calendar.itemCloneKeyPressed(e)) this.calendar.cloneItem(this.item);
                    e.stopPropagation()
                }
            }
        }, {
            key: 'onDoubleClick',
            value: function onDoubleClick(e) {
                if (e.button == 0) {
                    if (this.calendar.onItemDoubleClick(new cd(this.item))) {
                        if (this.calendar.useForms && this.calendar.enabled) {
                            if (!this.view._selectionPaused) {
                                var p = new cn(this.view.calendar, this.item, 'edit');
                                p.showForm()
                            }
                        }
                    }
                    e.stopPropagation()
                }
            }
        }, {
            key: 'element',
            get: function get$$1() {
                return this.Dom.element
            }
        }, {
            key: 'isMilestone',
            get: function get$$1() {
                return this.item.startTime._date.valueOf() == this.item.endTime._date.valueOf()
            }
        }, {
            key: 'isSelected',
            get: function get$$1() {
                return this.calendar._itemSelection.items.contains(this.item)
            }
        }]);
        return cp
    }();
    var cq = function() {
        function cq(a, b) {
            br(this, cq);
            this._start = a;
            this._end = b
        }
        bs(cq, [{
            key: "equals",
            value: function equals(a) {
                return this.start.equals(a.start) && this.end.equals(a.end)
            }
        }, {
            key: "contains",
            value: function contains(a) {
                if (this.start.valueOf() <= a.start.valueOf() && this.end.valueOf() >= a.end.valueOf()) return true;
                return false
            }
        }, {
            key: "intersects",
            value: function intersects(a) {
                if (a.start.valueOf() < this.end.valueOf() && a.start.valueOf() > this.start.valueOf()) return true;
                if (a.end.valueOf() < this.end.valueOf() && a.end.valueOf() > this.start.valueOf()) return true;
                return false
            }
        }, {
            key: "start",
            get: function get$$1() {
                return this._start
            },
            set: function set$$1(a) {
                this._start = a
            }
        }, {
            key: "end",
            get: function get$$1() {
                return this._end
            },
            set: function set$$1(a) {
                this._end = a
            }
        }, {
            key: "isEmpty",
            get: function get$$1() {
                return this.start == null
            }
        }]);
        return cq
    }();
    var cr = function() {
        function cr(a, b) {
            var c = this;
            br(this, cr);
            this.draggable = b.element;
            this.data = b;
            this.view = a;
            this.offsetLeft = this.view.offsetLeft;
            this.calendar = a.calendar;
            this._element = a.getContainer();
            this.resource = this.view.groupResources ? this.view.groupResources[this.data.appointment.groupColumnIndex] : null;
            this.mouseMoveHandler = function(e) {
                return c.onMouseMove(e)
            };
            document.addEventListener('mousemove', this.mouseMoveHandler);
            this.mouseUpHandler = function(e) {
                return c.onMouseUp(e)
            };
            document.addEventListener('mouseup', this.mouseUpHandler)
        }
        bs(cr, [{
            key: 'dispose',
            value: function dispose() {
                if (this.mouseMoveHandler) {
                    document.removeEventListener('mousemove', this.mouseMoveHandler);
                    delete this.mouseMoveHandler
                }
                if (this.mouseUpHandler) {
                    document.removeEventListener('mouseup', this.mouseUpHandler);
                    delete this.mouseUpHandler
                }
                this.view.dragContainer = null;
                this.calendar.changeCursor()
            }
        }, {
            key: 'onMouseMove',
            value: function onMouseMove(e) {
                if (!this.view._dragging) return;
                this.doDrag(e);
                e.stopPropagation();
                return true
            }
        }, {
            key: 'onMouseUp',
            value: function onMouseUp(e) {
                if (!this.view._dragging) return;
                this.calendar.selectManager.stopSelect();
                this.view.endItemDrag(e, this.resource)
            }
        }, {
            key: 'doDrag',
            value: function doDrag(e) {
                this.resource = this.calendar.checkResource(e, this.resource);
                var a = this.view.getCellIndexAt(e.clientX, e.clientY, this.resource);
                var c;
                var b = {};
                if (a != null) {
                    var d = this.view.cells.items()[a].startTime;
                    b = {
                        startTime: d,
                        endTime: bx.addMilliseconds(d, this.data.appointment.getLength(this.data.item))
                    }
                }
                if (this.calendar.onItemModifying(new ce(this.data.item, b, bk.Drag))) {
                    if (a == null) {
                        return
                    }
                    if (this.calendar._currentView === P.MonthRange) {
                        var f = this.view.firstVisibleCellOfMonth(a);
                        var g = this.view.lastVisibleCellOfMonth(a);
                        if (a < f || a > g) {
                            e.stopPropagation();
                            return
                        }
                    } else if (a < this.view.firstVisibleCell || a > this.view.lastVisibleCell) {
                        e.stopPropagation();
                        return
                    }
                    c = this.view.getCellAt(e.clientX, e.clientY, this.resource);
                    if (this.calendar._currentView === P.Timetable) this.view.updateDrag(this.data.appointment, c, e);
                    else this.getCell(c);
                    this.calendar.changeCursor('move')
                } else {
                    c = this.view.cells.items()[this.data.startCellIndex];
                    this.getCell(c);
                    this.calendar.changeCursor('not-allowed')
                }
            }
        }, {
            key: 'getCell',
            value: function getCell(c) {
                if (c) {
                    var a = c.title;
                    if (a) {
                        var b = bz.getRelativeBounds(a, this._element);
                        if (this.calendar._currentView === P.ResourceView) this.draggable.style.top = this.getY(c, b.x, b.y) + 'px';
                        else this.draggable.style.top = this.getY(c, b.x, b.y + b.height) + 'px';
                        if (this.calendar.view.orientation === W.Vertical) this.draggable.style.left = this.getX(c, b.x, b.y + b.height) + 'px';
                        else this.draggable.style.left = b.x + 'px';
                        this.draggable.style.display = 'block'
                    }
                }
            }
        }, {
            key: 'getX',
            value: function getX(a, x, y) {
                var b = 0;
                var w = this.calendar.itemSettings.size;
                var n = 0;
                if (this.calendar.view.orientation === W.Vertical) {
                    n = this.view.getDragOffset(a, this.data.appointment)
                }
                if (n > b) {
                    b = n
                }
                if (b < this.view.itemsCount) {
                    this.draggable.style.visibility = 'visible'
                } else {
                    this.draggable.style.visibility = 'hidden'
                }
                b *= w;
                x += b;
                x += this.calendar.itemSettings.spacing * n + this.calendar.itemSettings.spacing;
                return x
            }
        }, {
            key: 'getY',
            value: function getY(a, x, y) {
                var b = 0;
                var h = this.data.dragHeight;
                var n = 0;
                if (this.calendar._currentView !== P.List || this.calendar.view.orientation === W.Horizontal) {
                    n = this.view.getDragOffset(a, this.data.appointment)
                }
                if (n > b) b = n;
                if (b < this.view.getItemsCount(a)) this.draggable.style.visibility = 'visible';
                else this.draggable.style.visibility = 'hidden';
                b = b * h;
                y = y + b;
                y = y + this.calendar.itemSettings.spacing * n;
                return y
            }
        }]);
        return cr
    }();
    var cs = function() {
        function cs(a, b) {
            var c = this;
            br(this, cs);
            if (a.dragWidth === undefined) {
                a.getDimensions()
            }
            this._dragWidth = a.dragWidth;
            this.data = b;
            this.item = b.item;
            this.view = a;
            this.appointment = b.appointment;
            this.calendar = b.appointment.calendar;
            this._element = b.appointment.Dom.wrapper;
            this._container = this.view.getContainer();
            this.mouseMoveHandler = function(e) {
                return c.onMouseMove(e)
            };
            this._container.addEventListener('mousemove', this.mouseMoveHandler);
            this.view.inplaceEditing = false;
            this._dragmode = 'move'
        }
        bs(cs, [{
            key: 'dispose',
            value: function dispose() {
                if (this.mouseMoveHandler) {
                    this._container.removeEventListener('mousemove', this.mouseMoveHandler);
                    delete this.mouseMoveHandler
                }
                this.view.drag = null
            }
        }, {
            key: 'onMouseMove',
            value: function onMouseMove(e) {
                if (this.mouseMoved(e)) {
                    if (this._dragmode != null && this.view._dragging === false && this.view._selecting) return this.doDrag(e)
                }
            }
        }, {
            key: 'mouseMoved',
            value: function mouseMoved(e) {
                var a = bz.getCursorPosition(e, this._container);
                var b = this.data.startPos;
                if (Math.abs(a.x - b.x) > 0) return true;
                if (Math.abs(a.y - b.y) > 0) return true;
                return false
            }
        }, {
            key: 'doDrag',
            value: function doDrag(e) {
                if (this.view.inplaceEditing) return;
                var a = bz.getCursorPosition(e, this._container);
                if (this._dragmode === 'move' && this.view._dragging === false) {
                    if (this.calendar.onItemModifying(new ce(this.item, {}, bk.Drag))) {
                        this.addDraggable(e, true)
                    }
                    return true
                }
            }
        }, {
            key: 'addDraggable',
            value: function addDraggable(e) {
                if (!this.item) return;
                if (!this.item.allowMove || this.item.locked) return true;
                var a = bz.getCursorPosition(e, this._container, this._scroller);
                this.appointment.updateDragVisual({
                    width: this._dragWidth,
                    height: this.data.dragHeight
                });
                if (this.data.popupMode) {
                    this.calendar.popups.get('ItemsCueForm').closeForm()
                }
                var b = this._element.parentNode;
                if (this.calendar._currentView != P.Timetable) {
                    this._container.appendChild(this._element)
                }
                if (this.calendar._currentView === P.ResourceView) {
                    b.innerHTML = '&nbsp;'
                }
                this.view._dragging = true;
                this.view.dragContainer = new cr(this.view, this.data)
            }
        }]);
        return cs
    }();
    var ct = function() {
        function ct(a, b) {
            br(this, ct);
            this.view = a;
            this._container = this.view.getContainer();
            this.element = b.element;
            this.startCell = b.startCell;
            this.endCell = b.endCell;
            var c = this.startCell.startTime;
            var d = this.startCell.endTime;
            this.index = b.index;
            if (this.index === 1 && c.compareTo(b.item.startTime) === 1 && b.handle !== 'start') {
                this.index = 0
            }
            if (this.index === -1 && d.compareTo(b.item.endTime) === 1 && b.handle !== 'end') {
                this.index = 0
            }
            this.updateVisual()
        }
        bs(ct, [{
            key: 'dispose',
            value: function dispose() {
                bz.removeNode(this.element, this._container)
            }
        }, {
            key: 'updateVisual',
            value: function updateVisual() {
                var a = this.element.querySelector(".mfp-item");
                var b;
                if (this.index === -1) b = a.querySelectorAll(".mfp-resize-start");
                else if (this.index === 1) b = a.querySelectorAll(".mfp-resize-end");
                else if (this.index === 0) b = a.querySelectorAll(".mfp-resize-start, .mfp-resize-end");
                bz.removeNodes(b, a);
                if (this.view.calendar.itemSettings.showContinuationArrows) {
                    b = this.element.querySelectorAll(".mfp-arrow");
                    bz.removeNodes(b, a);
                    var d, s;
                    if (this.index === -1 || this.index === 0) {
                        d = document.createElement("div");
                        bz.addCssClass(d, "mfp-arrow");
                        bz.addCssClass(d, "mfp-prev");
                        d.style.lineHeight = this.view.calendar.itemSettings.size + "px";
                        s = document.createElement("span");
                        d.appendChild(s);
                        a.appendChild(d)
                    }
                    if (this.index === 0 || this.index === 1) {
                        d = document.createElement("div");
                        d.style.lineHeight = this.view.calendar.itemSettings.size + "px";
                        bz.addCssClass(d, "mfp-arrow");
                        bz.addCssClass(d, "mfp-next");
                        s = document.createElement("span");
                        d.appendChild(s);
                        a.appendChild(d)
                    }
                }
            }
        }]);
        return ct
    }();
    var cu = function() {
        function cu(a, b) {
            var c = this;
            br(this, cu);
            this.data = b;
            this.view = a;
            this.calendar = a.calendar;
            this._element = a.getContainer();
            this.resource = this.view.resources ? this.view.resources[this.data.appointment.groupColumnIndex] : null;
            this.parts = [];
            this.startCell = this.data.itemStartCell;
            this.endCell = this.data.itemLastCell;
            this.mouseMoveHandler = function(e) {
                return c.onMouseMove(e)
            };
            document.addEventListener('mousemove', this.mouseMoveHandler);
            this.mouseUpHandler = function(e) {
                return c.onMouseUp(e)
            };
            document.addEventListener('mouseup', this.mouseUpHandler);
            this.cursor = b.verticalResize ? 'n-resize' : 'w-resize';
            this.calendar.changeCursor(this.cursor)
        }
        bs(cu, [{
            key: 'dispose',
            value: function dispose() {
                if (this.mouseMoveHandler) {
                    document.removeEventListener('mousemove', this.mouseMoveHandler);
                    delete this.mouseMoveHandler
                }
                if (this.mouseUpHandler) {
                    document.removeEventListener('mouseup', this.mouseUpHandler);
                    delete this.mouseUpHandler
                }
                this.view.resizeContainer = null;
                this.calendar.changeCursor()
            }
        }, {
            key: 'onMouseMove',
            value: function onMouseMove(e) {
                if (!this.view._resizing) return;
                this.doResize(e);
                e.stopPropagation();
                return true
            }
        }, {
            key: 'onMouseUp',
            value: function onMouseUp(e) {
                if (!this.view._resizing) return;
                this.calendar.selectManager.stopSelect();
                this.view.endItemResize(e, this.resource)
            }
        }, {
            key: 'doResize',
            value: function doResize(e) {
                this.resource = this.calendar.checkResource(e, this.resource);
                var a = this.view.getCellIndexAt(e.clientX, e.clientY, this.resource);
                var b = {};
                if (a !== null) {
                    var d = this.view.cells.items()[a].startTime;
                    b = {
                        startTime: d,
                        endTime: bx.addMilliseconds(d, this.data.appointment.getLength(this.data.item))
                    }
                }
                if (this.calendar.onItemModifying(new ce(this.data.item, b, bk.Resize))) {
                    if (a === null) {
                        return
                    }
                    if (this.calendar._currentView === P.MonthRange) {
                        var f = this.view.firstVisibleCellOfMonth(a);
                        var g = this.view.lastVisibleCellOfMonth(a);
                        if (a < f || a > g) {
                            e.stopPropagation();
                            return
                        }
                    } else if (a < this.view.firstVisibleCell || a > this.view.lastVisibleCell) {
                        e.stopPropagation();
                        return
                    }
                    var h = this.view.getCellAt(e.clientX, e.clientY, this.resource);
                    if (this.calendar.currentView === P.Timetable) {
                        this.view.updateResize(this.data.appointment, h, e)
                    } else {
                        this.getCell(h);
                        this.calendar.changeCursor(this.cursor)
                    }
                } else {
                    if (this.calendar.currentView != P.Timetable) {
                        var c = this.view.cells.items()[this.data.startCellIndex];
                        this.getCell(c);
                        this.calendar.changeCursor('not-allowed')
                    }
                }
            }
        }, {
            key: 'getCell',
            value: function getCell(a) {
                if (this.calendar.currentView === P.ResourceView || this.calendar.currentView === P.List) {
                    this.createVPart(a)
                } else {
                    this.clearParts();
                    this.createParts(a)
                }
            }
        }, {
            key: 'clearParts',
            value: function clearParts() {
                for (var i = 0, l = this.parts.length; i < l; i++) {
                    this.parts[i].dispose()
                }
                this.parts = []
            }
        }, {
            key: 'createParts',
            value: function createParts(a) {
                var b = this.calendar._currentView === P.MonthRange;
                var c = b ? a.globalIndex : a.index;
                var d = b ? this.startCell.globalIndex : this.startCell.index;
                var f = b ? this.endCell.globalIndex : this.endCell.index;
                if (this.data.handle === 'start') {
                    if (c < d) {
                        var s = a;
                        var e = this.endCell
                    } else {
                        if (c < f) {
                            var s = a;
                            var e = this.endCell
                        } else {
                            var s = this.endCell;
                            var e = a
                        }
                    }
                }
                if (this.data.handle === 'end') {
                    if (c > f) {
                        var s = this.startCell;
                        var e = a
                    } else {
                        if (c > d) {
                            var s = this.startCell;
                            var e = a
                        } else {
                            var s = a;
                            var e = this.startCell
                        }
                    }
                }
                if (this.data.handle === 'start' || this.data.handle === 'end' && c < d) this.view.itemData.itemStartCell = s;
                else this.view.itemData.itemStartCell = null;
                if (this.data.handle === 'end' || this.data.handle === 'start' && c > f) this.view.itemData.itemLastCell = e;
                else this.view.itemData.itemLastCell = null;
                if (b) {
                    var g = this.view.rows.items().indexOf(this.view.monthCells.items()[s.monthCellIndex]._rows.items()[s.rowIndex]);
                    var h = this.view.rows.items().indexOf(this.view.monthCells.items()[e.monthCellIndex]._rows.items()[e.rowIndex])
                } else {
                    var g = s.rowIndex;
                    var h = e.rowIndex
                }
                for (var i = g, l = h; i <= l; i++) {
                    var j = i === g ? s : this.view.getFirstRowCell(i);
                    var k = i === h ? e : this.view.getLastRowCell(i);
                    var m = i === g ? 1 : i === h ? -1 : 0;
                    if (g === h) m = -2;
                    if (j && k) {
                        this.createPart(j, k, m)
                    }
                }
            }
        }, {
            key: 'createPart',
            value: function createPart(a, b, c) {
                var d = this.data.element.cloneNode(true);
                this._element.appendChild(d);
                var e = {
                    element: d,
                    startCell: a,
                    endCell: b,
                    item: this.data.item,
                    index: c,
                    handle: this.data.handle
                };
                var f = new ct(this.view, e);
                var g = bz.getRelativeBounds(a.title, this._element);
                if (this.view.getScroller()) {
                    g.y -= this.view.getScroller().scrollTop;
                    g.x -= this.view.getScroller().scrollLeft
                }
                var h = bz.getRelativeBounds(b.title, this._element);
                if (this.view.getScroller()) {
                    h.y -= this.view.getScroller().scrollTop;
                    h.x -= this.view.getScroller().scrollLeft
                }
                this.draggable = f;
                d.style.visibility = 'visible';
                d.style.left = g.x + 'px';
                d.style.top = this.getRY(f.startCell, f.endCell, h.x, h.y + h.height, d) + 'px';
                d.style.width = Math.max(h.x + h.width - g.x, g.width) + 'px';
                d.style.display = 'block';
                this.parts.push(f)
            }
        }, {
            key: 'createVPart',
            value: function createVPart(a) {
                if (this.data.handle === 'start') {
                    if (a.index < this.startCell.index) {
                        var s = a;
                        var e = this.endCell
                    } else {
                        if (a.index < this.endCell.index) {
                            var s = a;
                            var e = this.endCell
                        } else {
                            var s = this.endCell;
                            var e = a
                        }
                    }
                }
                if (this.data.handle === 'end') {
                    if (a.index > this.endCell.index) {
                        var s = this.startCell;
                        var e = a
                    } else {
                        if (a.index > this.startCell.index) {
                            var s = this.startCell;
                            var e = a
                        } else {
                            var s = a;
                            var e = this.startCell
                        }
                    }
                }
                if (this.view.grouped && s.groupColIndex !== e.groupColIndex) return;
                if (this.data.handle === 'start' || this.data.handle === 'end' && a.index < this.startCell.index) this.view.itemData.itemStartCell = s;
                else this.view.itemData.itemStartCell = null;
                if (this.data.handle === 'end' || this.data.handle === 'start' && a.index > this.endCell.index) this.view.itemData.itemLastCell = e;
                else this.view.itemData.itemLastCell = null;
                var a = s;
                var b = e;
                var c = bz.getRelativeBounds(a.bgCell, this._element);
                if (this.view.Dom.scroller) {
                    c.y -= this.view.Dom.scroller.scrollTop;
                    c.x -= this.view.Dom.scroller.scrollLeft
                }
                var d = bz.getRelativeBounds(b.bgCell, this._element);
                if (this.view.Dom.scroller) {
                    d.y -= this.view.Dom.scroller.scrollTop;
                    d.x -= this.view.Dom.scroller.scrollLeft
                }
                var f = 0;
                if (this.calendar._currentView === P.List) f = bz.getRelativeBounds(a.title, this._element).height;
                if (!this.draggable) {
                    var g = this.data.element;
                    this._element.appendChild(g);
                    var h = {
                        element: g,
                        startCell: this.startCell,
                        endCell: this.endCell,
                        item: this.data.item,
                        index: 2,
                        handle: this.data.handle
                    };
                    this.draggable = new ct(this.view, h)
                } else {
                    this.draggable.startCell = s;
                    this.draggable.endCell = e;
                    var g = this.draggable.element;
                    g.style.visibility = 'visible';
                    if (this.calendar.view.orientation === W.Vertical) {
                        g.style.left = this.getRX(this.draggable.startCell, this.draggable.endCell, d.x, d.y + d.height, g) + 'px';
                        g.style.height = Math.max(d.y + d.height - c.y - f, c.height - f) + 'px';
                        g.style.top = this.getY(this.draggable.startCell, c.x, c.y + f) + 'px'
                    } else {
                        g.style.top = this.getRY(this.draggable.startCell, this.draggable.endCell, c.x, c.y + f, g) + 'px';
                        g.style.left = c.x + 'px';
                        g.style.width = Math.max(d.x + d.width - c.x, c.width) + 'px'
                    }
                    g.style.display = 'block'
                }
            }
        }, {
            key: 'getX',
            value: function getX(a, x, y, b) {
                var c = 0;
                var w = this.calendar.itemSettings.size;
                var n = 0;
                if (this.calendar.view.orientation === W.Vertical) {
                    n = this.view.getDragOffset(a, this.data.appointment)
                }
                if (n > c) {
                    c = n
                }
                if (c >= this.view.itemsCount) {
                    b.style.visibility = 'hidden'
                }
                c *= w;
                x += c;
                x += this.calendar.itemSettings.spacing * n + this.calendar.itemSettings.spacing;
                return x
            }
        }, {
            key: 'getY',
            value: function getY(a, x, y, b) {
                var c = 0;
                var h = this.data.dragHeight;
                var n = 0;
                if (this.calendar._currentView !== P.List || this.calendar.view.orientation === W.Horizontal) {
                    n = this.view.getDragOffset(a, this.data.appointment)
                }
                if (n > c) c = n;
                if (c >= this.view.getItemsCount(a)) {
                    b.style.visibility = 'hidden'
                }
                c = c * h;
                y = y + c;
                y = y + this.calendar.itemSettings.spacing * n;
                return y
            }
        }, {
            key: 'getRX',
            value: function getRX(a, b, x, y, c) {
                var d = 0;
                for (var i = a.cellIndex, l = b.cellIndex; i <= l; i++) {
                    var e = this.getX(this.view.cells.items()[i], x, y, c);
                    if (e > d) d = e
                }
                return d
            }
        }, {
            key: 'getRY',
            value: function getRY(a, b, x, y, c) {
                var d = 0;
                var e = this.calendar._currentView === P.MonthRange ? a.globalIndex : a.index;
                var f = this.calendar._currentView === P.MonthRange ? b.globalIndex : b.index;
                if (this.view.grouped) {
                    e = a.cellIndex;
                    f = b.cellIndex
                }
                for (var i = e, l = f; i <= l; i++) {
                    var g = this.getY(this.view.cells.items()[i], x, y, c);
                    if (g > d) d = g
                }
                return d
            }
        }]);
        return cu
    }();
    var cv = function() {
        function cv(a, b) {
            var c = this;
            br(this, cv);
            if (a.dragWidth === undefined) {
                a.getDimensions()
            }
            this._dragWidth = a.dragWidth;
            this.data = b;
            this.item = b.item;
            this.view = a;
            this.appointment = b.appointment;
            this.calendar = b.appointment.calendar;
            this._element = b.appointment.Dom.wrapper;
            this._container = this.view.getContainer();
            this.mouseMoveHandler = function(e) {
                return c.onMouseMove(e)
            };
            this._container.addEventListener('mousemove', this.mouseMoveHandler);
            this.view.inplaceEditing = false;
            this._mode = this.data.handle
        }
        bs(cv, [{
            key: 'dispose',
            value: function dispose() {
                if (this.mouseMoveHandler) {
                    this._container.removeEventListener('mousemove', this.mouseMoveHandler);
                    delete this.mouseMoveHandler
                }
                this.view.resize = null
            }
        }, {
            key: 'onMouseMove',
            value: function onMouseMove(e) {
                if (this.mouseMoved(e)) {
                    if (this._mode != null && this.view._resizing === false && this.view._selecting) return this.doResize(e)
                }
            }
        }, {
            key: 'mouseMoved',
            value: function mouseMoved(e) {
                var a = bz.getCursorPosition(e, this._container);
                var b = this.data.startPos;
                if (Math.abs(a.x - b.x) > 0) return true;
                if (Math.abs(a.y - b.y) > 0) return true;
                return false
            }
        }, {
            key: 'doResize',
            value: function doResize(e) {
                if (this.view.inplaceEditing) return;
                var a = bz.getCursorPosition(e, this._container);
                if (this._mode && this.view._resizing === false) {
                    if (this.calendar.onItemModifying(new ce(this.item, {}, bk.Resize))) {
                        this.addResizable(e, true)
                    }
                    return true
                }
            }
        }, {
            key: 'addResizable',
            value: function addResizable(e) {
                if (!this.item) return;
                if (!this.item.allowMove || this.item.locked) return true;
                var a = bz.getCursorPosition(e, this._container, this._scroller);
                this.appointment.updateDragVisual({
                    width: this._dragWidth,
                    height: this.data.dragHeight
                });
                var b = this._element.parentNode;
                if (this.calendar._currentView !== P.Timetable) {
                    this._container.appendChild(this._element)
                }
                if (this.calendar._currentView === P.ResourceView) {
                    b.innerHTML = '&nbsp;'
                }
                this.view._resizing = true;
                this.view.resizeContainer = new cu(this.view, this.data)
            }
        }]);
        return cv
    }();
    var cw = function(m) {
        bu(cw, m);

        function cw(a, b) {
            br(this, cw);
            var c = bv(this, (cw.__proto__ || Object.getPrototypeOf(cw)).call(this, a, b));
            c._id = "NewForm";
            c._type = 'new';
            c.cssClass = "mfp-popup-new";
            c._headerText = c.localInfo.newFormHeader;
            return c
        }
        bs(cw, [{
            key: 'drawContent',
            value: function drawContent() {
                bt(cw.prototype.__proto__ || Object.getPrototypeOf(cw.prototype), 'drawContent', this).call(this);
                var a = this.getContent();
                var b = this.item.startTime.clone();
                var c = this.item.endTime.clone();
                var d = this.item.endTime.__getTimezoneOffset() - this.item.startTime.__getTimezoneOffset();
                var e = this.item.endTime._date.valueOf() - this.item.startTime._date.valueOf();
                var f = 86400000 + d * 60 * 1000;
                var g;
                var i = "";
                if (e < f) {
                    i = '{0}<br>{1} - {2}';
                    g = String.format(i, b.toString(this.formatInfo.dateFormats.longDate, this.formatInfo), b.toString(this.formatInfo.dateFormats.longTime, this.formatInfo), c.toString(this.formatInfo.dateFormats.longTime, this.formatInfo))
                } else if (e === f) {
                    if (this.item.allDayEvent) {
                        i = '{0}';
                        g = String.format(i, b.toString(this.formatInfo.dateFormats.longDate, this.formatInfo))
                    } else {
                        i = '{0}<br>{1} - {2}';
                        g = String.format(i, b.toString(this.formatInfo.dateFormats.longDate, this.formatInfo), b.toString(this.formatInfo.dateFormats.longTime, this.formatInfo), c.toString(this.formatInfo.dateFormats.longTime, this.formatInfo))
                    }
                } else {
                    if (this.item.allDayEvent) {
                        c = c.addDays(-1)
                    }
                    i = '{0} - {1}';
                    g = String.format(i, b.toString(this.formatInfo.dateFormats.longDate, this.formatInfo), c.toString(this.formatInfo.dateFormats.longDate, this.formatInfo))
                }
                var h = this.row();
                h.className = "mfp-popup-title";
                h.innerHTML = g;
                a.appendChild(h);
                var j = this.createTextArea({
                    id: "subject",
                    events: {
                        keydown: this._areaKeyDown
                    }
                });
                this.addControl(j);
                j.element.placeholder = "appointment text";
                var k = j.element.style;
                k.height = "80px";
                k.width = "98%";
                var l = this.row();
                l.appendChild(j.element);
                a.appendChild(l);
                a.appendChild(this.divider());
                return a
            }
        }, {
            key: 'drawButtons',
            value: function drawButtons() {
                var a = this;
                var b = this.createButton({
                    id: "btnSave",
                    text: this.localInfo.saveButtonCaption,
                    events: {
                        click: function click(e) {
                            return a.onSaveButtonClick(e)
                        }
                    }
                });
                var c = this.createButton({
                    id: "btnOptions",
                    text: this.localInfo.optionsButtonCaption,
                    events: {
                        click: function click(e) {
                            return a.onOptionsButtonClick(e)
                        }
                    }
                });
                var d = this.row();
                bz.addCssClass(d, "mfp-buttons-row");
                d.appendChild(b.element);
                d.appendChild(c.element);
                this.addControl(b);
                this.addControl(c);
                this._buttons = d;
                return d
            }
        }, {
            key: 'onSaveButtonClick',
            value: function onSaveButtonClick(a) {
                this.item.subject = this.getControlValue("subject");
                this.calendar.createItem(this.item, "NewForm");
                this.closeForm()
            }
        }, {
            key: 'onOptionsButtonClick',
            value: function onOptionsButtonClick(a) {
                this.item.subject = this.getControlValue("subject");
                var f = new cn(this.calendar, this.item, 'new');
                f.showForm();
                this.closeForm()
            }
        }]);
        return cw
    }(cl);
    var cx = function(e) {
        bu(cx, e);

        function cx(a, b, c) {
            br(this, cx);
            var d = bv(this, (cx.__proto__ || Object.getPrototypeOf(cx)).call(this, a, b));
            d._id = "ItemsCueForm";
            d._type = 'cue';
            d.items = b;
            d._headerText = d.localInfo.cueFormHeader + " - " + c.startTime.toString(d.formatInfo.dateFormats.shortDate, d.formatInfo);
            d.cell = c;
            return d
        }
        bs(cx, [{
            key: 'drawContent',
            value: function drawContent() {
                bt(cx.prototype.__proto__ || Object.getPrototypeOf(cx.prototype), 'drawContent', this).call(this);
                bz.addCssClass(this.getElement(), "mfp-cue-popup");
                var a = this.getContent();
                for (var i = 0, l = this.items.length; i < l; i++) {
                    this.items[i].updateCueVisual(this.cell);
                    var b = this.row().appendChild(this.items[i].element.parentNode);
                    a.appendChild(b)
                }
                return a
            }
        }]);
        return cx
    }(cl);
    var cy = function() {
        function cy(a) {
            var b = this;
            br(this, cy);
            this.calendar = a;
            this.Dom = {};
            this.items = [];
            this.cueClickHandler = function(e) {
                return b.onCueClick(e)
            };
            this.buttonClickHandler = function(e) {
                return b.onNavButtonClick(e)
            };
            this.headerClickHandler = function(e) {
                return b.onHeaderClick(e)
            }
        }
        bs(cy, [{
            key: 'getElement',
            value: function getElement() {
                return this.calendar.getElement()
            }
        }, {
            key: 'getContent',
            value: function getContent() {
                if (!this.Dom.content) {
                    this.Dom.content = this.getElement().querySelector("div.mfp-content")
                }
                return this.Dom.content
            }
        }, {
            key: 'getScroller',
            value: function getScroller() {
                return this.getContent()
            }
        }, {
            key: 'getContainer',
            value: function getContainer() {
                return this.getContent()
            }
        }, {
            key: 'getHeader',
            value: function getHeader() {
                if (!this.Dom.header) {
                    this.Dom.header = this.getElement().querySelector("div.mfp-header")
                }
                return this.Dom.header
            }
        }, {
            key: 'getGroupHeader',
            value: function getGroupHeader() {
                return null
            }
        }, {
            key: 'getTimelineHeader',
            value: function getTimelineHeader() {
                return null
            }
        }, {
            key: 'draw',
            value: function draw() {
                this._element = document.createElement("div");
                var a = this.drawHeader();
                this._element.appendChild(a);
                var b = this.drawContent();
                this._element.appendChild(b);
                return this._element
            }
        }, {
            key: 'getItemAppointment',
            value: function getItemAppointment(a) {
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].item.id === a.id && this.items[i].item.occurrenceIndex === a.occurrenceIndex) {
                        return this.items[i]
                    }
                }
                return null
            }
        }, {
            key: 'removeAppointment',
            value: function removeAppointment(a) {
                this.items.splice(this.items.indexOf(a), 1);
                a.dispose()
            }
        }, {
            key: 'clearAppointments',
            value: function clearAppointments() {
                for (var i = 0, l = this.items.length; i < l; i++) {
                    this.items[i].dispose()
                }
                this.items = []
            }
        }, {
            key: 'endSelection',
            value: function endSelection(a) {
                if (this.calendar.useForms && this.calendar.enabled) {
                    var p = new cw(this.calendar, a);
                    p.showForm()
                }
            }
        }, {
            key: 'selectItem',
            value: function selectItem(e, a) {
                if (this._selectionPaused) return;
                this.calendar._itemSelection.clear();
                this.calendar._itemSelection.add(a.item);
                this.itemData = a;
                this._dragging = false;
                this._resizing = false;
                this._selecting = true;
                a.startPos = bz.getCursorPosition(e, this.getContainer());
                a.popupMode = bz.getParent(a.appointment.Dom.wrapper, "mfp-popup") != null;
                if (!a.item.allowMove || a.item.locked) {
                    return true
                }
                if (e.target.className.indexOf('resize') > -1 && !a.popupMode) {
                    this.resize = new cv(this, a);
                    this.resizeStartCell = this.itemData.itemStartCell;
                    this.resizeLastCell = this.itemData.itemLastCell
                } else if (!this.drag) {
                    this.drag = new cs(this, a)
                }
            }
        }, {
            key: 'endItemDrag',
            value: function endItemDrag(a) {
                this.calendar.modifyItem(this.itemData.item, a, bk.Drag);
                this._selecting = false;
                this._dragging = false;
                this.drag.dispose();
                this.dragContainer.dispose();
                this.itemData = null
            }
        }, {
            key: 'endItemResize',
            value: function endItemResize(a) {
                this.calendar.modifyItem(this.itemData.item, a, bk.Resize);
                this._selecting = false;
                this._resizing = false;
                this.resize.dispose();
                this.resizeContainer.dispose();
                this.itemData = null
            }
        }, {
            key: 'cancelInteraction',
            value: function cancelInteraction(a) {}
        }, {
            key: 'placeItems',
            value: function placeItems() {
                for (var i = 0; i < this.items.length; i++) {
                    var a = this.items[i];
                    if (a.cell) {
                        a.hidden = false;
                        a.element.parentNode.style.cssText = '';
                        a.element.style.margin = this.calendar.itemSettings.spacing + 'px';
                        if (this.calendar.itemSettings.spacing > 0) {
                            a.element.style.marginBottom = '0px'
                        }
                        a.cell.appendChild(a.element.parentNode)
                    } else {
                        a.hidden = true;
                        a.item.row = -1
                    }
                }
            }
        }, {
            key: 'getAllItems',
            value: function getAllItems() {
                var a = [];
                var b = this.calendar.schedule.items.items();
                var c = this.itemsStartTime;
                var e = this.itemsEndTime;
                for (var i = 0, l = b.length; i < l; i++) {
                    var f = b[i];
                    if (f.recurrenceState === ba.Master) {
                        var g = c.valueOf() - (f.endTime.valueOf() - f.startTime.valueOf());
                        if (g < 0) g = 0;
                        var h = f.recurrence.generateItems(new bx(new Date(g)), e);
                        var o = f;
                        for (var k = 0, n = h.length; k < n; k++) {
                            var p = h[k];
                            if (p.recurrenceState === ba.Occurrence) {
                                if (this.calendar.currentView !== P.Timetable) {
                                    if (p.allDayEvent) {
                                        var q = bx.millisecondsBetween(o.endTime, o.startTime);
                                        p._endTime = bx.addTicksToDate(p.startTime, q)
                                    } else {
                                        var q = o.endTime.valueOf() - o.startTime.valueOf();
                                        p._endTime = new bx(new Date(p.startTime.valueOf() + q))
                                    }
                                } else {
                                    var d = p.startTime.valueOf() + (o.endTime.valueOf() - o.startTime.valueOf());
                                    p._endTime = new bx(new Date(d))
                                }
                            }
                        }
                        for (var j = 0, m = h.length; j < m; j++) {
                            h[j].isHeader = h[j].allDayEvent || h[j].endTime.valueOf() - h[j].startTime.valueOf() >= this.dayLength;
                            if (this.itemInViewRange(h[j])) a.push(h[j])
                        }
                    } else {
                        if (f.recurrenceState === ba.None) {
                            if (this.itemInViewRange(f)) a.push(f)
                        }
                    }
                }
                this.calendar.applyFilter(a);
                var r = [];
                for (var i = 0, l = a.length; i < l; i++) {
                    var f = a[i];
                    if (f.recurrenceState != ba.Master) {
                        if (f.recurrenceState === ba.None) {
                            var s = this.getItemElements(f);
                            if (s.length === 0) {
                                var s = this.createAppointment(f)
                            }
                            if (s.length > 0) {
                                r = r.concat(s)
                            }
                        } else {
                            var s = this.createOccurrence(f);
                            if (s.length > 0) {
                                r = r.concat(s)
                            }
                        }
                    }
                }
                for (var i = 0, l = r.length; i < l; i++) {
                    if (this.calendar.itemSelection.contains(r[i].item)) bz.addCssClass(r[i].element, "mfp-selected");
                    else bz.removeCssClass(r[i].element, "mfp-selected")
                }
                r.sort(this.calendar.sortAppointments);
                this.items = r;
                this.calendar.setTimer()
            }
        }, {
            key: 'itemInViewRange',
            value: function itemInViewRange(a) {
                var b = [];
                if (this.calendar.currentView === P.Timetable) {
                    if (a.allDayEvent && !this.settings._showDayHeader) return false;
                    for (var i = 0, l = this._columns.count(); i < l; i++) {
                        b.push(this._columns.items()[i].timeRange)
                    }
                } else b.push(new cq(this.itemsStartTime, this.itemsEndTime));
                var c = new cq(a.startTime, a.endTime);
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].contains(c)) return true;
                    if (b[i].intersects(c)) return true
                }
                return false
            }
        }, {
            key: 'createAppointment',
            value: function createAppointment(a) {
                var b = {
                    view: this,
                    create: true,
                    item: a
                };
                b.isHeader = a.endTime.valueOf() - a.startTime.valueOf() >= bx.MillisPerDay;
                var c = new cp(b);
                this.getElement().appendChild(c.element.parentNode);
                return this.updateItem(c, false)
            }
        }, {
            key: 'createOccurrence',
            value: function createOccurrence(a) {
                var b = {
                    view: this,
                    occurrence: true,
                    item: a
                };
                b.isHeader = a.endTime.valueOf() - a.startTime.valueOf() >= bx.MillisPerDay;
                var c = new cp(b);
                this.getElement().appendChild(c.element.parentNode);
                return this.updateItem(c, false)
            }
        }, {
            key: 'itemsContainItem',
            value: function itemsContainItem(a, b) {
                for (var i = 0; i < b.length; i++) {
                    if (b[i].item === a.item) {
                        return true
                    }
                }
                return false
            }
        }, {
            key: 'getItemElements',
            value: function getItemElements(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].item.id === a.id && this.items[i].item.occurrenceIndex === a.occurrenceIndex) {
                        b.push(this.items[i])
                    }
                }
                return b
            }
        }, {
            key: 'getItemsCount',
            value: function getItemsCount(a) {
                return this.itemsCount
            }
        }, {
            key: 'getHiddenItems',
            value: function getHiddenItems() {
                for (var i = 0, l = this.items.length; i < l; i++) {
                    var a = this.items[i];
                    if (a.row >= this.itemsCount) {
                        a.hidden = true;
                        a.item.row = -1
                    }
                }
            }
        }, {
            key: 'isValidCell',
            value: function isValidCell(a) {
                if (a === null) {
                    return false
                }
                if (this.firstVisibleCell !== null && this.firstVisibleCell !== undefined) {
                    if (a < this.firstVisibleCell || a > this.lastVisibleCell) {
                        return false
                    }
                }
                return true
            }
        }, {
            key: 'getCellHeaderAt',
            value: function getCellHeaderAt(a, x, y) {
                if (a.title & a.title != a.bgCell) {
                    var c = bz.getCursorPosition({
                        clientX: x,
                        clientY: y
                    }, a.bgCell);
                    var b = bz.getBounds(a.title);
                    if (c.y < b.height) return a
                }
                return null
            }
        }, {
            key: 'getDragOffset',
            value: function getDragOffset(c, d) {
                var e = this.getContent().querySelectorAll("table.mfp-item-table")[c.rowIndex].querySelectorAll('.mfp-item-row');
                var f = [];
                for (var i = 0, l = e.length; i < l; i++) {
                    f[i] = e[i].clientHeight > 0
                }
                var g = this.getAllItemsInCell(c);
                if (this.itemsContainItem(d, g)) g.splice(g.indexOf(d), 1);
                if (g.length === 0) return 0;
                var h = [];
                for (var i = 0, l = g.length; i < l; i++) {
                    if (g[i].row != -1) h.push(g[i].row)
                }
                h.sort(function(a, b) {
                    return a - b
                });
                var j = f.length;
                var k = 0;
                for (var l = h.length; k < l; k++) {
                    if (k < j && !f[k] || h[k] === k || h.indexOf(k) > -1) continue;
                    return k
                }
                return k
            }
        }, {
            key: 'getCues',
            value: function getCues() {
                this.cues = [];
                var a = this.parent ? this.parent.items : this.items;
                var b = this.parent ? this.itemsCount : this.itemsCount;
                for (var i = 0, l = a.length; i < l; i++) {
                    var c = a[i];
                    if (this.parent && c.monthCellIndex != this.index) continue;
                    if (c.row >= b || c.row === -1) {
                        var d = this.getItemCueCells(c);
                        for (var k = 0; k < d.length; k++) {
                            if (this.cues.indexOf(d[k]) === -1) this.cues.push(d[k])
                        }
                        c.element.parentNode.style.visibility = 'hidden';
                        c.element.parentNode.style.display = 'none'
                    } else c.element.parentNode.style.visibility = 'visible'
                }
            }
        }, {
            key: 'getItemCueCells',
            value: function getItemCueCells(a) {
                var b = [];
                for (var i = a.startCellIndex; i <= a.lastCellIndex; i++) {
                    b.push(i)
                }
                return b
            }
        }, {
            key: 'createCues',
            value: function createCues() {
                this.clearCues();
                if (this.calendar.itemSettings.showCues != false) {
                    var b = this.cueCells;
                    for (var i = 0, l = this.cues.length; i < l; i++) {
                        var c = document.createElement('div');
                        c.className = 'mfp-cue';
                        var a = document.createElement('i');
                        c.appendChild(a);
                        var d = b[this.cues[i]];
                        d.innerHTML = "";
                        d.appendChild(c);
                        c.addEventListener('click', this.cueClickHandler)
                    }
                }
            }
        }, {
            key: 'clearCues',
            value: function clearCues() {
                var a = this.getElement().querySelectorAll(".mfp-cue");
                for (var i = 0, l = a.length; i < l; i++) {
                    a[i].removeEventListener('click', this.cueClickHandler)
                }
                bz.removeNodes(a)
            }
        }, {
            key: 'getCueItems',
            value: function getCueItems(a) {
                var b = [];
                var c = this.parent ? this.parent.items : this.items;
                for (var i = 0, l = c.length; i < l; i++) {
                    if (this.parent && c[i].monthCellIndex != this.index) continue;
                    if (c[i].startCellIndex <= a.index && c[i].lastCellIndex >= a.index) {
                        if (c[i].hidden) {
                            b.push(c[i])
                        }
                    }
                }
                return b
            }
        }, {
            key: 'onCueClick',
            value: function onCueClick(e) {
                if (!this._selectionPaused && !this._dragging) {
                    var a = this.getCellAt(e.clientX, e.clientY);
                    this.calendar.onCueClick(new ca(a));
                    var b = this.getCueItems(a);
                    if (this.calendar.enabled && this.calendar.useForms) {
                        var p = new cx(this.calendar, b, a, null);
                        p.showForm()
                    }
                }
            }
        }, {
            key: 'onHeaderClick',
            value: function onHeaderClick(e) {
                var a = this.getHeaderType(e.target);
                this.calendar.onHeaderClick(new cb(a));
                e.stopPropagation()
            }
        }, {
            key: 'getHeaderType',
            value: function getHeaderType(a) {
                var h = this.getGroupHeader();
                if (h) {
                    if (h.contains(a)) return bo.Group
                }
                h = this.getTimelineHeader();
                if (h) {
                    if (h.contains(a)) return bo.Timeline
                }
                var h = this.getHeader();
                if (h) {
                    if (h.contains(a)) return bo.Main
                }
            }
        }, {
            key: 'onNavButtonClick',
            value: function onNavButtonClick(e) {
                if (this.calendar.enabled) {
                    var a = 1;
                    if (bz.hasCssClass(e.currentTarget, "mfp-button-next-2")) a = 2;
                    else if (bz.hasCssClass(e.currentTarget, "mfp-button-prev")) a = -1;
                    else if (bz.hasCssClass(e.currentTarget, "mfp-button-prev-2")) a = -2;
                    this.calendar.processButtonClick(a)
                }
            }
        }, {
            key: 'onThemeChanged',
            value: function onThemeChanged(a, b) {}
        }, {
            key: 'cueCells',
            get: function get$$1() {
                return this.getContent().querySelectorAll(".mfp-item-table .mfp-cell-header")
            }
        }, {
            key: 'orientation',
            get: function get$$1() {
                return W.Horizontal
            }
        }, {
            key: 'formatInfo',
            get: function get$$1() {
                return this.calendar.formatInfo
            }
        }, {
            key: 'startTime',
            get: function get$$1() {
                return this._startTime
            },
            set: function set$$1(a) {
                this._startTime = a
            }
        }, {
            key: 'endTime',
            get: function get$$1() {
                return this._endTime
            },
            set: function set$$1(a) {
                this._endTime = a
            }
        }, {
            key: 'itemsStartTime',
            get: function get$$1() {
                return this._itemsStartTime
            },
            set: function set$$1(a) {
                this._itemsStartTime = a
            }
        }, {
            key: 'itemsEndTime',
            get: function get$$1() {
                return this._itemsEndTime
            },
            set: function set$$1(a) {
                this._itemsEndTime = a
            }
        }, {
            key: 'settings',
            get: function get$$1() {
                return this._settings
            }
        }, {
            key: 'grouped',
            get: function get$$1() {
                var a = this.calendar.currentView === P.Timetable || this.calendar.currentView === P.List || this.calendar.currentView === P.ResourceView;
                return a && this.calendar.groupType > 0 && this.calendar.groupType < 5
            }
        }, {
            key: 'resources',
            get: function get$$1() {
                return this.calendar.groupResources.items()
            }
        }, {
            key: 'groupResources',
            get: function get$$1() {
                return this.resources
            }
        }]);
        return cy
    }();
    var cz = function() {
        function cz(a, b, c, d) {
            br(this, cz);
            this._startTime = a;
            this._endTime = b;
            this._itemsStartTime = c;
            this._itemsEndTime = d;
            this.cells = new bB()
        }
        bs(cz, [{
            key: 'index',
            get: function get$$1() {
                return this._index
            },
            set: function set$$1(a) {
                this._index = a
            }
        }, {
            key: 'startTime',
            get: function get$$1() {
                return this._startTime
            }
        }, {
            key: 'endTime',
            get: function get$$1() {
                return this._endTime
            }
        }, {
            key: 'itemsStartTime',
            get: function get$$1() {
                return this._itemsStartTime
            },
            set: function set$$1(a) {
                this._itemsStartTime = a
            }
        }, {
            key: 'itemsEndTime',
            get: function get$$1() {
                return this._itemsEndTime
            },
            set: function set$$1(a) {
                this._itemsEndTime = a
            }
        }, {
            key: 'rowOffset',
            get: function get$$1() {
                return this._rowOffset
            },
            set: function set$$1(a) {
                this._rowOffset = a
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                return this._cells
            },
            set: function set$$1(a) {
                this._cells = a
            }
        }]);
        return cz
    }();
    var cA = function() {
        function cA() {
            br(this, cA);
            this._resource = null
        }
        bs(cA, [{
            key: "index",
            get: function get$$1() {
                return this._index
            },
            set: function set$$1(a) {
                this._index = a
            }
        }, {
            key: "cellIndex",
            get: function get$$1() {
                return this._cellIndex
            },
            set: function set$$1(a) {
                this._cellIndex = a
            }
        }, {
            key: "rowIndex",
            get: function get$$1() {
                return this._rowIndex
            },
            set: function set$$1(a) {
                this._rowIndex = a
            }
        }, {
            key: "columnIndex",
            get: function get$$1() {
                return this._columnIndex
            },
            set: function set$$1(a) {
                this._columnIndex = a
            }
        }, {
            key: "startTime",
            get: function get$$1() {
                return this._startTime
            },
            set: function set$$1(a) {
                this._startTime = a
            }
        }, {
            key: "endTime",
            get: function get$$1() {
                return this._endTime
            },
            set: function set$$1(a) {
                this._endTime = a
            }
        }, {
            key: "resource",
            get: function get$$1() {
                return this._resource
            },
            set: function set$$1(a) {
                this._resource = a
            }
        }, {
            key: "bgCell",
            get: function get$$1() {
                return this._bgCell
            },
            set: function set$$1(a) {
                this._bgCell = a
            }
        }, {
            key: "title",
            get: function get$$1() {
                return this._title
            },
            set: function set$$1(a) {
                this._title = a
            }
        }, {
            key: "isHeader",
            get: function get$$1() {
                return this._isHeader
            },
            set: function set$$1(a) {
                this._isHeader = a
            }
        }]);
        return cA
    }();
    var cB = function cB(a, b, c, d, e, f) {
        br(this, cB);
        this.startTime = a;
        this.endTime = b;
        this.headerText = c;
        this.allDayEvent = d;
        this.allowMove = true;
        this.allowChangeStart = true;
        this.allowChangeEnd = true;
        this.locked = false;
        if (e) {
            switch (e.groupType) {
                case bl.FilterByContacts:
                    this.contacts = e.contacts;
                    break;
                case bl.FilterByLocations:
                    this.location = e.locations.items()[0];
                    break;
                case bl.FilterByTasks:
                    this.task = e.tasks.items()[0];
                    break;
                case bl.FilterByResources:
                    this.resources = e.resources;
                    break;
                default:
                    break
            }
            if (f) {
                if (f instanceof bR) {
                    this.location = f
                } else if (f instanceof bQ) {
                    this.contacts = new bO();
                    this.contacts.add(f)
                } else if (f instanceof bT) {
                    this.task = f
                } else if (f instanceof bP) {
                    this.resources = new bO();
                    this.resources.add(f)
                }
            }
        }
        return this
    };
    var cC = function(u) {
        bu(cC, u);

        function cC(a, b, c, d, e, f) {
            br(this, cC);
            var g = bv(this, (cC.__proto__ || Object.getPrototypeOf(cC)).call(this, a));
            g.unit = R.Day;
            if (!b) {
                g.index = 0;
                g._showLeadingDays = a.monthSettings.showPaddingDays;
                g._showTrailingDays = a.monthSettings.showPaddingDays;
                g._maxWeekCount = -1;
                g._date = g.calendar.date
            } else {
                g.parent = b;
                g.index = d;
                g._date = c;
                if (!a.monthSettings.showPaddingDays) {
                    g._showLeadingDays = false;
                    g._showTrailingDays = false
                } else {
                    g._showLeadingDays = e === -1 || e === 2;
                    g._showTrailingDays = e === 1 || e === 2
                }
                g._maxWeekCount = f
            }
            g._settings = g.calendar.monthSettings;
            g.itemsCount = 3;
            g.rowCellsCount = 7;
            g._rows = new bB();
            g.initVars();
            g._dragging = false;
            g._resizing = false;
            g._selecting = false;
            g._selectionPaused = false;
            g.items = [];
            g.Dom = {};
            return g
        }
        bs(cC, [{
            key: 'initVars',
            value: function initVars() {
                this._isSubHeaderVisible = false;
                this._daysPerWeek = 7;
                this._date = this.calendar.getMonthFirstDate(this._date);
                this._startTime = this.calendar.getMonthFirstVisibleDate(this._date);
                var a = 6;
                var d = bx.addDays(this._date, bx.getDaysInMonth(this._date));
                while (d.dayOfWeek !== +this.formatInfo.firstDayOfWeek) {
                    d = bx.addDays(d, 1)
                }
                var t = bw.fromMilliseconds(d - this._startTime);
                a = Math.round(t.days / this._daysPerWeek);
                if (this._settings.leadingWeekCount > 0 && this._showLeadingDays) this._startTime = bx.addDays(this._startTime, -1 * this._settings.leadingWeekCount * this._daysPerWeek);
                if (!this._settings.hideTrailingWeeks) {
                    this._rowsCount = (this._showTrailingDays ? this._settings.leadingWeekCount + (a !== 6 && this._settings.trailingWeekCount > 0 && !this._settings.hideTrailingWeeks ? this._settings.trailingWeekCount - (6 - a) : this._settings.trailingWeekCount) : 0) + (this._settings.hideTrailingWeeks ? a : 6)
                } else this._rowsCount = (this._showTrailingDays ? this._settings.leadingWeekCount : 0) + (this._settings.hideTrailingWeeks ? a : 6);
                if (this._maxWeekCount !== -1) this._rowsCount = this._maxWeekCount;
                this._rowHeight = Math.round(100 / this._rowsCount, 3);
                this._endTime = bx.addDays(this._startTime, this._rowsCount * this._daysPerWeek);
                this.createRows()
            }
        }, {
            key: 'getElement',
            value: function getElement() {
                if (this.parent) {
                    return this.calendar.getElement().querySelectorAll('div.mfp-content')[this.index].parentNode
                }
                return this.calendar.getElement()
            }
        }, {
            key: 'getWeekHeader',
            value: function getWeekHeader() {
                if (!this.Dom.weekHeader) {
                    this.Dom.weekHeader = this.getContent().querySelector('div.mfp-header-weeknumbers')
                }
                return this.Dom.weekHeader
            }
        }, {
            key: 'getDaysHeader',
            value: function getDaysHeader() {
                if (!this.Dom.daysHeader) {
                    this.Dom.daysHeader = this.getHeader().querySelector('div.mfp-header-weekdays')
                }
                return this.Dom.daysHeader
            }
        }, {
            key: 'getRows',
            value: function getRows() {
                if (!this.Dom.rows) {
                    this.Dom.rows = this.getContent().querySelectorAll('div.mfp-week')
                }
                return this.Dom.rows
            }
        }, {
            key: 'getBgCells',
            value: function getBgCells() {
                if (!this.Dom.bgCells) {
                    this.Dom.bgCells = this.getContent().querySelectorAll('div.mfp-bg-cell')
                }
                return this.Dom.bgCells
            }
        }, {
            key: 'createRows',
            value: function createRows() {
                var a = this._showLeadingDays && this._settings.showPaddingItems;
                var b = this._showTrailingDays && this._settings.showPaddingItems;
                var c, rowEnd, realStart, realEnd;
                if (!a && !b) {
                    c = this._date;
                    rowEnd = bx.addDays(this._date, bx.getDaysInMonth(this._date));
                    realStart = c;
                    realEnd = rowEnd
                } else if (a && !b) {
                    c = this._startTime;
                    rowEnd = bx.addDays(this._date, bx.getDaysInMonth(this._date));
                    realStart = c;
                    realEnd = rowEnd
                } else if (!a && b) {
                    c = this._date;
                    rowEnd = this._endTime;
                    realStart = c;
                    realEnd = rowEnd
                } else {
                    c = this._startTime;
                    rowEnd = this._endTime;
                    realStart = c;
                    realEnd = rowEnd
                }
                this.itemsStartTime = realStart;
                this.itemsEndTime = realEnd;
                var j = 0;
                var d = null;
                for (var e = 0; e < this._rowsCount; e++) {
                    c = bx.addDays(this._startTime, e * this._daysPerWeek);
                    rowEnd = bx.addDays(c, this._daysPerWeek);
                    d = new cz(c, rowEnd, c, rowEnd);
                    d.index = e;
                    d.monthCellIndex = this.index;
                    if (realStart >= c && rowEnd > realStart && rowEnd < realEnd || realStart < c && rowEnd >= realEnd && c < realEnd || realStart < c && rowEnd < realEnd) {
                        if (d.startTime < realStart) {
                            d.rowOffset = bx.daysBetween(d.startTime, realStart);
                            d.itemsStartTime = realStart
                        }
                        if (d.endTime > realEnd) {
                            d.rowOffset = -1 * bx.daysBetween(realEnd, d.endTime);
                            d.itemsEndTime = realEnd
                        }
                    } else if (c < realStart && rowEnd <= realStart) {
                        d.itemsStartTime = bx.minValue();
                        d.itemsEndTime = bx.minValue()
                    } else {
                        d.itemsEndTime = realEnd
                    }
                    this._rows.add(d);
                    for (var k = 0, m = this.rowCellsCount; k < m; k++) {
                        var f = bx.addDays(d.startTime, k);
                        var g = bx.addDays(d.startTime, k + 1);
                        var h = new cA();
                        h.index = j;
                        h.cellIndex = k;
                        h.rowIndex = e;
                        h.startTime = f;
                        h.endTime = g;
                        d.cells.add(h);
                        j += 1
                    }
                }
                var l = this._showLeadingDays ? this._rows.items()[0].startTime : this._rows.items()[0].itemsStartTime;
                var n = this._showLeadingDays ? this._rows.items()[this._rows.count() - 1].endTime : this._rows.items()[this._rows.count() - 1].itemsEndTime;
                this.firstVisibleCell = this.getTimeCell(l, false).index;
                this.lastVisibleCell = this.getTimeCell(n, true).index;
                for (var i = 0; i < this.cells.count(); i++) {
                    this.cells.items()[i].visible = this.cells.items()[i].index >= this.firstVisibleCell && this.cells.items()[i].index <= this.lastVisibleCell
                }
            }
        }, {
            key: 'detach',
            value: function detach() {
                if (!this.parent) {
                    var a = this.getHeader().querySelectorAll("a.mfp-button");
                    for (var i = 0; i < a.length; i++) {
                        a[i].removeEventListener('click', this.buttonClickHandler)
                    }
                }
                this.getHeader().removeEventListener("click", this.headerClickHandler);
                if (this.getWeekHeader()) this.getWeekHeader().removeEventListener("click", this.headerClickHandler);
                if (this.getDaysHeader()) this.getDaysHeader().removeEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'attach',
            value: function attach() {
                var a = this.getContent().querySelectorAll("div.mfp-bg-row");
                var b = this.getContent().querySelectorAll("table.mfp-item-table");
                for (var i = 0; i < this._rows.count(); i++) {
                    var c = this._rows.items()[i];
                    c.bgTable = a[i];
                    c.itemTable = b[i];
                    var d = c.bgTable.querySelectorAll("div.mfp-bg-cell");
                    for (var k = 0, m = c.cells.count(); k < m; k++) {
                        var e = c.cells.items()[k];
                        e.bgCell = d[k];
                        e.title = d[k].childNodes[0]
                    }
                }
                this.getContent().querySelector(".mfp-wrap").style.display = "none";
                this.getContent().querySelector(".mfp-wrap").style.display = "flex";
                if (!this.parent) {
                    this.clear();
                    this.init();
                    var f = this.getHeader().querySelectorAll("a.mfp-button");
                    for (var i = 0; i < f.length; i++) {
                        f[i].addEventListener('click', this.buttonClickHandler)
                    }
                }
                this.getHeader().addEventListener("click", this.headerClickHandler);
                if (this.getWeekHeader()) this.getWeekHeader().addEventListener("click", this.headerClickHandler);
                if (this.getDaysHeader()) this.getDaysHeader().addEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'getAllItemsInCell',
            value: function getAllItemsInCell(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].startCellIndex <= a.index && this.items[i].lastCellIndex >= a.index) {
                        if (this.items[i].row < this.itemsCount || this.items[i].row === -1) {
                            b.push(this.items[i])
                        }
                    }
                }
                return b
            }
        }, {
            key: 'getCellAt',
            value: function getCellAt(x, y) {
                var i = this.getCellIndexAt(x, y);
                return this.cells.items()[i]
            }
        }, {
            key: 'getCellIndexAt',
            value: function getCellIndexAt(x, y) {
                if (!this.rowHeight) this.getDimensions();
                var a = bz.getCursorPosition({
                    clientX: x,
                    clientY: y
                }, this.getContent(), this.getScroller());
                var r = Math.floor(a.y / this.rowHeight);
                var c = Math.floor((a.x - this.offsetLeft) / this.calculatedCellWidth);
                if (c >= this.rowCellsCount || c < 0 || r >= this._rows.count() || r < 0) {
                    return null
                }
                return r * this.rowCellsCount + c
            }
        }, {
            key: 'endSelection',
            value: function endSelection(e, a, b) {
                var c = this.cells.items()[a].startTime;
                var d = this.cells.items()[b].endTime;
                var f = new cB(c, d, '', true, this._calendar);
                bt(cC.prototype.__proto__ || Object.getPrototypeOf(cC.prototype), 'endSelection', this).call(this, f)
            }
        }, {
            key: 'endItemDrag',
            value: function endItemDrag(e) {
                var a = this.getCellAt(e.clientX, e.clientY);
                var b = this.cells.items()[this.itemData.startCellIndex];
                if (!a) {
                    a = b
                }
                if (a.index < this.firstVisibleCell) {
                    a = this.cells.items()[this.firstVisibleCell]
                } else if (a.index > this.lastVisibleCell) {
                    a = this.cells.items()[this.lastVisibleCell]
                }
                var c = this.itemData.item;
                var d = this.itemData.appointment;
                var f = bx.setTimeOfDay(c.startTime, a.startTime);
                var g = d.getEndTime(f);
                bt(cC.prototype.__proto__ || Object.getPrototypeOf(cC.prototype), 'endItemDrag', this).call(this, {
                    startTime: f,
                    endTime: g
                })
            }
        }, {
            key: 'endItemResize',
            value: function endItemResize(e) {
                var a = this.itemData.itemStartCell;
                var b = this.itemData.itemLastCell;
                var c = this.getCellAt(e.clientX, e.clientY);
                if (!c) {
                    a = b = null
                }
                var d = this.itemData.item;
                var f = this.itemData.appointment;
                var g = a != null ? bx.setTimeOfDay(d.startTime, a.startTime) : d.startTime;
                var h = b != null ? b.endTime : d.endTime;
                bt(cC.prototype.__proto__ || Object.getPrototypeOf(cC.prototype), 'endItemResize', this).call(this, {
                    startTime: g,
                    endTime: h
                })
            }
        }, {
            key: 'getDimensions',
            value: function getDimensions() {
                var a = bz.getBounds;
                this.cellWidth = a(this.getBgCells()[0]).width;
                this.calculatedCellWidth = a(this.getRows()[0]).width / this.rowCellsCount;
                this.rowHeight = a(this.getRows()[0]).height;
                this.headerHeight = a(bz.firstRealChild(this.getBgCells()[0])).height;
                this.offsetLeft = this._settings.weekHeaderStyle == U.Left ? a(this.getWeekHeader()).width : 0;
                this.dragOffsetLeft = a(this.calendar.getElement()).x;
                this.dragWidth = this.cellWidth;
                this.itemsCount = Math.floor((this.rowHeight - this.headerHeight) / (this.calendar.itemSettings.size + this.calendar.itemSettings.spacing));
                if (this._settings.maxItems) this.itemsCount = Math.min(this._settings.maxItems, this.itemsCount);
                if (this.items) {
                    this.getHiddenItems();
                    if (this.calendar.itemSettings.showItems) {
                        this.getCues();
                        this.createCues()
                    }
                }
            }
        }, {
            key: 'clear',
            value: function clear() {
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-wrap'));
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-row'))
            }
        }, {
            key: 'init',
            value: function init() {
                if (!this.cellWidth) this.getDimensions();
                this.getAllItems();
                this.itemsToPut = this.items.slice();
                for (var i = 0, l = this._rows.count(); i < l; i++) {
                    this.createItemsTable(this._rows.items()[i])
                }
                for (var i = 0; i < this.itemsToPut.length; i++) {
                    var a = this.items[this.items.indexOf(this.itemsToPut[i])];
                    a.cell = null;
                    a.row = -1;
                    a.hidden = true
                }
                this.placeItems();
                if (this.calendar.itemSettings.showItems) {
                    this.getCues();
                    this.createCues()
                }
            }
        }, {
            key: 'createItemsTable',
            value: function createItemsTable(a) {
                var b;
                for (var i = 0, l = this.itemsCount; i < l; i++) {
                    var c = document.createElement('tr');
                    c.className = 'mfp-item-row';
                    var d = 0;
                    while (d < this.rowCellsCount) {
                        b = this.getItemsInCell(a.cells.items()[d], this.itemsToPut);
                        var e = null;
                        if (b.length > 0) e = b[0];
                        if (e !== null) {
                            var f = document.createElement('td');
                            f.className = 'mfp-item-cell';
                            f.colSpan = e.cellsLength;
                            f.style.paddingLeft = this.padding + 'px';
                            f.style.paddingRight = this.padding + 'px';
                            d += e.cellsLength - 1;
                            e.cell = f;
                            e.row = i;
                            this.itemsToPut.splice(this.itemsToPut.indexOf(e), 1)
                        } else {
                            var f = document.createElement('td');
                            f.className = 'mfp-item-cell'
                        }
                        c.appendChild(f);
                        d += 1
                    }
                    a.itemTable.getElementsByTagName("TBODY")[0].appendChild(c)
                }
            }
        }, {
            key: 'updateItem',
            value: function updateItem(a, b) {
                var c = a.item;
                if (!c.visible) {
                    return a
                }
                var d = [];
                var e = [];
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    var f = bx.maxDate(c.startTime, this.itemsStartTime, false);
                    var g = bx.minDate(c.endTime, this.itemsEndTime, true);
                    var h = this.getTimeRows(f, g);
                    for (var j = h.start, m = h.end; j <= m; j++) {
                        var k = bx.maxDate(c.startTime, this._rows.items()[j].itemsStartTime, false);
                        var l = bx.minDate(c.endTime, this._rows.items()[j].itemsEndTime, true);
                        if (k.equals(l)) continue;
                        var n = 0;
                        if (k.compareTo(c.startTime) === 1) n = 1;
                        if (l.compareTo(c.endTime) === -1) n = -1;
                        if (k.compareTo(c.startTime) === 1 && l.compareTo(c.endTime) === -1) n = 0;
                        var o = this.getTimeCell(k, false);
                        var p = this.getTimeCell(l, true);
                        var q = {
                            prototype: a,
                            type: 'part',
                            cellIndex: o.index,
                            cellsLength: p.index - o.index + 1,
                            colIndex: j,
                            isPartial: true,
                            partIndex: n,
                            lastCellIndex: p.index,
                            startCellIndex: o.index
                        };
                        var r = new cp(q);
                        r.composite = true;
                        d.push(r);
                        e.push(a)
                    }
                } else {
                    var s = this.getTimeCell(c.startTime, false);
                    if (c.startTime._date.valueOf() === c.endTime._date.valueOf()) {
                        var p = s
                    } else {
                        var p = this.getTimeCell(c.endTime, true)
                    }
                    a.lastCellIndex = p.index;
                    a.startCellIndex = s.index;
                    a.cellsLength = p.index - s.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = s.index;
                    a.colIndex = s.rowIndex;
                    a.updateVisual()
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b !== false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'getTimeRows',
            value: function getTimeRows(a, b) {
                var c = this.getTimeCell(a, false);
                var d = this.getTimeCell(b, true);
                var e = c == null ? 0 : c.rowIndex;
                var f = d == null ? this._rows.count() - 1 : d.rowIndex;
                return {
                    start: e,
                    end: f
                }
            }
        }, {
            key: 'getTimeCell',
            value: function getTimeCell(a, b) {
                if (a._date.valueOf() < this._startTime._date.valueOf()) return null;
                if (a._date.valueOf() > this._endTime._date.valueOf()) return null;
                var t = bx.setTimeOfDay(this.startTime, a);
                var i = bx.daysBetween(this.startTime, t);
                if (i > this.cells.count()) return null;
                if (i === this.cells.count()) {
                    if (b && a.equals(this.cells.items()[i - 1].endTime)) return this.cells.items()[i - 1];
                    else return null
                }
                if (b && a.equals(this.cells.items()[i].startTime) && i > 0) i -= 1;
                return this.cells.items()[i]
            }
        }, {
            key: 'getTimeCells',
            value: function getTimeCells(a, b, c) {
                var d = null;
                var e = null;
                if (a.valueOf() < this.startTime.valueOf()) {
                    d = this.cells[0]
                } else if (a.valueOf() > this.endTime.valueOf()) {
                    return []
                } else {
                    d = this.getTimeCell(a, false)
                }
                if (b !== null && typeof b !== "undefined" && typeof b._date !== "undefined") {
                    if (b.valueOf() > this.endTime.valueOf()) {
                        e = this.cells.items()[this.cells.count() - 1]
                    } else if (b.valueOf() < this.startTime.valueOf()) {
                        return []
                    } else {
                        e = this.getTimeCell(b, c)
                    }
                } else {
                    e = d
                }
                if (d && e) {
                    return this.cells.items().slice(d.index, e.index + 1)
                }
                return []
            }
        }, {
            key: 'isComposite',
            value: function isComposite(a) {
                if (a.startTime._date.valueOf() === a.endTime._date.valueOf()) {
                    return false
                }
                var b = this.getTimeCell(a.startTime, false);
                var c = this.getTimeCell(a.endTime, true);
                if (b === null || c === null) return true;
                if (b.startTime._date.valueOf() < this.itemsStartTime._date.valueOf()) return true;
                if (c.endTime._date.valueOf() > this.itemsEndTime._date.valueOf()) return true;
                if (b.rowIndex === c.rowIndex) return false;
                return true
            }
        }, {
            key: 'hasVisibleParts',
            value: function hasVisibleParts(a) {
                if (a.startTime._date.valueOf() >= this._rows.items()[0].itemsStartTime._date.valueOf() && a.startTime._date.valueOf() < this._rows.items()[this._rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.endTime._date.valueOf() > this._rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() < this._rows.items()[this._rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.startTime._date.valueOf() <= this._rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() >= this._rows.items()[0].itemsEndTime._date.valueOf()) return true;
                return false
            }
        }, {
            key: 'getItemsInCell',
            value: function getItemsInCell(a, b) {
                var c = [];
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].startCellIndex === a.index) c.push(b[i])
                }
                return c
            }
        }, {
            key: 'getFirstRowCell',
            value: function getFirstRowCell(a) {
                return this.cells.items()[a * this.rowCellsCount]
            }
        }, {
            key: 'getLastRowCell',
            value: function getLastRowCell(a) {
                return this.cells.items()[(a + 1) * this.rowCellsCount - 1]
            }
        }, {
            key: 'getHeaderType',
            value: function getHeaderType(a) {
                var h = this.getWeekHeader();
                if (h) {
                    if (h.contains(a)) return bo.WeekNumbers
                }
                h = this.getDaysHeader();
                if (h) {
                    if (h.contains(a)) return bo.DayNames
                }
                return bt(cC.prototype.__proto__ || Object.getPrototypeOf(cC.prototype), 'getHeaderType', this).call(this, a)
            }
        }, {
            key: 'drawHeader',
            value: function drawHeader() {
                var c = null;
                var e = document.createElement("div");
                e.className = "mfp-header";
                c = e;
                if (this.settings.showHeader) {
                    var f = document.createElement("div");
                    f.className = "mfp-title";
                    e.appendChild(f);
                    var a = document.createElement("a");
                    a.className = "mfp-link";
                    f.appendChild(a);
                    if ((this.settings.headerStyle & T.Title) === T.Title) a.innerHTML = this._date.toString(this.formatInfo.dateFormats.yearMonth, this.formatInfo);
                    else a.innerHTML = "&nbsp;";
                    if (this.calendar.showTooltips) a.title, this._date.toString(this.formatInfo.dateFormats.yearMonth, this.formatInfo);
                    if (!this.parent) {
                        if ((this._settings.headerStyle & T.Buttons) === T.Buttons) {
                            var b = this.drawHeaderButtons(f)
                        }
                    }
                }
                if (this.settings.showDayNamesHeader) {
                    var f = document.createElement("div");
                    f.className = "mfp-header-weekdays";
                    e.appendChild(f);
                    if (this._settings.weekHeaderStyle === U.Left) {
                        var d = document.createElement("div");
                        d.className = "mfp-header-weeknumbers";
                        d.innerHTML = "&nbsp;";
                        f.appendChild(d)
                    }
                    var g = document.createElement("div");
                    g.className = "mfp-weekdays-wrap";
                    f.appendChild(g);
                    var h = 0;
                    var j = null;
                    for (var i = 0; i < this._daysPerWeek; i++) {
                        h = +this.formatInfo.firstDayOfWeek + i;
                        j = this.calendar.getDayName(h, this._settings.dayOfWeekFormat);
                        var d = document.createElement("div");
                        d.className = "mfp-weekday";
                        if (this.calendar.showTooltips) d.title = this.calendar.getDayName(h, S.Full);
                        g.appendChild(d);
                        if (j !== "") d.innerHTML = j;
                        else d.innerHTML = "&nbsp;"
                    }
                    if (this.settings.weekHeaderStyle === U.Right) {
                        var d = document.createElement("div");
                        d.className = "mfp-header-weeknumbers";
                        d.innerHTML = "&nbsp;";
                        f.appendChild(d)
                    }
                }
                return c
            }
        }, {
            key: 'drawHeaderButtons',
            value: function drawHeaderButtons(a) {
                var b = document.createElement("a");
                var s = document.createElement("span");
                b.appendChild(s);
                if (this.calendar.showTooltips) {
                    b.title = bx.addYears(this._date, -1).toString(this.formatInfo.dateFormats.yearMonth, this.formatInfo)
                }
                a.appendChild(b);
                bz.addCssClass(b, "mfp-button");
                bz.addCssClass(b, "mfp-button-prev-2");
                b = document.createElement("a");
                s = document.createElement("span");
                b.appendChild(s);
                if (this.calendar.showTooltips) {
                    b.title = bx.addMonths(this._date, -1).toString(this.formatInfo.dateFormats.yearMonth, this.formatInfo)
                }
                a.appendChild(b);
                bz.addCssClass(b, "mfp-button");
                bz.addCssClass(b, "mfp-button-prev");
                b = document.createElement("a");
                s = document.createElement("span");
                b.appendChild(s);
                if (this.calendar.showTooltips) {
                    b.title = bx.addMonths(this._date, 1).toString(this.formatInfo.dateFormats.yearMonth, this.formatInfo)
                }
                a.appendChild(b);
                bz.addCssClass(b, "mfp-button");
                bz.addCssClass(b, "mfp-button-next");
                b = document.createElement("a");
                s = document.createElement("span");
                b.appendChild(s);
                if (this.calendar.showTooltips) {
                    b.title = bx.addYears(this._date, 1).toString(this.formatInfo.dateFormats.yearMonth, this.formatInfo)
                }
                a.appendChild(b);
                bz.addCssClass(b, "mfp-button");
                bz.addCssClass(b, "mfp-button-next-2")
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var a = null;
                var b = document.createElement("div");
                b.className = "mfp-content";
                a = b;
                if (this._settings.weekHeaderStyle === U.Left) {
                    var d = document.createElement("div");
                    d.className = "mfp-header-weeknumbers";
                    b.appendChild(d);
                    var t = this.drawWeekNumbersHeader();
                    d.appendChild(t)
                }
                var d = document.createElement("div");
                d.className = "mfp-wrap";
                b.appendChild(d);
                var c = this._startTime;
                var e = "";
                for (var f = 0; f < this._rowsCount; f++) {
                    e = "mfp-week";
                    var r = document.createElement("div");
                    r.className = e;
                    d.appendChild(r);
                    var t = this.drawBackgroundTable(c, f);
                    r.appendChild(t);
                    var t = this.drawItemTable(c, f);
                    r.appendChild(t);
                    c = bx.addDays(c, this._daysPerWeek)
                }
                if (this._settings.weekHeaderStyle === U.Right) {
                    var d = document.createElement("div");
                    d.className = "mfp-header-weeknumbers";
                    b.appendChild(d);
                    var t = this.drawWeekNumbersHeader();
                    d.appendChild(t)
                }
                return a
            }
        }, {
            key: 'drawWeekNumbersHeader',
            value: function drawWeekNumbersHeader() {
                var a = null;
                var t = document.createElement("table");
                t.className = "mfp-weeknumbers";
                t.cellSpacing = 0;
                t.cellPadding = 0;
                a = t;
                var b = bx.minValue;
                for (var c = 0; c < this._rows.count(); c++) {
                    b = bx.addDays(this.startTime, c * this._daysPerWeek).date;
                    var d = document.createElement("tr");
                    t.appendChild(d);
                    var e = document.createElement("td");
                    d.appendChild(e);
                    e.innerHTML = this.calendar.getWeekOfYear(bx.addDays(b, 6))
                }
                return a
            }
        }, {
            key: 'drawBackgroundTable',
            value: function drawBackgroundTable(a, b) {
                var c = null;
                var e = "";
                var f = false;
                var g = false;
                var h = bx.getMonth(this._date);
                var r = document.createElement("div");
                r.className = "mfp-bg-row";
                c = r;
                for (var i = 0; i < this._daysPerWeek; i++) {
                    f = false;
                    g = false;
                    e = "mfp-bg-cell";
                    var j = bx.getMonth(a);
                    if (j !== h) {
                        if (a < this._date && this._showLeadingDays) {
                            e += " mfp-padding-cell";
                            g = true
                        }
                        if (a > this._date && this._showTrailingDays) {
                            e += " mfp-padding-cell";
                            g = true
                        }
                    } else {
                        f = true
                    }
                    if (!f && !g) e += " mfp-empty-cell";
                    var k = a.dayOfWeek;
                    if (k === bi.Saturday || k === bi.Sunday) e += " mfp-weekend-cell";
                    var d = this.drawMonthDay(a, !(f || g), f, g);
                    d.className = e;
                    r.appendChild(d);
                    a = bx.addDays(a, 1)
                }
                return c
            }
        }, {
            key: 'drawMonthDay',
            value: function drawMonthDay(a, b, c, d) {
                var e = null;
                var t = document.createElement("div");
                e = t;
                var f = document.createElement("div");
                f.className = "mfp-bg-cell-header";
                t.appendChild(f);
                if (!b) {
                    var g = bx.getDayOfMonth(a);
                    var h = bx.getMonth(a);
                    if (h === 1 && g === 1) {
                        f.innerHTML = a.toString(this._settings.firstDayOfYearFormat, this.formatInfo)
                    } else if (h !== 1 && g === 1) {
                        f.innerHTML = a.toString(this._settings.firstDayOfMonthFormat, this.formatInfo)
                    } else {
                        f.innerHTML = a.toString(this._settings.generalFormat, this.formatInfo)
                    }
                } else f.innerHTML = "&nbsp;";
                return e
            }
        }, {
            key: 'drawItemTable',
            value: function drawItemTable(a, b) {
                var c = null;
                var e = false;
                var f = false;
                var g = a;
                var t = document.createElement("table");
                t.className = "mfp-item-table";
                t.cellSpacing = 0;
                t.cellPadding = 0;
                c = t;
                var h = document.createElement("tbody");
                t.appendChild(h);
                var i = document.createElement("tr");
                h.appendChild(i);
                for (var j = 0; j < this._daysPerWeek; j++) {
                    e = false;
                    f = false;
                    if (g.getMonth() !== this._date.getMonth()) {
                        if (g.getMonth() < this._date.getMonth() && this._showLeadingDays) f = true;
                        if (g.getMonth() > this._date.getMonth() && this._showTrailingDays) f = true
                    } else {
                        e = true
                    }
                    var k = document.createElement("td");
                    if (this.calendar.showTooltips && (e || f)) k.title = g.toString(this.formatInfo.dateFormats.longDate, this.formatInfo);
                    i.appendChild(k);
                    var d = document.createElement("div");
                    d.innerHTML = "&nbsp;";
                    d.className = "mfp-cell-header";
                    k.appendChild(d);
                    g = bx.addDays(g, 1)._date
                }
                return c
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                var a = new bB();
                this._rows.forEach(function(t) {
                    a.addRange(t.cells.items())
                }, this);
                return a
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return "mfp-month-view"
            }
        }]);
        return cC
    }(cy);
    var cD = function(v) {
        bu(cD, v);

        function cD(a) {
            br(this, cD);
            var b = bv(this, (cD.__proto__ || Object.getPrototypeOf(cD)).call(this, a));
            b.unit = R.Day;
            b.initVars();
            return b
        }
        bs(cD, [{
            key: 'getContent',
            value: function getContent() {
                if (!this.Dom.content) {
                    this.Dom.content = this.getElement().querySelector("div.mfp-content-wrap")
                }
                return this.Dom.content
            }
        }, {
            key: 'getRows',
            value: function getRows() {
                if (!this.Dom.rows) {
                    this.Dom.rows = this.calendar.getElement().querySelectorAll('div.mfp-month-view')
                }
                return this.Dom.rows
            }
        }, {
            key: 'getBgCells',
            value: function getBgCells() {
                if (!this.Dom.bgCells) {
                    this.Dom.bgCells = this.calendar.getElement().querySelectorAll('div.mfp-bg-cell')
                }
                return this.Dom.bgCells
            }
        }, {
            key: 'initVars',
            value: function initVars() {
                var a = this.calendar.date.date;
                this._date = this.calendar.getMonthFirstDate(a);
                this._settings = this.calendar.monthRangeSettings;
                this._isHeaderVisible = false;
                var b = this._settings.numberOfMonths;
                this._rows = this._settings.visibleRows;
                this._startTime = this.calendar.getMonthFirstVisibleDate(this._date);
                this._endTime = this._date.clone().addMonths(this._settings.numberOfMonths).addDays(-1);
                var c = this._date.clone();
                this._rowHeight = 0;
                this._cols = b > this._settings.monthsPerRow ? this._settings.monthsPerRow : b;
                if (b > this._settings.monthsPerRow) this._realRows = b % this._settings.monthsPerRow != 0 ? Math.floor(b / this._settings.monthsPerRow) + 1 : Math.floor(b / this._settings.monthsPerRow);
                else this._realRows = 1;
                var d = 0;
                this.monthCells = new bB();
                var e = this.getMaxWeekCount(c.clone());
                for (var i = 0; i < b; i++) {
                    if (i == 0) d = -1;
                    else if (i == b - 1) d = 1;
                    else d = 0;
                    if (b == 1) d = 2;
                    var f = new cC(this.calendar, this, c, i, d, e);
                    this.monthCells.add(f);
                    c = c.addMonths(1)
                }
                this.rowCellsCount = 7;
                this.createCells()
            }
        }, {
            key: 'getMaxWeekCount',
            value: function getMaxWeekCount(a) {
                var b = 0;
                var c = 6;
                var e = this._settings.numberOfMonths;
                var f = this.calendar.monthSettings;
                for (var i = 0; i < e; i++) {
                    var g = f.showPaddingDays && (i == 0 || e == 1);
                    var t = bx.getDaysInMonth(a);
                    var d = bx.addDays(a, t);
                    var h = this.calendar.getMonthFirstVisibleDate(a);
                    while (d.dayOfWeek != +this.formatInfo.firstDayOfWeek) {
                        d = bx.addDays(d, 1)
                    }
                    c = Math.round(bw.fromMilliseconds(d - h).days / 7);
                    if (f.leadingWeekCount > 0 && g) h = bx.addDays(h, -1 * f.leadingWeekCount * 7);
                    if (c > b) b = c;
                    a = a.addMonths(1)
                }
                return b
            }
        }, {
            key: 'createCells',
            value: function createCells() {
                var g = 0;
                for (var i = 0; i < this.monthCells.count(); i++) {
                    var m = this.monthCells.items()[i];
                    for (var k = 0; k < m.cells.count(); k++) {
                        var c = m.cells.items()[k];
                        c.monthCellIndex = i;
                        c.globalIndex = g;
                        g++
                    }
                }
                this.itemsStartTime = this.monthCells.items()[0].itemsStartTime;
                this.itemsEndTime = this.monthCells.items()[this.monthCells.count() - 1].itemsEndTime
            }
        }, {
            key: 'detach',
            value: function detach() {
                for (var i = 0; i < this.monthCells.count(); i++) {
                    this.monthCells.items()[i].detach()
                }
                var a = this.getHeader().querySelectorAll("a.mfp-button");
                for (var i = 0; i < a.length; i++) {
                    a[i].removeEventListener("click", this.buttonClickHandler)
                }
                this.getHeader().removeEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'attach',
            value: function attach() {
                var h = bz.getBounds(this.getContent()).height;
                for (var i = 0; i < this.monthCells.count(); i++) {
                    this.monthCells.items()[i].attach()
                }
                this.clear();
                this.init();
                this.getHeader().addEventListener("click", this.headerClickHandler);
                var a = this.getHeader().querySelectorAll("a.mfp-button");
                for (var i = 0; i < a.length; i++) {
                    a[i].addEventListener("click", this.buttonClickHandler)
                }
            }
        }, {
            key: 'clear',
            value: function clear() {
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-wrap'));
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-row'))
            }
        }, {
            key: 'init',
            value: function init() {
                if (!this.cellWidth) this.getDimensions();
                this.getAllItems();
                this.itemsToPut = this.items.slice(0);
                for (var i = 0, l = this.monthCells.count(); i < l; i++) {
                    for (var k = 0, m = this.monthCells.items()[i]._rows.count(); k < m; k++) {
                        this.createItemsTable(i, this.monthCells.items()[i]._rows.items()[k])
                    }
                }
                for (var i = 0; i < this.itemsToPut.length; i++) {
                    var a = this.items[this.items.indexOf(this.itemsToPut[i])];
                    a.cell = null;
                    a.row = -1;
                    a.hidden = true
                }
                this.placeItems();
                if (this.calendar.itemSettings.showItems) {
                    for (var i = 0, l = this.monthCells.count(); i < l; i++) {
                        this.monthCells.items()[i].getCues();
                        this.monthCells.items()[i].createCues()
                    }
                }
            }
        }, {
            key: 'createItemsTable',
            value: function createItemsTable(a, b) {
                var c = this.getItemsInRow(a, b);
                for (var i = 0, l = this.itemsCount; i < l; i++) {
                    var d = document.createElement('tr');
                    d.className = 'mfp-item-row';
                    var e = 0;
                    while (e < this.rowCellsCount) {
                        var c = this.getItemsInCell(b.cells.items()[e], this.itemsToPut);
                        var f = null;
                        if (c.length > 0) f = c[0];
                        if (f != null) {
                            var g = document.createElement('td');
                            g.className = 'mfp-item-cell';
                            g.colSpan = f.cellsLength;
                            g.style.paddingLeft = this.padding + 'px';
                            g.style.paddingRight = this.padding + 'px';
                            e += f.cellsLength - 1;
                            f.cell = g;
                            f.row = i;
                            this.itemsToPut.splice(this.itemsToPut.indexOf(f), 1)
                        } else {
                            var g = document.createElement('td');
                            g.className = 'mfp-item-cell'
                        }
                        d.appendChild(g);
                        e += 1
                    }
                    b.itemTable.appendChild(d)
                }
            }
        }, {
            key: 'updateItem',
            value: function updateItem(a, b) {
                var c = a.item;
                if (!c.visible) {
                    return a
                }
                var a = a;
                var d = [];
                var e = [];
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    var f = this.getTimeMonthCells(c.startTime, c.endTime);
                    for (var i = f.start.index, l = f.end.index; i <= l; i++) {
                        var g = bx.maxDate(c.startTime, this.monthCells.items()[i].itemsStartTime, false);
                        var h = bx.minDate(c.endTime, this.monthCells.items()[i].itemsEndTime, true);
                        var k = this.getTimeRows(this.monthCells.items()[i], g, h);
                        for (var j = k.start, m = k.end; j <= m; j++) {
                            var n = bx.maxDate(c.startTime, this.rows.items()[j].itemsStartTime, false);
                            var o = bx.minDate(c.endTime, this.rows.items()[j].itemsEndTime, true);
                            if (n.equals(o)) continue;
                            var p = 0;
                            if (n.compareTo(c.startTime) == 1) p = 1;
                            if (o.compareTo(c.endTime) == -1) p = -1;
                            if (n.compareTo(c.startTime) == 1 && o.compareTo(c.endTime) == -1) p = 0;
                            var q = this.getTimeCell(n, false);
                            var r = this.getTimeCell(o, true);
                            var s = {
                                prototype: a,
                                type: 'part',
                                cellIndex: q.index,
                                cellsLength: r.index - q.index + 1,
                                colIndex: j,
                                isPartial: true,
                                partIndex: p,
                                lastCellIndex: r.index,
                                startCellIndex: q.index,
                                monthCellIndex: q.monthCellIndex
                            };
                            var t = new cp(s);
                            t.composite = true;
                            d.push(t);
                            e.push(a)
                        }
                    }
                } else {
                    var u = this.getTimeCell(c.startTime, false);
                    if (c.startTime._date.valueOf() == c.endTime._date.valueOf()) {
                        var r = u
                    } else {
                        var r = this.getTimeCell(c.endTime, true)
                    }
                    if (r.globalIndex < u.globalIndex) {
                        r = u
                    }
                    a.monthCellIndex = u.monthCellIndex;
                    a.lastCellIndex = r.index;
                    a.startCellIndex = u.index;
                    a.cellsLength = r.index - u.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = u.index;
                    a.colIndex = u.rowIndex;
                    a.updateVisual()
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b != false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'getItemsInRow',
            value: function getItemsInRow(a, b) {
                var c = [];
                for (var i = 0, l = this.itemsToPut.length; i < l; i++) {
                    if (this.itemsToPut[i].monthCellIndex == a) {
                        if (this.itemsToPut[i].startCellIndex >= b.index * 7 && this.itemsToPut[i].startCellIndex < b.index * 7 + 7) c.push(this.itemsToPut[i])
                    }
                }
                return c
            }
        }, {
            key: 'isComposite',
            value: function isComposite(a) {
                if (a.startTime._date.valueOf() == a.endTime._date.valueOf()) {
                    return false
                }
                var b = this.getTimeCell(a.startTime, false);
                var c = this.getTimeCell(a.endTime, true);
                if (b == null || c == null) return true;
                if (c.globalIndex < b.globalIndex) {
                    c = b;
                    return false
                }
                if (b.monthCellIndex != c.monthCellIndex) return true;
                if (b.startTime._date.valueOf() < this.rows.items()[0].itemsStartTime._date.valueOf()) return true;
                if (c.endTime._date.valueOf() > this.rows.items()[this.rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (b.rowIndex == c.rowIndex) return false;
                return true
            }
        }, {
            key: 'hasVisibleParts',
            value: function hasVisibleParts(a) {
                if (a.startTime._date.valueOf() >= this.rows.items()[0].itemsStartTime._date.valueOf() && a.startTime._date.valueOf() < this.rows.items()[this.rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.endTime._date.valueOf() > this.rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() < this.rows.items()[this.rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.startTime._date.valueOf() <= this.rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() >= this.rows.items()[0].itemsEndTime._date.valueOf()) return true;
                return false
            }
        }, {
            key: 'getItemsInCell',
            value: function getItemsInCell(a, b) {
                var c = [];
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].monthCellIndex == a.monthCellIndex) {
                        if (b[i].startCellIndex == a.index) c.push(b[i])
                    }
                }
                return c
            }
        }, {
            key: 'getMonthTimeCell',
            value: function getMonthTimeCell(a, b) {
                var c = null;
                for (var i = 0, l = this.monthCells.count(); i < l; i++) {
                    if (a._date.valueOf() >= this.monthCells.items()[i].itemsStartTime._date.valueOf() && a._date.valueOf() <= this.monthCells.items()[i].itemsEndTime._date.valueOf()) {
                        c = this.monthCells.items()[i]
                    }
                    if (b && this.monthCells.items()[i].itemsStartTime._date.valueOf() == a._date.valueOf() && i > 0) {
                        c = this.monthCells.items()[i - 1]
                    }
                    if (c == null && (i == 0 || i == this.monthCells.count() - 1)) {
                        if (a._date.valueOf() >= this.monthCells.items()[i].startTime._date.valueOf() && a._date.valueOf() <= this.monthCells.items()[i].endTime._date.valueOf()) {
                            c = this.monthCells.items()[i]
                        }
                        if (b && this.monthCells.items()[i].startTime._date.valueOf() == a._date.valueOf() && i > 0) {
                            c = this.monthCells.items()[i - 1]
                        }
                    }
                }
                return c
            }
        }, {
            key: 'getTimeMonthCells',
            value: function getTimeMonthCells(a, b) {
                var c = this.getMonthTimeCell(a, false);
                var d = this.getMonthTimeCell(b, true);
                if (c == null) c = this.monthCells.items()[0];
                if (d == null) d = this.monthCells.items()[this.monthCells.count() - 1];
                return {
                    start: c,
                    end: d
                }
            }
        }, {
            key: 'getTimeRows',
            value: function getTimeRows(a, b, c) {
                var d = this.getTimeCell(b, false);
                var e = this.getTimeCell(c, true);
                var f = d == null ? a.index * (a._rows.count() + 1) : d.rowIndex + a.index * a._rows.count();
                var g = e == null ? a.index * (a._rows.count() + 1) : e.rowIndex + a.index * a._rows.count();
                return {
                    start: f,
                    end: g
                }
            }
        }, {
            key: 'getTimeCell',
            value: function getTimeCell(a, b, c) {
                var t = bx.setTimeOfDay(this.startTime, a);
                if (c == undefined || typeof c == "number") {
                    var d = this.getMonthTimeCell(a, b);
                    if (d == null) return null
                } else {
                    var d = c
                }
                var i = bx.daysBetween(d.startTime, t);
                if (i > d.cells.count()) return null;
                if (i == d.cells.count()) {
                    if (b && a.equals(d.cells.items()[i - 1].endTime)) return d.cells.items()[i - 1];
                    else return null
                }
                if (b && a.equals(d.cells.items()[i].startTime) && i > 0) i -= 1;
                return d.cells.items()[i]
            }
        }, {
            key: 'getTimeCells',
            value: function getTimeCells(a, b, c) {
                var d = null;
                var e = null;
                var f = this.monthCells.items()[0].startTime.valueOf();
                var g = this.monthCells.items()[this.monthCells.count() - 1].endTime.valueOf();
                if (a.valueOf() < f) {
                    d = this.cells.items()[0]
                } else if (a.valueOf() > g) {
                    return []
                } else {
                    var h = this.getMonthTimeCell(a, false);
                    if (h) {
                        d = this.getTimeCell(a, false, h)
                    }
                }
                if (b !== null && typeof b !== "undefined" && typeof b._date !== "undefined") {
                    if (b.valueOf() > g) {
                        e = this.cells.items()[this.cells.count() - 1]
                    } else if (b.valueOf() < f) {
                        return []
                    } else {
                        var i = this.getMonthTimeCell(b, c);
                        if (i) {
                            e = this.getTimeCell(b, c, i)
                        }
                    }
                } else {
                    e = d
                }
                if (d && e) {
                    return this.cells.items().slice(d.globalIndex, e.globalIndex + 1)
                }
                return []
            }
        }, {
            key: 'endSelection',
            value: function endSelection(e, a, b) {
                var c = this.cells.items()[a].startTime;
                var d = this.cells.items()[b].endTime;
                var f = new cB(c, d, '', true, this.calendar);
                bt(cD.prototype.__proto__ || Object.getPrototypeOf(cD.prototype), 'endSelection', this).call(this, f)
            }
        }, {
            key: 'selectItem',
            value: function selectItem(e, a) {
                bt(cD.prototype.__proto__ || Object.getPrototypeOf(cD.prototype), 'selectItem', this).call(this, e, a);
                this.itemData.startCellIndex = this.getTimeCell(this.itemData.item.startTime, false).globalIndex
            }
        }, {
            key: 'endItemDrag',
            value: function endItemDrag(e) {
                var a = this.getCellAt(e.clientX, e.clientY);
                var b = this.cells.items()[this.itemData.startCellIndex];
                if (a == null) a = b;
                var c = this.cells.items().indexOf(a);
                if (a.monthCellIndex == 0) {
                    if (c < this.firstVisibleCellOfMonth(c)) {
                        a = this.cells[this.firstVisibleCellOfMonth(c)]
                    }
                }
                if (a.monthCellIndex == this.monthCells.count() - 1) {
                    if (c > this.lastVisibleCellOfMonth(c)) {
                        a = this.cells[this.lastVisibleCellOfMonth(c)]
                    }
                }
                var d = this.itemData.item;
                var f = this.itemData.appointment;
                var g = bx.setTimeOfDay(d.startTime, a.startTime);
                var h = f.getEndTime(g);
                bt(cD.prototype.__proto__ || Object.getPrototypeOf(cD.prototype), 'endItemDrag', this).call(this, {
                    startTime: g,
                    endTime: h
                })
            }
        }, {
            key: 'endItemResize',
            value: function endItemResize(e) {
                var a = this.itemData.itemStartCell;
                var b = this.itemData.itemLastCell;
                var c = this.itemData.item;
                var d = this.itemData.appointment;
                if (a != null) var f = bx.setTimeOfDay(c.startTime, a.startTime);
                else var f = c.startTime;
                if (b != null) var g = b.endTime;
                else var g = c.endTime;
                bt(cD.prototype.__proto__ || Object.getPrototypeOf(cD.prototype), 'endItemResize', this).call(this, {
                    startTime: f,
                    endTime: g
                })
            }
        }, {
            key: 'getDimensions',
            value: function getDimensions() {
                var a = bz.getBounds;
                this.monthRowHeight = a(this.getRows()[0]).height;
                this.calculatedMonthCellWidth = a(this.getRows()[0]).width;
                var c = this.monthCells.items()[0];
                c.getDimensions();
                this.cellWidth = c.cellWidth;
                this.calculatedCellWidth = c.calculatedCellWidth;
                this.weekRowHeight = c.rowHeight;
                this.headerHeight = c.headerHeight;
                this.offsetLeft = 0;
                this.offsetLeft += c.offsetLeft;
                this.dragOffsetLeft = a(this.calendar.getElement()).x;
                this.dragWidth = c.dragWidth;
                this.itemsCount = c.itemsCount
            }
        }, {
            key: 'getCellIndexAt',
            value: function getCellIndexAt(x, y) {
                if (!this.cellWidth) this.getDimensions();
                var a = bz.getCursorPosition({
                    clientX: x,
                    clientY: y
                }, this.getContent(), this.getScroller());
                var b = this.getMonthCellAt(a.x, a.y);
                if (b) {
                    var c = b.getCellIndexAt(x, y);
                    var d = c + b.index * b.cells.count();
                    if (this.cells.items()[d]) return d
                }
                return null
            }
        }, {
            key: 'getCellAt',
            value: function getCellAt(x, y) {
                var i = this.getCellIndexAt(x, y);
                return this.cells.items()[i]
            }
        }, {
            key: 'getMonthCellAt',
            value: function getMonthCellAt(x, y) {
                var r = Math.floor(y / this.monthRowHeight);
                var c = Math.floor(x / this.calculatedMonthCellWidth);
                return this.monthCells.items()[r * this._settings.monthsPerRow + c]
            }
        }, {
            key: 'firstVisibleCellOfMonth',
            value: function firstVisibleCellOfMonth(a) {
                if (this.cells.items()[a] == null) return null;
                var b = this.monthCells.items()[this.cells.items()[a].monthCellIndex];
                var c = b.cells.items()[b.firstVisibleCell];
                return this.cells.items().indexOf(c)
            }
        }, {
            key: 'lastVisibleCellOfMonth',
            value: function lastVisibleCellOfMonth(a) {
                if (this.cells.items()[a] == null) return null;
                var b = this.monthCells.items()[this.cells.items()[a].monthCellIndex];
                var c = b.cells.items()[b.lastVisibleCell];
                return this.cells.items().indexOf(c)
            }
        }, {
            key: 'lastMonthVisibleCell',
            value: function lastMonthVisibleCell(a) {
                var b = this.monthCells.items()[this.cells.items()[a].monthCellIndex - 1];
                var c = b.cells.items()[b.lastVisibleCell];
                if (c != null) return this.cells.items().indexOf(c)
            }
        }, {
            key: 'isValidCell',
            value: function isValidCell(a) {
                if (a == null) {
                    return false
                }
                if (a < this.firstVisibleCellOfMonth(a) || a > this.lastVisibleCellOfMonth(a)) {
                    return false
                }
                return true
            }
        }, {
            key: 'getNextVisibleCell',
            value: function getNextVisibleCell(a, b) {
                var c = this.visibleCells.length;
                var d = this.visibleCells.indexOf(a) + b;
                if (d > c - 1) {
                    d = c - 1
                }
                return this.visibleCells[d]
            }
        }, {
            key: 'getIndexCell',
            value: function getIndexCell(a, b) {
                var c = this.lastVisibleCellOfMonth(b);
                if (c < a) return this.getNextVisibleCell(c, a - c + 1);
                return a
            }
        }, {
            key: 'getFirstRowCell',
            value: function getFirstRowCell(a) {
                var b = this.rows.items()[a].cells.items()[0];
                var c = this.monthCells.items()[this.rows.items()[a].monthCellIndex];
                if (b.index > c.lastVisibleCell) {
                    return null
                }
                if (b.index > c.firstVisibleCell) {
                    return b
                } else {
                    return c.cells.items()[c.firstVisibleCell]
                }
            }
        }, {
            key: 'getLastRowCell',
            value: function getLastRowCell(a) {
                var b = this.rows.items()[a].cells.items()[this.rows.items()[a].cells.count() - 1];
                var c = this.monthCells.items()[this.rows.items()[a].monthCellIndex];
                if (b.index < c.lastVisibleCell) {
                    return b
                } else {
                    return c.cells.items()[c.lastVisibleCell]
                }
            }
        }, {
            key: 'getAllItemsInCell',
            value: function getAllItemsInCell(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].monthCellIndex == a.monthCellIndex) {
                        if (this.items[i].startCellIndex <= a.index && this.items[i].lastCellIndex >= a.index) {
                            if (this.items[i].row < this.itemsCount || this.items[i].row == -1) {
                                b.push(this.items[i])
                            }
                        }
                    }
                }
                return b
            }
        }, {
            key: 'onThemeChanged',
            value: function onThemeChanged(a, b) {
                var c = this.getRows();
                for (var i = 0; i < c.length; i++) {
                    bz.removeCssClass(c[i], a);
                    bz.addCssClass(c[i], b)
                }
            }
        }, {
            key: 'drawHeader',
            value: function drawHeader() {
                var c = null;
                var d = document.createElement("div");
                d.className = "mfp-header";
                c = d;
                if (this.settings.headerStyle != T.None) {
                    var e = document.createElement("div");
                    e.className = "mfp-title";
                    d.appendChild(e);
                    var a = document.createElement("a");
                    a.className = "mfp-link";
                    e.appendChild(a);
                    if ((this._settings.headerStyle & T.Title) == T.Title) {
                        a.innerHTML = this._date.toString(this._settings.titleFormat, this.formatInfo).trim() + this._settings.titleSeparator + this._endTime.toString(this._settings.titleFormat, this.formatInfo).trim()
                    } else a.innerHTML = "&nbsp;";
                    if ((this._settings.headerStyle & T.Buttons) == T.Buttons) {
                        var b = this.drawHeaderButtons(e)
                    }
                }
                return c
            }
        }, {
            key: 'drawHeaderButtons',
            value: function drawHeaderButtons(a) {
                var b = document.createElement("a");
                var s = document.createElement("span");
                b.appendChild(s);
                a.appendChild(b);
                bz.addCssClass(b, "mfp-button");
                bz.addCssClass(b, "mfp-button-prev-2");
                if (this.calendar.showTooltips) {
                    b.title = bx.addYears(this._date, -1).toString(this.formatInfo.dateFormats.yearMonth, this.formatInfo)
                }
                b = document.createElement("a");
                var s = document.createElement("span");
                b.appendChild(s);
                a.appendChild(b);
                bz.addCssClass(b, "mfp-button");
                bz.addCssClass(b, "mfp-button-next-2");
                if (this.calendar.showTooltips) {
                    b.title = bx.addYears(this._date, 1).toString(this.formatInfo.dateFormats.yearMonth, this.formatInfo)
                }
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var a = null;
                var b = document.createElement("div");
                b.className = "mfp-content-wrap";
                a = b;
                var t = document.createElement("div");
                t.className = "mfp-wrap";
                t.style.height = this._realRows / this._settings.visibleRows * 100 + "%";
                b.appendChild(t);
                var k = 0;
                for (var i = 0; i < this._realRows; i++) {
                    var e = document.createElement("div");
                    e.style.flex = "1 1 " + 100 / this._realRows + "%";
                    t.appendChild(e);
                    for (var j = 0; j < this._cols; j++) {
                        if (k < this.monthCells.count()) {
                            var c = document.createElement("div");
                            c.className = "mfp-month-view";
                            if (this.calendar.theme) bz.addCssClass(c, this.calendar.theme);
                            var d = this.monthCells.items()[k].draw();
                            c.appendChild(d);
                            e.appendChild(c);
                            k += 1
                        } else {
                            var c = document.createElement("div");
                            c.style.width = "100%";
                            c.innerHTML = "&nbsp;";
                            e.appendChild(c)
                        }
                    }
                }
                return a
            }
        }, {
            key: 'rows',
            get: function get$$1() {
                var a = new bB();
                this.monthCells.forEach(function(t) {
                    a.addRange(t._rows.items())
                }, this);
                return a
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                var a = new bB();
                this.monthCells.forEach(function(t) {
                    a.addRange(t.cells.items())
                }, this);
                return a
            }
        }, {
            key: 'visibleCells',
            get: function get$$1() {
                var a = [];
                this.cells.forEach(function(t) {
                    if (t.visible) a.push(t.globalIndex)
                }, this);
                return a
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return "mfp-month-range-view"
            }
        }]);
        return cD
    }(cy);
    var cE = function() {
        function cE(a, b) {
            br(this, cE);
            this.value = a;
            this.type = b
        }
        bs(cE, [{
            key: "toString",
            value: function toString() {
                var t = "px";
                if (this.type === cF.Percent) t = "%";
                return (this.value || 0) + t
            }
        }, {
            key: "isEmpty",
            get: function get$$1() {
                return this.value == null
            }
        }], [{
            key: "pixel",
            value: function pixel(a) {
                return new cE(a, cF.Pixel)
            }
        }, {
            key: "percentage",
            value: function percentage(a) {
                return new cE(a, cF.Percent)
            }
        }, {
            key: "empty",
            value: function empty() {
                return new cE(null, cF.Pixel)
            }
        }]);
        return cE
    }();
    var cF = {
        Pixel: 1,
        Percent: 2
    };
    var cG = function(u) {
        bu(cG, u);

        function cG(a) {
            br(this, cG);
            var b = bv(this, (cG.__proto__ || Object.getPrototypeOf(cG)).call(this, a));
            b.unit = R.Day;
            b._settings = b.calendar.weekRangeSettings;
            b.rows = new bB();
            b.initVars();
            return b
        }
        bs(cG, [{
            key: 'initVars',
            value: function initVars() {
                this.rowCellsCount = this.settings.viewStyle === bm.WeekPerRow ? 7 : 2;
                if (this.calendar.date > this.calendar.endDate) this.calendar.endDate = this.calendar.date;
                this._firstVisibleDate = this.calendar.getWeekFirstDate(this.calendar.date);
                this._endDate = this.calendar.endDate;
                if (this.settings.viewStyle === bm.WeekPerRow) {
                    this._daysPerWeek = 7;
                    this._endDate = bx.addDays(this._endDate, 1);
                    this._rows = this.settings.visibleRows
                }
                if (this.settings.viewStyle === bm.SingleWeek) {
                    this._daysPerWeek = 2;
                    this._endDate = bx.addDays(this._endDate, 1);
                    this._rows = 4
                }
                var a = bx.daysBetween(this._firstVisibleDate, this._endDate);
                this._realRows = Math.ceil(a / this._daysPerWeek);
                var b = this._firstVisibleDate.toString(this.settings.titleFormat, this.formatInfo);
                b += this.settings.titleSeparator;
                b += this._endDate.toString(this.settings.titleFormat, this.formatInfo);
                this._titleText = b;
                this._rowHeight = new cE(Math.round(100 / this._realRows, 2), cF.Percent).toString();
                this.startTime = this._firstVisibleDate;
                this.endTime = this._endDate;
                this.createRows()
            }
        }, {
            key: 'getDimensions',
            value: function getDimensions() {
                var a = bz.getBounds;
                this.cellWidth = this.cells.items()[0].title.offsetWidth;
                this.calculatedCellWidth = a(this.getRows()[0]).width / this.rowCellsCount;
                this.weekRowHeight = a(this.getRows()[0]).height;
                this.headerHeight = a(bz.firstRealChild(this.getBgCells()[0])).height;
                this.offsetLeft = this.dayBorderLeft || 0;
                this.dragOffsetLeft = a(this.calendar.getElement()).x;
                this.dragWidth = this.cellWidth;
                this.itemsCount = Math.floor((this.weekRowHeight - this.headerHeight) / (this.calendar.itemSettings.size + this.calendar.itemSettings.spacing));
                if (this._settings.maxItems) this.itemsCount = Math.min(this._settings.maxItems, this.itemsCount);
                this.dragOffsetLeft = a(this.calendar.getElement()).x;
                this.dragWidth = this.cellWidth;
                if (this.items) {
                    this.getHiddenItems();
                    if (this.calendar.itemSettings.showItems) {
                        this.getCues();
                        this.createCues()
                    }
                }
            }
        }, {
            key: 'getRows',
            value: function getRows() {
                if (!this.Dom.rows) {
                    this.Dom.rows = this.calendar.getElement().querySelectorAll('div.mfp-week')
                }
                return this.Dom.rows
            }
        }, {
            key: 'getBgCells',
            value: function getBgCells() {
                if (!this.Dom.bgCells) {
                    this.Dom.bgCells = this.calendar.getElement().querySelectorAll('div.mfp-bg-cell')
                }
                return this.Dom.bgCells
            }
        }, {
            key: 'detach',
            value: function detach() {
                this.getHeader().removeEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'attach',
            value: function attach() {
                if (this._realRows > this._rows) {
                    var h = cE.percentage(Math.ceil(100 / this._rows) * this._realRows).toString();
                    this.getContent().children[0].style.height = h;
                    this.getContent().style.overflowY = "scroll"
                }
                var a = this.getContent().querySelectorAll("div.mfp-bg-row");
                var b = this.getContent().querySelectorAll("table.mfp-item-table");
                for (var i = 0; i < this.rows.count(); i++) {
                    var c = this.rows.items()[i];
                    c.bgTable = a[i];
                    c.itemTable = b[i];
                    var d = c.bgTable.querySelectorAll("div.mfp-bg-cell");
                    for (var k = 0, m = c.cells.count(); k < m; k++) {
                        var e = c.cells.items()[k];
                        e.bgCell = d[k];
                        e.title = d[k] ? d[k].childNodes[0] : undefined
                    }
                }
                this.clear();
                this.init();
                this.getHeader().addEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'updateItem',
            value: function updateItem(a, b) {
                var c = a.item;
                if (!c.visible) {
                    return a
                }
                var d = [];
                var e = [];
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    var f = bx.maxDate(c.startTime, this.itemsStartTime, false);
                    var g = bx.minDate(c.endTime, this.itemsEndTime, true);
                    var h = this.getTimeRows(f, g);
                    for (var j = h.start, m = h.end; j <= m; j++) {
                        var k = bx.maxDate(c.startTime, this.rows.items()[j].itemsStartTime, false);
                        var l = bx.minDate(c.endTime, this.rows.items()[j].itemsEndTime, true);
                        if (k.equals(l)) continue;
                        var n = 0;
                        if (k.compareTo(c.startTime) === 1) n = 1;
                        if (l.compareTo(c.endTime) === -1) n = -1;
                        if (k.compareTo(c.startTime) === 1 && l.compareTo(c.endTime) === -1) n = 0;
                        var o = this.getTimeCell(k, false);
                        var p = this.getTimeCell(l, true);
                        var q = {
                            prototype: a,
                            type: 'part',
                            cellIndex: o.index,
                            cellsLength: p.index - o.index + 1,
                            colIndex: j,
                            isPartial: true,
                            partIndex: n,
                            lastCellIndex: p.index,
                            startCellIndex: o.index
                        };
                        var r = new cp(q);
                        r.composite = true;
                        d.push(r);
                        e.push(a)
                    }
                } else {
                    var s = this.getTimeCell(c.startTime, false);
                    var p;
                    if (c.startTime._date.valueOf() === c.endTime._date.valueOf()) {
                        p = s
                    } else {
                        p = this.getTimeCell(c.endTime, true)
                    }
                    a.lastCellIndex = p.index;
                    a.startCellIndex = s.index;
                    a.cellsLength = p.index - s.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = s.index;
                    a.colIndex = s.rowIndex;
                    a.updateVisual()
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b !== false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'hasVisibleParts',
            value: function hasVisibleParts(a) {
                if (a.startTime._date.valueOf() >= this.rows.items()[0].itemsStartTime._date.valueOf() && a.startTime._date.valueOf() < this.rows.items()[this.rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.endTime._date.valueOf() > this.rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() < this.rows.items()[this.rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.startTime._date.valueOf() <= this.rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() >= this.rows.items()[0].itemsEndTime._date.valueOf()) return true;
                return false
            }
        }, {
            key: 'isComposite',
            value: function isComposite(a) {
                if (a.startTime._date.valueOf() === a.endTime._date.valueOf()) {
                    return false
                }
                var b = this.getTimeCell(a.startTime, false);
                var c = this.getTimeCell(a.endTime, true);
                if (b === null || c === null) return true;
                if (b.startTime._date.valueOf() < this.rows.items()[0].itemsStartTime._date.valueOf()) return true;
                if (c.endTime._date.valueOf() > this.rows.items()[this.rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (b.rowIndex === c.rowIndex) return false;
                return true
            }
        }, {
            key: 'getFirstRowCell',
            value: function getFirstRowCell(a) {
                return this.cells.items()[a * this.rowCellsCount]
            }
        }, {
            key: 'getLastRowCell',
            value: function getLastRowCell(a) {
                return this.cells.items()[(a + 1) * this.rowCellsCount - 1]
            }
        }, {
            key: 'getTimeRows',
            value: function getTimeRows(a, b) {
                var c = this.getTimeCell(a, false);
                var d = this.getTimeCell(b, true);
                var e = c === null ? 0 : c.rowIndex;
                var f = d === null ? this.rows.length - 1 : d.rowIndex;
                return {
                    start: e,
                    end: f
                }
            }
        }, {
            key: 'getTimeCell',
            value: function getTimeCell(a, b) {
                if (a.valueOf() < this.startTime.valueOf()) return null;
                if (a.valueOf() > this.endTime.valueOf()) return null;
                var t = bx.setTimeOfDay(this.startTime, a);
                var i = bx.daysBetween(this.startTime, t);
                if (i > this.cells.count()) return null;
                if (i === this.cells.count()) {
                    if (b && a.equals(this.cells.items()[i - 1].endTime)) return this.cells.items()[i - 1];
                    else return null
                }
                if (b && a.equals(this.cells.items()[i].startTime) && i > 0) i -= 1;
                return this.cells.items()[i]
            }
        }, {
            key: 'getTimeCells',
            value: function getTimeCells(a, b, c) {
                var d = null;
                var e = null;
                if (a.valueOf() < this.startTime.valueOf()) {
                    d = this.cells[0]
                } else if (a.valueOf() > this.endTime.valueOf()) {
                    return []
                } else {
                    d = this.getTimeCell(a, false)
                }
                if (b !== null && typeof b !== "undefined" && typeof b._date !== "undefined") {
                    if (b.valueOf() > this.endTime.valueOf()) {
                        e = this.cells.items()[this.cells.count() - 1]
                    } else if (b.valueOf() < this.startTime.valueOf()) {
                        return []
                    } else {
                        e = this.getTimeCell(b, c)
                    }
                } else {
                    e = d
                }
                if (d && e) {
                    var f = [];
                    var g = this.cells.items().slice(d.index, e.index + 1);
                    for (var i = 0, l = g.length; i < l; i++) {
                        if (g[i].bgCell) {
                            f.push(g[i])
                        }
                    }
                    return f
                }
                return []
            }
        }, {
            key: 'clear',
            value: function clear() {
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-wrap'));
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-row'))
            }
        }, {
            key: 'init',
            value: function init() {
                if (!this.cellWidth) this.getDimensions();
                this.getAllItems();
                this.itemsToPut = this.items.slice(0);
                for (var i = 0, l = this.rows.count(); i < l; i++) {
                    this.createItemsTable(this.rows.items()[i])
                }
                for (var i = 0; i < this.itemsToPut.length; i++) {
                    var a = this.items[this.items.indexOf(this.itemsToPut[i])];
                    a.cell = null;
                    a.row = -1;
                    a.hidden = true
                }
                this.placeItems();
                if (this.calendar.itemSettings.showItems) {
                    this.getCues();
                    this.createCues()
                }
            }
        }, {
            key: 'createItemsTable',
            value: function createItemsTable(a) {
                var b = this.getItemsInRow(a);
                for (var i = 0, l = this.itemsCount; i < l; i++) {
                    var c = document.createElement('tr');
                    c.className = 'mfp-item-row';
                    var d = 0;
                    while (d < this.rowCellsCount) {
                        var b = this.getItemsInCell(a.cells.items()[d], this.itemsToPut);
                        var e = null;
                        if (b.length > 0) e = b[0];
                        if (e !== null) {
                            var f = document.createElement('td');
                            f.className = 'mfp-item-cell';
                            f.colSpan = e.cellsLength;
                            f.style.paddingLeft = this.padding + 'px';
                            f.style.paddingRight = this.padding + 'px';
                            d += e.cellsLength - 1;
                            e.cell = f;
                            e.row = i;
                            this.itemsToPut.splice(this.itemsToPut.indexOf(e), 1)
                        } else {
                            var f = document.createElement('td');
                            f.className = 'mfp-item-cell'
                        }
                        c.appendChild(f);
                        d += 1
                    }
                    a.itemTable.getElementsByTagName("TBODY")[0].appendChild(c)
                }
            }
        }, {
            key: 'getItemsInRow',
            value: function getItemsInRow(a) {
                var b = [];
                for (var i = 0, l = this.itemsToPut.length; i < l; i++) {
                    if (this.itemsToPut[i].startCellIndex >= a.index * 7 && this.itemsToPut[i].startCellIndex < a.index * 7 + 7) b.push(this.itemsToPut[i])
                }
                return b
            }
        }, {
            key: 'getItemsInCell',
            value: function getItemsInCell(a, b) {
                var c = [];
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].startCellIndex === a.index) c.push(b[i])
                }
                return c
            }
        }, {
            key: 'getAllItemsInCell',
            value: function getAllItemsInCell(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].startCellIndex <= a.index && this.items[i].lastCellIndex >= a.index) {
                        if (this.items[i].row < this.itemsCount || this.items[i].row === -1) {
                            b.push(this.items[i])
                        }
                    }
                }
                return b
            }
        }, {
            key: 'getCellAt',
            value: function getCellAt(x, y) {
                var i = this.getCellIndexAt(x, y);
                return this.cells.items()[i]
            }
        }, {
            key: 'getCellIndexAt',
            value: function getCellIndexAt(x, y) {
                if (!this.weekRowHeight) this.getDimensions();
                var a = bz.getCursorPosition({
                    clientX: x,
                    clientY: y
                }, this.getContent(), this.getScroller());
                var r = Math.floor(a.y / this.weekRowHeight);
                var c = Math.floor(a.x / this.calculatedCellWidth);
                if (c >= this.rowCellsCount || c < 0 || r >= this.rows.length || r < 0) {
                    return null
                }
                return r * this.rowCellsCount + c
            }
        }, {
            key: 'createRows',
            value: function createRows() {
                var a = this._firstVisibleDate;
                var b = this._endDate;
                var c = a;
                var d = b;
                this.itemsStartTime = c;
                this.itemsEndTime = this._endDate;
                var j = 0;
                var e = null;
                for (var f = 0; f < this._realRows; f++) {
                    a = bx.addDays(this._firstVisibleDate, f * this._daysPerWeek);
                    b = bx.addDays(a, this._daysPerWeek);
                    e = new cz(a, b, a, b);
                    e.index = f;
                    if (e.startTime < c) {
                        e.itemsStartTime = c
                    }
                    if (e.endTime > d) {
                        e.itemsEndTime = d
                    }
                    this.rows.add(e);
                    for (var k = 0, m = this.rowCellsCount; k < m; k++) {
                        var g = bx.addDays(e.startTime, k);
                        var h = bx.addDays(e.startTime, k + 1);
                        var i = new cA();
                        i.index = j;
                        i.cellIndex = k;
                        i.rowIndex = f;
                        i.startTime = g;
                        i.endTime = h;
                        e.cells.add(i);
                        j += 1
                    }
                }
                this.firstVisibleCell = this.getTimeCell(this.itemsStartTime, false).index;
                this.lastVisibleCell = this.getTimeCell(this.itemsEndTime, true).index
            }
        }, {
            key: 'endSelection',
            value: function endSelection(e, a, b) {
                var c = this.cells.items()[a].startTime;
                var d = this.cells.items()[b].endTime;
                var f = new cB(c, d, '', true, this._calendar);
                bt(cG.prototype.__proto__ || Object.getPrototypeOf(cG.prototype), 'endSelection', this).call(this, f)
            }
        }, {
            key: 'endItemDrag',
            value: function endItemDrag(e) {
                var a = this.getCellAt(e.clientX, e.clientY);
                var b = this.cells.items()[this.itemData.startCellIndex];
                if (!a) {
                    a = b
                }
                if (a.index < this.firstVisibleCell) {
                    a = this.cells[this.firstVisibleCell]
                } else if (a.index > this.lastVisibleCell) {
                    a = this.cells[this.lastVisibleCell]
                }
                var c = this.itemData.item;
                var d = this.itemData.appointment;
                var f = bx.setTimeOfDay(c.startTime, a.startTime);
                var g = d.getEndTime(f);
                bt(cG.prototype.__proto__ || Object.getPrototypeOf(cG.prototype), 'endItemDrag', this).call(this, {
                    startTime: f,
                    endTime: g
                })
            }
        }, {
            key: 'endItemResize',
            value: function endItemResize(e) {
                var a = this.itemData.itemStartCell;
                var b = this.itemData.itemLastCell;
                var c = this.getCellAt(e.clientX, e.clientY);
                if (!c) {
                    a = b = null
                }
                var d = this.itemData.item;
                var f = this.itemData.appointment;
                var g = a != null ? bx.setTimeOfDay(d.startTime, a.startTime) : d.startTime;
                var h = b != null ? b.endTime : d.endTime;
                bt(cG.prototype.__proto__ || Object.getPrototypeOf(cG.prototype), 'endItemResize', this).call(this, {
                    startTime: g,
                    endTime: h
                })
            }
        }, {
            key: 'drawHeader',
            value: function drawHeader() {
                var b = null;
                var c = document.createElement("div");
                c.className = "mfp-header";
                b = c;
                var e = document.createElement("div");
                e.className = "mfp-title";
                c.appendChild(e);
                if ((this._settings.headerStyle & T.Title) === T.Title) {
                    var a = document.createElement("a");
                    a.className = "mfp-link";
                    e.appendChild(a);
                    if (this._titleText) a.innerText = this._titleText;
                    else a.innerHTML = "&nbsp;"
                }
                if (this._realRows > this._rows) {
                    var d = document.createElement("div");
                    d.className = "mfp-scrollfix";
                    d.innerHTML = "&nbsp;";
                    e.appendChild(d)
                }
                if (this.settings.viewStyle === bm.WeekPerRow && this.settings.dayNamesHeaderStyle === V.Top) {
                    var e = document.createElement("div");
                    e.className = "mfp-header-weekdays";
                    c.appendChild(e);
                    var f = document.createElement("div");
                    f.className = "mfp-weekdays-wrap";
                    e.appendChild(f);
                    var g = 0;
                    var h = null;
                    for (var i = 0; i < this._daysPerWeek; i++) {
                        g = +this.formatInfo.firstDayOfWeek + i;
                        h = this.calendar.getDayName(g, this.settings.dayOfWeekFormat);
                        var d = document.createElement("div");
                        d.className = "mfp-weekday";
                        if (this.calendar.showTooltips) d.title = this.calendar.getDayName(g, S.Full);
                        f.appendChild(d);
                        if (h !== "") d.innerHTML = h;
                        else d.innerHTML = "&nbsp;"
                    }
                    if (this._realRows > this._rows) {
                        var d = document.createElement("div");
                        d.className = "mfp-scrollfix";
                        d.innerHTML = "&nbsp;";
                        e.appendChild(d)
                    }
                }
                return b
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var a = null;
                var b = document.createElement("div");
                b.className = "mfp-content";
                a = b;
                var c = document.createElement("div");
                c.className = "mfp-wrap";
                b.appendChild(c);
                var d = this._firstVisibleDate.date;
                var e = "";
                for (var f = 0; f < this._realRows; f++) {
                    e = "mfp-week";
                    var r = document.createElement("div");
                    r.className = e;
                    r.style.height = this._rowHeight;
                    c.appendChild(r);
                    var t = this.drawBackgroundTable(d, f);
                    r.appendChild(t);
                    var t = this.drawItemTable(d, f);
                    r.appendChild(t);
                    d = bx.addDays(d, this._daysPerWeek)
                }
                return a
            }
        }, {
            key: 'drawBackgroundTable',
            value: function drawBackgroundTable(a, b) {
                var c = null;
                var r = document.createElement("div");
                r.className = "mfp-bg-row";
                c = r;
                for (var e = 0; e < this._daysPerWeek; e++) {
                    var f = false;
                    var g = "mfp-bg-cell";
                    if (a._date.valueOf() >= this._endDate._date.valueOf()) f = true;
                    var h = a.dayOfWeek;
                    if (h === bi.Saturday || h === bi.Sunday) g += " mfp-weekend-cell";
                    var d;
                    if (!f) {
                        d = this.drawWeekDay(a);
                        d.className = g
                    } else {
                        d = document.createElement("div");
                        d.className = g + " mfp-empty-cell"
                    }
                    r.appendChild(d);
                    a = bx.addDays(a, 1)
                }
                return c
            }
        }, {
            key: 'drawWeekDay',
            value: function drawWeekDay(a) {
                var b = null;
                var c = bx.getDayOfMonth(a);
                var d = bx.getMonth(a);
                var t = document.createElement("div");
                b = t;
                var e = document.createElement("div");
                e.className = "mfp-bg-cell-header";
                t.appendChild(e);
                if (d === 0 && c === 1) e.innerText = a.toString(this.settings.firstDayOfYearFormat, this.formatInfo);
                else if (d !== 0 && c === 1) e.innerText = a.toString(this.settings.firstDayOfMonthFormat, this.formatInfo);
                else e.innerText = a.toString(this.settings.generalFormat, this.formatInfo);
                return b
            }
        }, {
            key: 'drawItemTable',
            value: function drawItemTable(a, b) {
                var c = null;
                var e = a.date;
                var t = document.createElement("table");
                t.cellPadding = 0;
                t.cellSpacing = 0;
                t.className = "mfp-item-table";
                c = t;
                var f = document.createElement("tbody");
                t.appendChild(f);
                var g = document.createElement("tr");
                f.appendChild(g);
                for (var h = 0; h < this._daysPerWeek; h++) {
                    var i = document.createElement("td");
                    if (this.calendar.showTooltips) i.title = e.toString(this.formatInfo.dateFormats.longDate, this.formatInfo);
                    g.appendChild(i);
                    if (e._date.valueOf() < this._endDate._date.valueOf()) {
                        var d = document.createElement("div");
                        d.className = "mfp-cell-header";
                        d.innerHTML = "&nbsp;";
                        i.appendChild(d)
                    }
                    e = bx.addDays(e, 1)
                }
                return c
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                var a = new bB();
                this.rows.forEach(function(t) {
                    a.addRange(t.cells.items())
                }, this);
                return a
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return "mfp-week-view"
            }
        }]);
        return cG
    }(cy);
    var cH = function() {
        function cH(a, b, c, d) {
            br(this, cH);
            this._index = a;
            this._date = b;
            this._startTime = c;
            this._endTime = d;
            this.cells = new bB()
        }
        bs(cH, [{
            key: 'index',
            get: function get$$1() {
                return this._index
            }
        }, {
            key: 'startTime',
            get: function get$$1() {
                return this._startTime
            }
        }, {
            key: 'endTime',
            get: function get$$1() {
                return this._endTime
            }
        }, {
            key: 'date',
            get: function get$$1() {
                return this._date
            }
        }, {
            key: 'headerCell',
            get: function get$$1() {
                return this._headerCell
            },
            set: function set$$1(a) {
                this._headerCell = a
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                return this._cells
            },
            set: function set$$1(a) {
                this._cells = a
            }
        }, {
            key: 'timeRange',
            get: function get$$1() {
                return new cq(this.startTime, this.endTime)
            }
        }]);
        return cH
    }();
    var cI = function(D) {
        bu(cI, D);

        function cI(a) {
            br(this, cI);
            var b = bv(this, (cI.__proto__ || Object.getPrototypeOf(cI)).call(this, a));
            b._settings = b.calendar.timetableSettings;
            b._columns = new bB();
            b.initVars();
            b._dragging = false;
            b._resizing = false;
            b._selecting = false;
            b._selectionPaused = false;
            b.items = [];
            return b
        }
        bs(cI, [{
            key: 'initVars',
            value: function initVars() {
                if (this.settings.dates.count() === 0) {
                    var d = this.calendar.date;
                    this.settings.dates.add(new bx(Date.UTC(d.year, d.month, d.day, 0, 0, 0)))
                }
                this._groupColumns = 0;
                this._dateColumns = this.settings.dates.count();
                if (this.calendar.realGroupType !== bl.None) this._groupColumns = this.calendar.groupResources.count();
                this._totalColumns = this._groupColumns == 0 ? this._dateColumns : this._dateColumns * this._groupColumns;
                var a = bw.fromMinutes(this.settings.realEndTime - this.settings.startTime);
                this._totalCells = Math.floor(a.ticks / this.settings.cellTime.ticks);
                if (a.ticks % this.settings.cellTime.ticks !== 0) this._totalCells++;
                if (this.settings.cellTime.minutes > 0 && this.settings.cellTime.minutes <= 60 && this.settings.cellTime.minutes - this.settings.cellTime.minutes === 0 && this.settings.startTime % 60 === 0) {
                    this._canGroupHour = 60 % this.settings.cellTime.minutes === 0;
                    if (a.minutes % 60 !== 0) this._canGroupHour = false
                } else this._canGroupHour = false;
                this.createColumns()
            }
        }, {
            key: 'createColumn',
            value: function createColumn(a, b, c) {
                var d = a.clone();
                var e = new cH(b, d, bx.addMinutes(d, this.settings.startTime), bx.addMinutes(d, this.settings.endTime));
                e.resource = c;
                var f = new cA();
                f.startTime = d;
                f.endTime = bx.addTicksToDate(d, bx.MillisPerDay);
                f.resource = c;
                f.index = b;
                f.columnIndex = b;
                f.isHeader = true;
                e.headerCell = f;
                return e
            }
        }, {
            key: 'createColumns',
            value: function createColumns() {
                this._columns = new bO();
                var i = 0;
                if (this._groupColumns > 0) {
                    if (this.settings.reverseGrouping) {
                        for (var b = 0; b < this._groupColumns; b++) {
                            for (var c = 0; c < this._dateColumns; c++) {
                                var e = this.createColumn(this.settings.dates.items()[c], i, this.resources[b]);
                                this._columns.add(e);
                                i++
                            }
                        }
                    } else {
                        for (var c = 0; c < this._dateColumns; c++) {
                            for (var b = 0; b < this._groupColumns; b++) {
                                var e = this.createColumn(this.settings.dates.items()[c], i, this.resources[b]);
                                this._columns.add(e);
                                i++
                            }
                        }
                    }
                } else {
                    this.settings.dates.forEach(function(t) {
                        var d = new bx(Date.UTC(t.year, t.month, t.day, 0, 0, 0));
                        var a = this.createColumn(t, i, null);
                        this._columns.add(a);
                        i++
                    }, this)
                }
                this.startTime = this.itemsStartTime = this._columns.items()[0].startTime;
                this.endTime = this.itemsEndTime = this._columns.items()[this._columns.count() - 1].endTime;
                this.headerItemsStartTime = this.headerCells.items()[0].startTime;
                this.headerItemsEndTime = this.headerCells.items()[this.headerCells.count() - 1].endTime;
                this.rowsCount = this._totalCells;
                for (var i = 0, l = this._totalColumns; i < l; i++) {
                    this.skipNext = 0;
                    this.skipped = false;
                    var e = this._columns.items()[i];
                    for (var k = 0, m = this._totalCells; k < m; k++) {
                        if (this.skipNext > 0 && k <= this.skipNext) {
                            var f = this.addUnits(e.startTime, k % this.rowsCount);
                            var g = this.addUnits(e.startTime, k % this.rowsCount + 1)
                        } else {
                            var h = this.addUnits(e.startTime, k % this.rowsCount);
                            var j = this.addUnits(e.startTime, k % this.rowsCount + 1)
                        }
                        if (j._date.valueOf() > e.endTime._date.valueOf()) {
                            j = this._columns.items()[i].endTime
                        }
                        var n = new cA();
                        n.startTime = h;
                        n.endTime = j;
                        n.resource = this.resources != null && this.grouped ? e.resource : null;
                        n.index = k + this.rowsCount * i;
                        n.columnIndex = i;
                        e.cells.add(n)
                    }
                }
            }
        }, {
            key: 'getScroller',
            value: function getScroller() {
                if (!this.Dom.scroller) {
                    this.Dom.scroller = this.calendar.getElement().querySelector("div.mfp-scroll-container")
                }
                return this.Dom.scroller
            }
        }, {
            key: 'getContainer',
            value: function getContainer() {
                return this.getElement()
            }
        }, {
            key: 'getHeaderItemsCells',
            value: function getHeaderItemsCells() {
                if (!this.Dom.headerItemsCells) {
                    this.Dom.headerItemsCells = this.getHeader().querySelectorAll("td.mfp-item-cell")
                }
                return this.Dom.headerItemsCells
            }
        }, {
            key: 'getTimelineHeader',
            value: function getTimelineHeader() {
                if (!this.Dom.timeline) {
                    this.Dom.timeline = this.calendar.getElement().querySelector("div.mfp-header-timeline")
                }
                return this.Dom.timeline
            }
        }, {
            key: 'getGroupHeader',
            value: function getGroupHeader() {
                if (!this.Dom.groupHeader) {
                    this.Dom.groupHeader = this.calendar.getElement().querySelector("tr.mfp-group-row")
                }
                return this.Dom.groupHeader
            }
        }, {
            key: 'getContent',
            value: function getContent() {
                if (!this.Dom.content) {
                    this.Dom.content = this.calendar.getElement().querySelector("div.mfp-content")
                }
                return this.Dom.content
            }
        }, {
            key: 'getRows',
            value: function getRows() {
                return this.calendar.getElement().querySelectorAll('div.week')
            }
        }, {
            key: 'getBgCells',
            value: function getBgCells() {
                return this.calendar.getElement().querySelectorAll('div.mfp-cell-wrap')
            }
        }, {
            key: 'detach',
            value: function detach() {
                this.getHeader().removeEventListener("click", this.headerClickHandler);
                if (this.getGroupHeader()) this.getGroupHeader().removeEventListener("click", this.headerClickHandler);
                if (this.getTimelineHeader()) this.getTimelineHeader().removeEventListener("click", this.headerClickHandler);
                var a = this.getHeader().querySelectorAll("a.mfp-button");
                for (var i = 0; i < a.length; i++) {
                    a[i].removeEventListener('click', this.buttonClickHandler)
                }
            }
        }, {
            key: 'attach',
            value: function attach() {
                var a = this.getElement().querySelectorAll("div.mfp-column");
                var b = this.getHeaderItemsCells();
                for (var i = 0; i < this._columns.count(); i++) {
                    var c = this._columns.items()[i];
                    c.bgTable = a[i];
                    c.headerCell.bgCell = b[i];
                    var d = c.bgTable.querySelectorAll("div.mfp-cell-wrap");
                    for (var k = 0, m = c.cells.count(); k < m; k++) {
                        var e = c.cells.items()[k];
                        e.bgCell = d[k]
                    }
                }
                this.clear();
                this.init();
                this.getHeader().addEventListener("click", this.headerClickHandler);
                if (this.getGroupHeader()) this.getGroupHeader().addEventListener("click", this.headerClickHandler);
                if (this.getTimelineHeader()) this.getTimelineHeader().addEventListener("click", this.headerClickHandler);
                var f = this.getHeader().querySelectorAll("a.mfp-button");
                for (var i = 0; i < f.length; i++) {
                    f[i].addEventListener('click', this.buttonClickHandler)
                }
            }
        }, {
            key: 'getCellAt',
            value: function getCellAt(x, y, a) {
                var b = bz.getCursorPosition({
                    clientX: x,
                    clientY: y
                });
                var c = bz.isPointInBounds(b, this.getHeaderBounds());
                var i = this.getCellIndexAt(x, y, a);
                if (c) return this.headerCells.items()[i];
                else return this.cells.items()[i]
            }
        }, {
            key: 'getCellIndexAt',
            value: function getCellIndexAt(x, y, a) {
                if (!this.cellWidth) this.getDimensions();
                var b = bz.getCursorPosition({
                    clientX: x,
                    clientY: y
                });
                var c = bz.isPointInBounds(b, this.getScheduleBounds());
                var d = bz.isPointInBounds(b, this.getHeaderBounds());
                var e = null;
                var f = null;
                if (d) {
                    e = bz.getPointInBounds(b, this.getHeaderBounds());
                    f = this.headerCells.items()[parseInt((e.x + this.getScroller().scrollLeft) / this.cellWidth)];
                    if (f) {
                        if (this.grouped && a && f.resource != a) {
                            var g = this.getColumnIndexByTime(f.startTime._date.valueOf(), false, a);
                            var f = this.headerCells.items()[g]
                        }
                        return f.index
                    }
                } else if (c) {
                    e = bz.getPointInBounds(b, this.getScheduleBounds());
                    if (e.y >= this.cellHeight * this.rowsCount) return null;
                    e.x += this.getScroller().scrollLeft;
                    var h = parseInt(e.x / this.cellWidth);
                    var i = parseInt(e.y / this.cellHeight);
                    f = this.cells.items()[h * this.rowsCount + i];
                    if (f) {
                        if (this.grouped && a && f.resource != a) {
                            var g = this.getColumnIndexByTime(f.startTime._date.valueOf(), false, a);
                            var f = this.getTimeCell(f.startTime, false, g)
                        }
                        return f.index
                    }
                }
                return null
            }
        }, {
            key: 'getColumnIndexByTime',
            value: function getColumnIndexByTime(a, b, d) {
                if (a != null && a.getTime != null) a = a.getTime();
                for (var i = 0, l = this._columns.count(); i < l; i++) {
                    var c = this._columns.items()[i];
                    if (d === c.resource) {
                        var e = c.headerCell.startTime._date.valueOf();
                        var f = c.headerCell.endTime._date.valueOf();
                        if (a >= e && a <= f && b) return i;
                        if (a >= e && a < f) return i
                    }
                }
                return -1
            }
        }, {
            key: 'addUnits',
            value: function addUnits(a, b) {
                var c;
                var r = new bx(bx.addMilliseconds2(new Date(a._date.valueOf()), b * this.settings.cellTime.milliseconds));
                c = bx.addMilliseconds(a, b * this.settings.cellTime.milliseconds);
                if (c._date.valueOf() < r._date.valueOf()) {
                    return r
                }
                if (c._date.getHours() - r._date.getHours() > 1) {
                    this.skipNext = 3600000 + b * this.settings.cellTime.milliseconds
                } else {
                    if (this.skipNext > 0) {
                        this.skipped = true
                    }
                    if (this.skipNext === 0 && this.skipped) {
                        c._date.setHours(c._date.getHours() - 1)
                    }
                    this.skipNext = 0
                }
                return c
            }
        }, {
            key: 'getScheduleBounds',
            value: function getScheduleBounds() {
                return bz.getBounds(this.getContent())
            }
        }, {
            key: 'getHeaderBounds',
            value: function getHeaderBounds() {
                var a = this.getHeader();
                if (!a) return null;
                var b = a.querySelectorAll("div.mfp-title");
                if (b.length === 0) return {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                };
                var c = bz.getBounds(b[0]);
                var d = a.querySelector("tr.mfp-header-row");
                if (d) {
                    var e = d.offsetHeight;
                    c.y += e;
                    c.height -= e
                }
                return c
            }
        }, {
            key: 'getAllItemsInCell',
            value: function getAllItemsInCell(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.isItemInColumn(this.items[i].item, this.columns.items()[a.columnIndex])) {
                        if (this.items[i].startCellIndex <= a.index && this.items[i].lastCellIndex >= a.index) {
                            b.push(this.items[i])
                        }
                    }
                }
                return b
            }
        }, {
            key: 'startSelect',
            value: function startSelect(e) {
                var a = bz.getCursorPosition(e);
                var b = bz.isPointInBounds(a, this.getHeaderBounds());
                var c = this.getCellIndexAt(e.clientX, e.clientY, this.calendar.selectManager.resource);
                this.startCol = this.endCol = this.cells.items()[c].columnIndex;
                this.startCell = c;
                if (b) {
                    this.startCol = this.endCol = c;
                    var c = c * this.rowsCount;
                    this.startCell = c
                }
                this.calendar.selectManager.start = c;
                this.calendar.selectManager.end = c;
                if (b) {
                    this.calendar.selectManager.end = c + this.rowsCount - 1
                }
                this.calendar.selectManager.isInHeader = b
            }
        }, {
            key: 'doSelect',
            value: function doSelect(e) {
                if (this.calendar.selectManager.start != null) {
                    var a = bz.getCursorPosition(e);
                    var b = bz.isPointInBounds(a, this.getHeaderBounds());
                    if (b) {
                        var c = this.getCellIndexAt(e.clientX, e.clientY);
                        if (c != null) {
                            if (this.calendar.selectManager.resource && this._columns.items()[c].resource !== this.calendar.selectManager.resource) return;
                            this.endCol = c;
                            var d = Math.min(this.startCol, this.endCol);
                            var f = Math.max(this.startCol, this.endCol);
                            var g = d * this.rowsCount;
                            var h = f * this.rowsCount + this.rowsCount - 1;
                            this.calendar.selectManager.start = g;
                            this.calendar.selectManager.end = h;
                            this.calendar.selectManager.isInHeader = true
                        }
                    } else {
                        var i = this.getCellIndexAt(e.clientX, e.clientY);
                        if (i != null) {
                            if (this.calendar.selectManager.resource && this.cells.items()[i].resource !== this.calendar.selectManager.resource) return
                        }
                        if (this.calendar.selectManager.isInHeader) {
                            this.calendar.selectManager.start = this.startCell
                        }
                        i = this.getCellIndexAt(e.clientX, e.clientY, this.calendar.selectManager.resource);
                        if (i != null) {
                            this.endCol = this.cells.items()[i].columnIndex;
                            var g = this.calendar.selectManager.start;
                            var h = i;
                            this.calendar.selectManager.start = g;
                            this.calendar.selectManager.end = h;
                            this.calendar.selectManager.isInHeader = false
                        }
                    }
                }
            }
        }, {
            key: 'endSelection',
            value: function endSelection(e, a, b, c) {
                var d = bz.getCursorPosition(e);
                var f = bz.isPointInBounds(d, this.getHeaderBounds());
                var g = this.cells.items()[a].startTime;
                var h = this.cells.items()[b].endTime;
                if (f) {
                    var g = this.headerCells.items()[this.cells.items()[a].columnIndex].startTime;
                    var h = this.headerCells.items()[this.cells.items()[b].columnIndex].endTime
                }
                var i = new cB(g, h, '', f, this.calendar, c);
                bt(cI.prototype.__proto__ || Object.getPrototypeOf(cI.prototype), 'endSelection', this).call(this, i)
            }
        }, {
            key: 'updateDrag',
            value: function updateDrag(a, b, e) {
                if (b) {
                    var c = bz.getCursorPosition(e);
                    var d = bz.isPointInBounds(c, this.getHeaderBounds());
                    var f = a.isMilestone;
                    if (this.headerCells.contains(b) && !a.isHeader) {
                        a.item._allDayEvent = true;
                        a.isHeader = true;
                        a.cellsLength = 1;
                        a.item._startTime = b.startTime;
                        a.item._endTime = b.endTime;
                        a.length = a.getLength(a.item);
                        a.recreateVisual();
                        this.itemData.startTimeOffset2 = 0;
                        this.itemData.endTimeOffset2 = 0
                    } else if (!this.headerCells.contains(b) && a.isHeader) {
                        a.item._allDayEvent = false;
                        a.isHeader = false;
                        a.cellsLength = 1;
                        a.item._startTime = b.startTime;
                        a.item._endTime = b.endTime;
                        a.length = a.getLength(a.item);
                        a.recreateVisual();
                        this.itemData.startTimeOffset2 = 0;
                        this.itemData.endTimeOffset2 = 0
                    } else {
                        if (a.partIndex === 1) {
                            a.item._endTime = bx.addTicksToDate(b.endTime, this.itemData.endTimeOffset2);
                            a.item._startTime = bx.addTicksToDate(a.item.endTime, -a.length)
                        } else {
                            a.item._startTime = bx.addTicksToDate(b.startTime, this.itemData.startTimeOffset2);
                            if (f) a.item._endTime = a.item.startTime;
                            else a.item._endTime = bx.addTicksToDate(a.item.startTime, a.length)
                        }
                    }
                    a.item.setResource(b.resource);
                    a.removeParts();
                    if (d) var g = this.updateHeaderItem(a);
                    else var g = this.updateDayItem(a);
                    for (var k = 0, l = g.length; k < l; k++) {
                        if (g[k] !== undefined) this.placeItem(g[k])
                    }
                    a = g[a.partIndex === 1 ? g.length - 1 : 0];
                    this.dragContainer.data.appointment = a;
                    this.dragContainer.data.item = a.item;
                    this.updateLayout()
                }
            }
        }, {
            key: 'endItemDrag',
            value: function endItemDrag(e, a) {
                var b = this.itemData.item;
                var c = this.itemData.appointment;
                var d = this.getCellAt(e.clientX, e.clientY, a);
                if (d) {
                    var f = this.itemData.item.startTime.clone();
                    var g = this.itemData.item.endTime.clone();
                    var a = d.resource;
                    this.itemData.item._startTime = this.itemData.startTime;
                    this.itemData.item._endTime = this.itemData.endTime;
                    this.itemData.item.setResource(this.itemData.itemStartCell.resource);
                    bt(cI.prototype.__proto__ || Object.getPrototypeOf(cI.prototype), 'endItemDrag', this).call(this, {
                        startTime: f,
                        endTime: g,
                        resource: a
                    })
                } else {
                    this.cancelInteraction(bk.Drag)
                }
            }
        }, {
            key: 'endItemResize',
            value: function endItemResize(e) {
                var a = this.itemData.item;
                var b = this.itemData.appointment;
                var c = this.itemData.itemStartCell.resource;
                var d = this.getCellAt(e.clientX, e.clientY, c);
                if (d) {
                    var f = this.itemData.item.startTime.clone();
                    var g = this.itemData.item.endTime.clone();
                    var c = d.resource;
                    this.itemData.item._startTime = this.itemData.startTime;
                    this.itemData.item._endTime = this.itemData.endTime;
                    this.itemData.item.setResource(this.itemData.itemStartCell.resource);
                    bt(cI.prototype.__proto__ || Object.getPrototypeOf(cI.prototype), 'endItemResize', this).call(this, {
                        startTime: f,
                        endTime: g,
                        resource: c
                    })
                } else {
                    this.cancelInteraction(bk.Resize)
                }
            }
        }, {
            key: 'cancelInteraction',
            value: function cancelInteraction(a) {
                var b = this.calendar.getAppointmentById(this.itemData.item.id, this.itemData.item.occurrenceIndex);
                if (b.isHeader != this.itemData.isHeader) {
                    b.isHeader = this.itemData.isHeader;
                    b.item._allDayEvent = this.itemData.isHeader;
                    b.length = this.itemData.length;
                    b.recreateVisual()
                }
                var c = this.itemData.startTime;
                var d = this.itemData.endTime;
                var e = this.itemData.itemStartCell.resource;
                if (a == bk.Drag) bt(cI.prototype.__proto__ || Object.getPrototypeOf(cI.prototype), 'endItemDrag', this).call(this, {
                    startTime: c,
                    endTime: d,
                    resource: e
                });
                else bt(cI.prototype.__proto__ || Object.getPrototypeOf(cI.prototype), 'endItemResize', this).call(this, {
                    startTime: c,
                    endTime: d,
                    resource: e
                })
            }
        }, {
            key: 'updateResize',
            value: function updateResize(a, b, e) {
                var c = bz.getCursorPosition(e);
                var d = bz.isPointInBounds(c, this.getHeaderBounds());
                var f = b.index;
                var g = this.resizeStartCell.index;
                var h = this.resizeLastCell.index;
                if (this.itemData.handle === 'start') {
                    if (f < g) {
                        var s = b;
                        var e = this.resizeLastCell
                    } else {
                        if (f < h) {
                            var s = b;
                            var e = this.resizeLastCell
                        } else {
                            var s = this.resizeLastCell;
                            var e = b
                        }
                    }
                }
                if (this.itemData.handle === 'end') {
                    if (f > h) {
                        var s = this.resizeStartCell;
                        var e = b
                    } else {
                        if (f > g) {
                            var s = this.resizeStartCell;
                            var e = b
                        } else {
                            var s = b;
                            var e = this.resizeStartCell
                        }
                    }
                }
                var j;
                if (!s.isHeader && !e.isHeader || s.isHeader && e.isHeader) j = s.index < e.index ? s : e;
                else if (!s.isHeader) j = s.columnIndex <= e.index ? s : e;
                else if (!e.isHeader) j = s.index < e.columnIndex ? s : e;
                var k = j === s ? e : s;
                if (this.grouped && this.reverseGrouping && j.resource !== k.resource) {
                    return
                }
                if (this.itemData.handle === 'start') a.item._startTime = j.startTime;
                if (this.itemData.handle === 'end') a.item._endTime = k.endTime;
                if ((a.getLength(a.item) >= this.dayLength || d) && !a.isHeader) {
                    a.item._allDayEvent = true;
                    a.isHeader = true;
                    a.cellsLength = 1;
                    a.length = a.getLength(a.item);
                    a.recreateVisual();
                    d = true
                }
                if (a.getLength(a.item) < this.dayLength && a.isHeader) {
                    a.item._allDayEvent = false;
                    a.isHeader = false;
                    a.length = a.getLength(a.item);
                    a.cellsLength = a.length / this.cellTime;
                    a.recreateVisual();
                    d = false
                }
                a.item.setResource(this.itemData.itemStartCell.resource);
                a.removeParts();
                if (a.isHeader) var m = this.updateHeaderItem(a);
                else var m = this.updateDayItem(a);
                for (var i = 0, l = m.length; i < l; i++) {
                    this.placeItem(m[i])
                }
                if (this.itemData.handle === 'end') {
                    a = m[m.length - 1]
                } else {
                    a = m[0]
                }
                this.resizeContainer.data.appointment = a;
                this.updateLayout()
            }
        }, {
            key: 'getDimensions',
            value: function getDimensions() {
                this.cellWidth = this.getContent().offsetWidth / this._columns.count();
                this.cellHeight = this.getContent().children[0].children[0].offsetHeight
            }
        }, {
            key: 'clear',
            value: function clear() {
                bz.removeNodes(this.getElement().querySelectorAll('.mfp-item-wrap'));
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-cell'))
            }
        }, {
            key: 'init',
            value: function init() {
                if (!this.cellWidth) this.getDimensions();
                this.getAllItems();
                this.placeItems();
                this.updateLayout();
                if (this.calendar.itemSettings.showItems && this.settings.showDayHeader) {
                    this.getCues();
                    this.createCues()
                }
            }
        }, {
            key: 'placeItems',
            value: function placeItems() {
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].isHeader && !this.settings.showDayHeader) continue;
                    this.placeItem(this.items[i])
                }
            }
        }, {
            key: 'placeItem',
            value: function placeItem(a) {
                var b = this.getItemCell(a);
                if (b != null) {
                    if (b.nodeName.toUpperCase() === "TD" && b.innerHTML === "&nbsp;") b.innerHTML = "";
                    b.appendChild(a.element.parentNode)
                }
                if (a.isHeader) {
                    a.element.style.margin = this.calendar.itemSettings.spacing + 'px';
                    if (this.calendar.itemSettings.spacing > 0) {
                        a.element.style.marginBottom = '0px'
                    }
                } else {
                    a.updateTimeIndicator();
                    a.element.style.height = a.cellsLength * this.cellHeight + 'px';
                    if (this.calendar.itemSettings.spacing > 0) {
                        a.element.childNodes[0].style.marginRight = this.calendar.itemSettings.spacing + 'px'
                    }
                }
            }
        }, {
            key: 'getCues',
            value: function getCues() {
                this.cues = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    var a = this.items[i];
                    if (!a.isHeader) {
                        continue
                    }
                    var b = this.getHeaderItemRow(a);
                    if (b >= this.settings.maxItems) {
                        var c = this.getItemCueCells(a);
                        for (var k = 0; k < c.length; k++) {
                            if (this.cues.indexOf(c[k]) === -1) this.cues.push(c[k])
                        }
                        a.hidden = true;
                        a.element.parentNode.style.visibility = 'hidden';
                        a.element.parentNode.style.display = 'none'
                    } else {
                        a.hidden = false;
                        a.element.parentNode.style.visibility = 'visible';
                        a.element.parentNode.style.display = 'block'
                    }
                }
            }
        }, {
            key: 'getHeaderItemRow',
            value: function getHeaderItemRow(a) {
                if (!a.isHeader) {
                    return -1
                }
                var w = this.getItemCell(a).querySelectorAll(".mfp-item-wrap");
                for (var i = 0, l = w.length; i < l; i++) {
                    if (w[i] == bz.getParent(a.element, "mfp-item-wrap")) return i
                }
                return -1
            }
        }, {
            key: 'getItemCell',
            value: function getItemCell(a) {
                var b = null;
                var c = a.cellIndex;
                if (a.isHeader) {
                    var d = this.getHeaderItemsCells();
                    if (c >= 0 && c < d.length) b = d[c]
                } else {
                    if (c >= 0 && c < this.cells.count()) {
                        var e = this.cells.items()[c].bgCell;
                        var f = e.querySelectorAll(".mfp-item-cell");
                        if (f.length === 0) {
                            b = document.createElement("div");
                            b.className = "mfp-item-cell";
                            e.appendChild(b)
                        } else b = f[0]
                    }
                }
                return b
            }
        }, {
            key: 'updateLayout',
            value: function updateLayout() {
                var a = this.items;
                var b = null;
                var c = [];
                for (var i = 0, l = a.length; i < l; i++) {
                    b = a[i];
                    if (!b.isHeader) {
                        var d = parseInt(b.cellIndex / this.rowsCount);
                        if (c[d] == null) c[d] = [];
                        c[d].push(b)
                    }
                }
                for (var d = 0, colLength = c.length; d < colLength; d++) {
                    var e = c[d];
                    if (!e) {
                        continue
                    }
                    e.sort(this.calendar.sortAppointments);
                    var f = [];
                    for (var i = 0; i < this.rowsCount; i++) {
                        f.push([null])
                    }
                    var g = 0,
                        itemEnd = 0;
                    var h = 0;
                    var k = true;
                    for (var j = 0, dLen = e.length; j < dLen; j++) {
                        var m = e[j];
                        g = m.cellIndex % this.rowsCount;
                        itemEnd = g + m.cellsLength - 1;
                        h = 0;
                        do {
                            k = true;
                            if (f[0].length <= h) {
                                for (var i = 0; i < this.rowsCount; i++) {
                                    f[i].push(null)
                                }
                            }
                            for (var i = g; i <= itemEnd; i++) {
                                if (f[i][h] != null) {
                                    k = false;
                                    h++;
                                    break
                                }
                            }
                            if (k) {
                                m.intLeft = h;
                                for (var i = g; i <= itemEnd; i++) {
                                    f[i][h] = m.element
                                }
                            }
                        } while (!k)
                    }
                    var o = [];
                    var q = [];
                    var r = -1;
                    var s = -1;
                    var t = false;
                    var u = 0;
                    for (var i = 0, luc = f.length; i < luc; i++) {
                        var v = f[i];
                        q = new Array();
                        for (var j = 0, columnCount = v.length; j < columnCount; j++) {
                            var w = v[j];
                            if (w != null && q.indexOf(w) === -1) q.push(w)
                        }
                        if (q.length > 0) {
                            if (r === -1) {
                                r = i;
                                for (var j = 0; j < q.length; j++) {
                                    if (o.indexOf(q[j]) === -1) o.push(q[j])
                                }
                            } else {
                                t = false;
                                for (var j = 0; j < q.length; j++) {
                                    if (o.indexOf(q[j]) > -1) {
                                        t = true;
                                        break
                                    }
                                }
                                if (t) {
                                    for (var j = 0; j < q.length; j++) {
                                        if (o.indexOf(q[j]) === -1) o.push(q[j])
                                    }
                                } else {
                                    s = i;
                                    i--
                                }
                            }
                        } else {
                            if (r > -1) {
                                s = i;
                                i--
                            }
                        }
                        if (i == luc - 1 && r > -1 && s == -1) s = i + 1;
                        if (r > -1 && s > -1) {
                            var u = 0,
                                tMax = 0;
                            for (var x = r; x < s; x++) {
                                var v = f[x];
                                tMax = 0;
                                for (var y = 0; y < v.length; y++) {
                                    if (v[y] != null) {
                                        tMax++
                                    }
                                }
                                if (tMax > u) u = tMax
                            }
                            if (u > 0) {
                                for (var p = 0; p < o.length; p++) {
                                    var z = null;
                                    for (var n = 0; n < e.length; n++) {
                                        if (o[p] == e[n].element) {
                                            z = e[n];
                                            break
                                        }
                                    }
                                    if (z == null) continue;
                                    var A = parseInt(100 / u);
                                    var B = A * z.intLeft;
                                    var C = z.element.style;
                                    if (B > 0) C.left = B + "%";
                                    else C.left = "auto";
                                    C.width = A + "%";
                                    delete z.intLeft
                                }
                            }
                            o = [];
                            r = -1;
                            s = -1
                        }
                    }
                }
            }
        }, {
            key: 'updateHeaderItem',
            value: function updateHeaderItem(a, b) {
                var c = a.item;
                if (!c.visible) {
                    return a
                }
                var d = [];
                var e = [];
                var f = this.getItemColumns(c);
                if (f.length === 0) {
                    return []
                }
                var g = this.getItemGroupColumns(c);
                a.groupColumnIndex = g;
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    var h = bx.maxDate(c.startTime, this.headerItemsStartTime, false);
                    var k = bx.minDate(c.endTime, this.headerItemsEndTime, true);
                    if (g.length === 1) {
                        for (var j = 0, m = f.length - 1; j <= m; j++) {
                            var n = bx.maxDate(c.startTime, this._columns.items()[f[j]].headerCell.startTime, false);
                            var o = bx.minDate(c.endTime, this._columns.items()[f[j]].headerCell.endTime, true);
                            if (n.equals(o)) continue;
                            var p = 0;
                            if (n.compareTo(c.startTime) === 1) p = 1;
                            if (o.compareTo(c.endTime) === -1) p = -1;
                            if (n.compareTo(c.startTime) === 1 && o.compareTo(c.endTime) === -1) p = 0;
                            var q = this.headerCells.items()[f[j]];
                            var r = this.headerCells.items()[f[j]];
                            var s = {
                                prototype: a,
                                type: 'part',
                                cellIndex: q.index,
                                cellsLength: r.index - q.index + 1,
                                colIndex: q.rowIndex,
                                isPartial: true,
                                partIndex: p,
                                isHeader: true,
                                lastCellIndex: r.index,
                                startCellIndex: q.index,
                                groupColumnIndex: a.groupColumnIndex
                            };
                            var t = new cp(s);
                            t.composite = true;
                            d.push(t);
                            e.push(a)
                        }
                    } else if (g.length > 1) {
                        for (var i = 0, l = g.length; i < l; i++) {
                            var n = bx.maxDate(c.startTime, this._columns.items()[g[i]].headerCell.startTime, false);
                            var o = bx.minDate(c.endTime, this._columns.items()[g[i]].headerCell.endTime, true);
                            if (n.equals(o)) continue;
                            var p = 0;
                            if (n.compareTo(c.startTime) === 1) p = 1;
                            if (o.compareTo(c.endTime) === -1) p = -1;
                            if (n.compareTo(c.startTime) === 1 && o.compareTo(c.endTime) === -1) p = 0;
                            var q = this.headerCells.items()[g[i]];
                            var r = this.headerCells.items()[g[i]];
                            var s = {
                                prototype: a,
                                type: 'part',
                                cellIndex: q.index,
                                cellsLength: r.index - q.index + 1,
                                colIndex: q.rowIndex,
                                isPartial: true,
                                partIndex: p,
                                isHeader: true,
                                lastCellIndex: r.index,
                                startCellIndex: q.index,
                                groupColumnIndex: a.groupColumnIndex[i]
                            };
                            var t = new cp(s);
                            t.composite = true;
                            d.push(t);
                            e.push(a)
                        }
                    }
                } else if (g.length > 1) {
                    for (var i = 0, l = g.length; i < l; i++) {
                        var u = this.headerCells.items()[g[i]];
                        var r = u;
                        var s = {
                            prototype: a,
                            type: 'part',
                            cellIndex: u.index,
                            cellsLength: r.index - u.index + 1,
                            colIndex: g[i],
                            isPartial: true,
                            partIndex: undefined,
                            isHeader: true,
                            lastCellIndex: r.index,
                            startCellIndex: u.index,
                            groupColumnIndex: a.groupColumnIndex[i]
                        };
                        var t = new cp(s);
                        t.composite = true;
                        d.push(t);
                        e.push(a)
                    }
                } else if (g.length === 1) {
                    var u = this.headerCells.items()[f[0]];
                    var r = u;
                    a.lastCellIndex = r.index;
                    a.startCellIndex = u.index;
                    a.cellsLength = r.index - u.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = u.index;
                    a.colIndex = u.rowIndex;
                    a.partIndex = undefined;
                    a.updateVisual()
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b !== false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'updateDayItem',
            value: function updateDayItem(a, b) {
                var c = a.item;
                if (!c.visible) {
                    return a
                }
                var d = [];
                var e = [];
                var f = this.getItemColumns(c);
                if (f.length === 0) {
                    return []
                }
                var g = this.getItemGroupColumns(c);
                a.groupColumnIndex = g;
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    if (g.length === 1) {
                        for (var j = 0, m = f.length - 1; j <= m; j++) {
                            var h = bx.maxDate(c.startTime, this._columns.items()[f[j]].startTime, false);
                            var k = bx.minDate(c.endTime, this._columns.items()[f[j]].endTime, true);
                            if (h.equals(k)) continue;
                            var n = 0;
                            if (h.compareTo(c.startTime) === 1) n = 1;
                            if (k.compareTo(c.endTime) === -1) n = -1;
                            if (h.compareTo(c.startTime) === 1 && k.compareTo(c.endTime) === -1) n = 0;
                            var o = this.getTimeCell(h, false, f[0]);
                            var p = this.getTimeCell(k, true, f[0]);
                            if (o === undefined || p === undefined) {
                                continue
                            }
                            var q = {
                                prototype: a,
                                type: 'part',
                                cellIndex: o.index,
                                cellsLength: p.index - o.index + 1,
                                colIndex: o.rowIndex,
                                isPartial: true,
                                partIndex: n,
                                lastCellIndex: p.index,
                                startCellIndex: o.index,
                                groupColumnIndex: a.groupColumnIndex
                            };
                            var r = new cp(q);
                            r.composite = true;
                            d.push(r);
                            e.push(a)
                        }
                    } else if (g.length > 1) {
                        for (var i = 0, l = g.length; i < l; i++) {
                            var h = bx.maxDate(c.startTime, this._columns.items()[g[i]].startTime, false);
                            var k = bx.minDate(c.endTime, this._columns.items()[g[i]].endTime, true);
                            if (h.equals(k)) continue;
                            var n = 0;
                            if (h.compareTo(c.startTime) === 1) n = 1;
                            if (k.compareTo(c.endTime) === -1) n = -1;
                            if (h.compareTo(c.startTime) === 1 && k.compareTo(c.endTime) === -1) n = 0;
                            var o = this.getTimeCell(h, false, g[i]);
                            var p = this.getTimeCell(k, true, g[i]);
                            var q = {
                                prototype: a,
                                type: 'part',
                                cellIndex: o.index,
                                cellsLength: p.index - o.index + 1,
                                colIndex: o.rowIndex,
                                isPartial: true,
                                partIndex: n,
                                lastCellIndex: p.index,
                                startCellIndex: o.index,
                                groupColumnIndex: a.groupColumnIndex[i]
                            };
                            var r = new cp(q);
                            r.composite = true;
                            d.push(r);
                            e.push(a)
                        }
                    }
                } else if (g.length > 1) {
                    for (var i = 0, l = g.length; i < l; i++) {
                        var s = this.getTimeCell(c.startTime, false, g[i]);
                        if (c.startTime._date.valueOf() === c.endTime._date.valueOf()) {
                            var p = s
                        } else {
                            var p = this.getTimeCell(c.endTime, true, g[i])
                        }
                        var q = {
                            prototype: a,
                            type: 'part',
                            cellIndex: s.index,
                            cellsLength: p.index - s.index + 1,
                            colIndex: a.groupColumnIndex[i],
                            isPartial: true,
                            partIndex: undefined,
                            lastCellIndex: p.index,
                            startCellIndex: s.index,
                            groupColumnIndex: a.groupColumnIndex[i]
                        };
                        var r = new cp(q);
                        r.composite = true;
                        d.push(r);
                        e.push(a)
                    }
                } else if (g.length === 1) {
                    var s = this.getTimeCell(c.startTime, false, f[0]);
                    if (c.startTime._date.valueOf() === c.endTime._date.valueOf()) {
                        var p = s
                    } else {
                        var p = this.getTimeCell(c.endTime, true, f[0])
                    }
                    a.lastCellIndex = p.index;
                    a.startCellIndex = s.index;
                    a.cellsLength = p.index - s.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = s.index;
                    a.colIndex = s.rowIndex;
                    a.partIndex = undefined;
                    a.updateVisual()
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b !== false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'updateItem',
            value: function updateItem(a, b) {
                if (a.isHeader) return this.updateHeaderItem(a, b);
                else return this.updateDayItem(a, b)
            }
        }, {
            key: 'getColumnsByResource',
            value: function getColumnsByResource(a) {
                var b = [];
                for (var i = 0, l = this._columns.count(); i < l; i++) {
                    if (a === this._columns.items()[i].resource) {
                        b.push(this._columns.items()[i])
                    }
                }
                return b
            }
        }, {
            key: 'getItemStartColumn',
            value: function getItemStartColumn(a) {
                var b = a.startTime.getDate().valueOf();
                for (var i = 0, l = this._columns.count(); i < l; i++) {
                    var c = this._columns.items()[i].date.valueOf();
                    if (b <= c) {
                        if (this.grouped) {
                            if (a.hasResource(this._columns.items()[i].resource)) {
                                return i
                            }
                        } else {
                            return i
                        }
                    }
                }
            }
        }, {
            key: 'getItemEndColumn',
            value: function getItemEndColumn(a, b) {
                var c = this._columns.count() - 1;
                var d = a.endTime.getDate().valueOf();
                var e = this.getColumnsByResource(b);
                for (var i = 0, l = e.length; i < l; i++) {
                    var f = e[i].date.valueOf();
                    if (d === f) {
                        if (a.endTime._date.valueOf() > e[i].startTime._date.valueOf()) {
                            return e[i].index
                        } else if (i > 0) {
                            return e[i - 1].index
                        } else {
                            return null
                        }
                    }
                    if (d > f) {
                        c = e[i].index
                    }
                }
                return c
            }
        }, {
            key: 'getTimeCell',
            value: function getTimeCell(a, b, c) {
                if (c.length != undefined) c = c[0];
                if (c < 0 || c > this._columns.count() - 1) return null;
                if (a._date.valueOf() < this.dates[0].startTime._date.valueOf()) return null;
                if (a._date.valueOf() > this.dates[this.dates.length - 1].endTime._date.valueOf()) return null;
                var d = null;
                if (c != null && this.resources != null && this.grouped) d = this._columns.items()[c].resource;
                for (var i = 0, l = this._columns.count(); i < l; i++) {
                    if (d === this._columns.items()[i].resource) {
                        if (a._date.valueOf() >= this._columns.items()[i].startTime._date.valueOf() && (a._date.valueOf() < this._columns.items()[i].endTime._date.valueOf() || b && a._date.valueOf() === this._columns.items()[i].endTime._date.valueOf())) {
                            var e = i * this.rowsCount + Math.floor(bx.millisecondsBetween(a, this._columns.items()[i].startTime) / this.settings.cellTime.milliseconds);
                            if (e > this._columns.items()[i].cells.items()[this._columns.items()[i].cells.count() - 1].index) {
                                if (b && a.equals(this._columns.items()[i].cells.items()[this._columns.items()[i].cells.count() - 1].endTime)) return this.cells.items()[e - 1];
                                else return null
                            }
                            if (b && bx.isSameDate(a, this.cells.items()[e].startTime) && e > 0) {
                                e -= 1
                            }
                            return this.cells.items()[e]
                        }
                    }
                }
                return this.cells.items()[e]
            }
        }, {
            key: 'getTimeCells',
            value: function getTimeCells(a, b, c, d) {
                var e = null;
                var f = null;
                if (d.length != undefined) d = d[0];
                if (d < 0 || d > this._columns.count() - 1) return null;
                var g = this._columns.items()[d].resource;
                var h = this._columns.items()[d].cells;
                if (a.valueOf() < this.startTime.valueOf()) {
                    e = h.items()[0]
                } else if (a.valueOf() > this.endTime.valueOf()) {
                    return []
                } else {
                    e = this.getTimeCell(a, false, d)
                }
                if (b !== null && typeof b !== "undefined" && typeof b._date !== "undefined") {
                    if (b.valueOf() > this.endTime.valueOf()) {
                        f = h.items()[h.count() - 1]
                    } else if (b.valueOf() < this.startTime.valueOf()) {
                        return []
                    } else {
                        f = this.getTimeCell(b, c, d)
                    }
                } else {
                    f = e
                }
                if (e != null && f != null) {
                    var j = [];
                    if (e === f) {
                        j.push(e)
                    } else {
                        for (var i = e.index; i < f.index; i++) {
                            var k = this.cells.items()[i];
                            if (g == null || g && this.columns.items()[k.columnIndex].resource == g) {
                                j.push(k)
                            }
                        }
                    }
                    return j
                }
                return []
            }
        }, {
            key: 'getItemColumns',
            value: function getItemColumns(a) {
                var b = this.getItemStartColumn(a);
                if (b === undefined) {
                    return []
                }
                var c = this._columns.items()[b].resource;
                var d = this.getItemEndColumn(a, c);
                if (d == null || d < b) {
                    d = b
                }
                var e = [];
                for (var i = b; i <= d; i++) {
                    if (this.grouped) {
                        if (this._columns.items()[i].resource === c) {
                            if (e.indexOf(i) === -1) {
                                e.push(i)
                            }
                        }
                    } else {
                        if (e.indexOf(i) === -1) {
                            e.push(i)
                        }
                    }
                }
                return e
            }
        }, {
            key: 'getItemGroupColumns',
            value: function getItemGroupColumns(a) {
                var b = [];
                var c = null;
                if (!this.grouped || this.resources == null) {
                    b.push(0)
                } else {
                    for (var i = 0, l = this._columns.count(); i < l; i++) {
                        if (this.isItemInColumn(a, this._columns.items()[i])) {
                            if (a.hasResource(this._columns.items()[i].resource)) {
                                if (!this._columns.items()[i].resource.equals(c)) {
                                    b.push(i);
                                    c = this._columns.items()[i].resource
                                }
                            }
                        }
                    }
                }
                return b
            }
        }, {
            key: 'isItemInColumn',
            value: function isItemInColumn(a, b) {
                if (a.startTime >= b.startTime && a.startTime < b.endTime) return true;
                if (a.endTime > b.startTime && a.endTime <= b.endTime) return true;
                if (a.startTime < b.startTime && a.endTime >= b.endTime) return true;
                return false
            }
        }, {
            key: 'isComposite',
            value: function isComposite(a) {
                if (a.startTime._date.valueOf() == a.endTime._date.valueOf()) {
                    return false
                }
                if (a.allDayEvent) {
                    if (a.startTime._date.valueOf() < this.headerItemsStartTime._date.valueOf()) return true;
                    if (a.endTime._date.valueOf() > this.headerItemsEndTime._date.valueOf()) return true;
                    var b = this.getItemColumns(a);
                    if (b.length > 1) return true
                } else {
                    if (a.startTime._date.valueOf() < this.itemsStartTime._date.valueOf()) return true;
                    if (a.endTime._date.valueOf() > this.itemsEndTime._date.valueOf()) return true;
                    var b = this.getItemColumns(a);
                    if (b.length > 1) return true;
                    var c = this.getTimeCell(a.startTime, false, b[0]);
                    if (c == null) return true;
                    var d = this.getTimeCell(a.endTime, true, b[0]);
                    if (d == null) return true
                }
                return false
            }
        }, {
            key: 'hasVisibleParts',
            value: function hasVisibleParts(a) {
                if (this.grouped && this.getItemGroupColumns(a).length == 0) return false;
                if (a.startTime._date.valueOf() >= this._columns.items()[0].startTime._date.valueOf() && a.startTime._date.valueOf() < this._columns.items()[this._columns.count() - 1].endTime._date.valueOf()) return true;
                if (a.endTime._date.valueOf() > this._columns.items()[0].startTime._date.valueOf() && a.endTime._date.valueOf() < this._columns.items()[this._columns.count() - 1].endTime._date.valueOf()) return true;
                if (a.startTime._date.valueOf() <= this._columns.items()[0].startTime._date.valueOf() && a.endTime._date.valueOf() >= this._columns.items()[0].endTime._date.valueOf()) return true;
                return false
            }
        }, {
            key: 'getItemsInCell',
            value: function getItemsInCell(a, b) {
                var c = [];
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].startCellIndex == a.index) c.push(b[i])
                }
                return c
            }
        }, {
            key: 'getHeaderType',
            value: function getHeaderType(a) {
                var h = this.getGroupHeader();
                if (h) {
                    if (h.contains(a)) return bo.Group
                }
                h = this.getTimelineHeader();
                if (h) {
                    if (h.contains(a)) return bo.Timeline
                }
                return bt(cI.prototype.__proto__ || Object.getPrototypeOf(cI.prototype), 'getHeaderType', this).call(this, a)
            }
        }, {
            key: 'drawHeader',
            value: function drawHeader() {
                var a = null;
                var b = this.calendar.renderer;
                var c = document.createElement("div");
                c.className = "mfp-header";
                a = c;
                var e = document.createElement("div");
                e.className = "mfp-corner";
                e.innerHTML = "&nbsp;";
                c.appendChild(e);
                var d = this.drawColumnHeaders();
                c.appendChild(d);
                var f = document.createElement("div");
                f.className = "mfp-scrollfix";
                f.innerHTML = "&nbsp;";
                c.appendChild(f);
                return a
            }
        }, {
            key: 'drawColumnHeaders',
            value: function drawColumnHeaders() {
                var a = null;
                var c = this.calendar.renderer;
                var e = document.createElement("div");
                e.className = "mfp-title";
                a = e;
                var f = document.createElement("table");
                f.className = "mfp-title-table";
                f.cellSpacing = 0;
                f.cellPadding = 0;
                e.appendChild(f);
                if (this._groupColumns > 0 && this.settings.reverseGrouping) {
                    var g = this.drawGroupHeaders();
                    f.appendChild(g)
                }
                if ((this.settings.headerStyle & T.Title) == T.Title) {
                    var d = this.drawDateHeaders();
                    f.appendChild(d)
                }
                if (this._groupColumns > 0 && !this.settings.reverseGrouping) {
                    var g = this.drawGroupHeaders();
                    f.appendChild(g)
                }
                if (this.settings.showDayHeader) {
                    var h = document.createElement("tr");
                    h.className = "mfp-item-row";
                    f.appendChild(h);
                    for (var i = 0; i < this._totalColumns; i++) {
                        var j = document.createElement("td");
                        j.className = "mfp-item-cell";
                        j.innerHTML = "&nbsp;";
                        h.appendChild(j)
                    }
                    var h = document.createElement("tr");
                    h.className = "mfp-empty-row";
                    f.appendChild(h);
                    for (var i = 0; i < this._totalColumns; i++) {
                        var j = document.createElement("td");
                        h.appendChild(j)
                    }
                }
                if ((this.settings.headerStyle & T.Buttons) == T.Buttons) {
                    var b = this.drawHeaderButtons();
                    e.appendChild(b)
                }
                return a
            }
        }, {
            key: 'drawDateHeaders',
            value: function drawDateHeaders() {
                var a = null;
                if (this._groupColumns > 0 && this.settings.reverseGrouping) {
                    var b = document.createElement("tr");
                    b.className = "mfp-group-row";
                    a = b;
                    for (var c = 0; c < this._groupColumns; c++) {
                        for (var i = 0; i < this._dateColumns; i++) {
                            var d = document.createElement("td");
                            if (this.calendar.showTooltips) d.title = this.settings.dates.items()[i].toString(this.formatInfo.dateFormats.longDate, this.formatInfo);
                            d.innerHTML = this.settings.dates.items()[i].toString(this.settings.titleFormat, this.formatInfo);
                            b.appendChild(d)
                        }
                    }
                } else {
                    var b = document.createElement("tr");
                    b.className = "mfp-header-row";
                    a = b;
                    for (var i = 0; i < this._dateColumns; i++) {
                        var d = document.createElement("td");
                        if (this.calendar.showTooltips) d.title = this.settings.dates.items()[i].toString(this.formatInfo.dateFormats.longDate, this.formatInfo);
                        if (this._groupColumns > 0) d.colSpan = this._groupColumns;
                        d.innerHTML = this.settings.dates.items()[i].toString(this.settings.titleFormat, this.formatInfo);
                        b.appendChild(d)
                    }
                }
                return a
            }
        }, {
            key: 'drawHeaderButtons',
            value: function drawHeaderButtons() {
                var a = null;
                var d = document.createElement("div");
                d.className = "mfp-button-wrap";
                a = d;
                var b = document.createElement("a");
                bz.addCssClass(b, "mfp-button");
                bz.addCssClass(b, "mfp-button-prev");
                if (this.calendar.showTooltips) {
                    b.title = this.getButtonTooltip(-1)
                }
                var s = document.createElement("span");
                b.appendChild(s);
                d.appendChild(b);
                var c = document.createElement("a");
                bz.addCssClass(c, "mfp-button");
                bz.addCssClass(c, "mfp-button-next");
                if (this.calendar.showTooltips) {
                    c.title = this.getButtonTooltip(1)
                }
                s = document.createElement("span");
                c.appendChild(s);
                d.appendChild(c);
                return a
            }
        }, {
            key: 'getButtonTooltip',
            value: function getButtonTooltip(f) {
                var s = "";
                for (var i = 0; i < this.settings.dates.count(); i++) {
                    s += i !== this.settings.dates.count() - 1 ? "\n" : ""
                }
                return s
            }
        }, {
            key: 'drawGroupHeaders',
            value: function drawGroupHeaders() {
                var a = null;
                var b = null;
                if (this._groupColumns > 0 && this.settings.reverseGrouping) {
                    var c = document.createElement("tr");
                    c.className = "mfp-header-row";
                    a = c;
                    for (var i = 0; i < this._groupColumns; i++) {
                        b = this.calendar.getResourceName(this.calendar.groupResources.items()[i]);
                        var d = document.createElement("td");
                        d.className = "text";
                        if (this._groupColumns > 0) d.colSpan = this._dateColumns;
                        d.innerHTML = b || "&nbsp;";
                        c.appendChild(d)
                    }
                } else {
                    var c = document.createElement("tr");
                    c.className = "mfp-group-row";
                    a = c;
                    for (var i = 0; i < this._dateColumns; i++) {
                        for (var e = 0; e < this._groupColumns; e++) {
                            b = this.calendar.getResourceName(this.calendar.groupResources.items()[e]);
                            var d = document.createElement("td");
                            d.className = "text";
                            d.innerHTML = b || "&nbsp;";
                            c.appendChild(d)
                        }
                    }
                }
                return a
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var a = null;
                var b = this.calendar.renderer;
                var s = document.createElement("div");
                s.className = "mfp-scroll-container";
                a = s;
                var e = document.createElement("div");
                e.className = "mfp-content-wrap";
                s.appendChild(e);
                var t = this.drawTimeline(b);
                e.appendChild(t);
                var f = document.createElement("div");
                f.className = "mfp-content";
                e.appendChild(f);
                var g = "";
                for (var h = 0; h < this._totalColumns; h++) {
                    var i = document.createElement("div");
                    i.className = "mfp-column";
                    f.appendChild(i);
                    for (var j = 0; j < this._totalCells; j++) {
                        g = "mfp-cell-wrap";
                        if (h == 0) g += " left";
                        if (h == this._totalColumns - 1) g += " right";
                        if (j == 0) g += " top";
                        if (j == this._totalCells - 1) g += " bottom";
                        var d = document.createElement("div");
                        i.appendChild(d);
                        d.className = g;
                        d.style.zIndex = this._totalCells - j;
                        d.style.height = this.settings.cellSize + "px";
                        var c = document.createElement("div");
                        c.className = "mfp-cell";
                        d.appendChild(c)
                    }
                }
                return a
            }
        }, {
            key: 'drawTimeline',
            value: function drawTimeline() {
                var a = null;
                var d;
                var b = bw.fromMinutes(this.settings.realEndTime);
                var t = document.createElement("div");
                t.className = "mfp-header-timeline";
                t.cellPadding = 0;
                t.cellSpacing = 0;
                a = t;
                var e = bw.fromMinutes(this.settings.startTime);
                var f = Math.round(60 / this.settings.cellTime.minutes);
                if (this.settings.groupHours && this._canGroupHour) {
                    var g = false;
                    while (e.ticks < b.ticks) {
                        g = false;
                        d = new bx(e.milliseconds);
                        var j = document.createElement("div");
                        j.className = "mfp-hour";
                        j.style.height = this.settings.cellSize + "px";
                        t.appendChild(j);
                        if (this.calendar.showTooltips) j.title = d.toString(this.formatInfo.dateFormats.longTime, this.formatInfo);
                        var s = document.createElement("span");
                        if (this.settings.twelveHourFormat) s.innerHTML = d.toString("h ", this.formatInfo).trim();
                        else s.innerHTML = d.toString("H ", this.formatInfo).trim();
                        var c = document.createElement("div");
                        c.className = "mfp-group-time";
                        j.appendChild(c);
                        var k = document.createElement("div");
                        if (this.settings.twelveHourFormat && e.subtract(this.settings.cellTime).hours !== e.hours && (e.hours == 0 || e.hours == 12) || e.equals(bw.fromMinutes(this.settings.startTime)) && this.settings.showAM) {
                            g = true;
                            k.className = "mfp-AMPM"
                        } else {
                            k.className = "mfp-minute"
                        }
                        if (this.calendar.showTooltips) k.title = d.toString(this.formatInfo.dateFormats.longTime, this.formatInfo);
                        if (g) k.innerHTML = d.toString("tt", this.formatInfo).trim();
                        else k.innerHTML = this.getMinutesText(d);
                        c.appendChild(k);
                        e = e.add(this.settings.cellTime);
                        d = new bx(e.milliseconds);
                        for (var i = 1; i < f; i++) {
                            var l = document.createElement("div");
                            l.className = "mfp-minute";
                            if (this.calendar.showTooltips) l.title = new bx(e.milliseconds).toString(this.formatInfo.dateFormats.longTime, this.formatInfo);
                            c.appendChild(l);
                            if (this.settings.showMinutes) l.innerHTML = this.getMinutesText(new bx(e.milliseconds));
                            else l.innerHTML = "&nbsp;";
                            e = e.add(this.settings.cellTime);
                            d = new bx(e.milliseconds)
                        }
                        j.appendChild(s)
                    }
                } else {
                    while (e.ticks < b.ticks) {
                        d = new bx(e.milliseconds);
                        var c = document.createElement("div");
                        c.className = "mfp-time";
                        t.appendChild(c);
                        if (this.calendar.showTooltips) c.title = d.toString(this.formatInfo.dateFormats.longTime, this.formatInfo);
                        var h = d.toString(this.settings.generalFormat, this.formatInfo).trim();
                        c.style.height = this.settings.cellSize + "px";
                        c.innerHTML = h;
                        e = e.add(this.settings.cellTime);
                        d = new bx(e.milliseconds)
                    }
                }
                return a
            }
        }, {
            key: 'getMinutesText',
            value: function getMinutesText(a) {
                return a.toString("mm", this.formatInfo).trim()
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                var a = new bB();
                this._columns.forEach(function(t) {
                    a.addRange(t.cells.items())
                }, this);
                return a
            }
        }, {
            key: 'headerCells',
            get: function get$$1() {
                var a = new bB();
                this._columns.forEach(function(t) {
                    a.add(t.headerCell)
                }, this);
                return a
            }
        }, {
            key: 'dates',
            get: function get$$1() {
                var a = [];
                this._columns.forEach(function(t) {
                    if (a.indexOf(t.date) === -1) a.push(t)
                }, this);
                return a
            }
        }, {
            key: 'groupResources',
            get: function get$$1() {
                if (this.grouped && this.settings.reverseGrouping) {
                    var a = [];
                    this._columns.forEach(function(t) {
                        a.push(t.resource)
                    }, this);
                    return a
                }
                return this.calendar.groupResources.items()
            }
        }, {
            key: 'orientation',
            get: function get$$1() {
                return W.Vertical
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return "mfp-timetable-view"
            }
        }, {
            key: 'cueCells',
            get: function get$$1() {
                var a = this.getHeader().querySelector(".mfp-empty-row");
                if (a) return a.childNodes;
                return []
            }
        }]);
        return cI
    }(cy);
    var cJ = function(D) {
        bu(cJ, D);

        function cJ(a) {
            br(this, cJ);
            var b = bv(this, (cJ.__proto__ || Object.getPrototypeOf(cJ)).call(this, a));
            b._settings = b.calendar.timetableSettings;
            b._columns = new bB();
            b.initVars();
            b._dragging = false;
            b._resizing = false;
            b._selecting = false;
            b._selectionPaused = false;
            b.items = [];
            return b
        }
        bs(cJ, [{
            key: 'initVars',
            value: function initVars() {
                if (this.settings.dates.count() === 0) {
                    var d = this.calendar.date;
                    this.settings.dates.add(new bx(Date.UTC(d.year, d.month, d.day, 0, 0, 0)))
                }
                this._groupColumns = 0;
                this._dateColumns = this.settings.dates.count();
                if (this.calendar.realGroupType !== bl.None) this._groupColumns = this.calendar.groupResources.count();
                this._totalColumns = this._groupColumns == 0 ? this._dateColumns : this._dateColumns * this._groupColumns;
                var a = bw.fromMinutes(this.settings.realEndTime - this.settings.startTime);
                this._totalCells = Math.floor(a.ticks / this.settings.cellTime.ticks);
                if (a.ticks % this.settings.cellTime.ticks !== 0) this._totalCells++;
                if (this.settings.cellTime.minutes > 0 && this.settings.cellTime.minutes <= 60 && this.settings.cellTime.minutes - this.settings.cellTime.minutes === 0 && this.settings.startTime % 60 === 0) {
                    this._canGroupHour = 60 % this.settings.cellTime.minutes === 0;
                    if (a.minutes % 60 !== 0) this._canGroupHour = false
                } else this._canGroupHour = false;
                this.createColumns()
            }
        }, {
            key: 'createColumn',
            value: function createColumn(a, b, c) {
                var d = a.clone();
                var e = new cH(b, d, bx.addMinutes(d, this.settings.startTime), bx.addMinutes(d, this.settings.endTime));
                e.resource = c;
                var f = new cA();
                f.startTime = d;
                f.endTime = bx.addTicksToDate(d, bx.MillisPerDay);
                f.resource = c;
                f.index = b;
                f.columnIndex = b;
                f.isHeader = true;
                e.headerCell = f;
                return e
            }
        }, {
            key: 'createColumns',
            value: function createColumns() {
                this._columns = new bO();
                var i = 0;
                if (this._groupColumns > 0) {
                    if (this.settings.reverseGrouping) {
                        for (var b = 0; b < this._groupColumns; b++) {
                            for (var c = 0; c < this._dateColumns; c++) {
                                var e = this.createColumn(this.settings.dates.items()[c], i, this.resources[b]);
                                this._columns.add(e);
                                i++
                            }
                        }
                    } else {
                        for (var c = 0; c < this._dateColumns; c++) {
                            for (var b = 0; b < this._groupColumns; b++) {
                                var e = this.createColumn(this.settings.dates.items()[c], i, this.resources[b]);
                                this._columns.add(e);
                                i++
                            }
                        }
                    }
                } else {
                    this.settings.dates.forEach(function(t) {
                        var d = new bx(Date.UTC(t.year, t.month, t.day, 0, 0, 0));
                        var a = this.createColumn(t, i, null);
                        this._columns.add(a);
                        i++
                    }, this)
                }
                this.startTime = this.itemsStartTime = this._columns.items()[0].startTime;
                this.endTime = this.itemsEndTime = this._columns.items()[this._columns.count() - 1].endTime;
                this.headerItemsStartTime = this.headerCells.items()[0].startTime;
                this.headerItemsEndTime = this.headerCells.items()[this.headerCells.count() - 1].endTime;
                this.rowsCount = this._totalCells;
                for (var i = 0, l = this._totalColumns; i < l; i++) {
                    this.skipNext = 0;
                    this.skipped = false;
                    var e = this._columns.items()[i];
                    for (var k = 0, m = this._totalCells; k < m; k++) {
                        if (this.skipNext > 0 && k <= this.skipNext) {
                            var f = this.addUnits(e.startTime, k % this.rowsCount);
                            var g = this.addUnits(e.startTime, k % this.rowsCount + 1)
                        } else {
                            var h = this.addUnits(e.startTime, k % this.rowsCount);
                            var j = this.addUnits(e.startTime, k % this.rowsCount + 1)
                        }
                        if (j._date.valueOf() > e.endTime._date.valueOf()) {
                            j = this._columns.items()[i].endTime
                        }
                        var n = new cA();
                        n.startTime = h;
                        n.endTime = j;
                        n.resource = this.resources != null && this.grouped ? e.resource : null;
                        n.index = k + this.rowsCount * i;
                        n.columnIndex = i;
                        e.cells.add(n)
                    }
                }
            }
        }, {
            key: 'getScroller',
            value: function getScroller() {
                if (!this.Dom.scroller) {
                    this.Dom.scroller = this.calendar.getElement().querySelector("div.mfp-scroll-container")
                }
                return this.Dom.scroller
            }
        }, {
            key: 'getContainer',
            value: function getContainer() {
                return this.getElement()
            }
        }, {
            key: 'getHeaderItemsCells',
            value: function getHeaderItemsCells() {
                if (!this.Dom.headerItemsCells) {
                    this.Dom.headerItemsCells = this.getHeader().querySelectorAll("td.mfp-item-cell")
                }
                return this.Dom.headerItemsCells
            }
        }, {
            key: 'getTimelineHeader',
            value: function getTimelineHeader() {
                if (!this.Dom.timeline) {
                    this.Dom.timeline = this.calendar.getElement().querySelector("div.mfp-header-timeline")
                }
                return this.Dom.timeline
            }
        }, {
            key: 'getGroupHeader',
            value: function getGroupHeader() {
                if (!this.Dom.groupHeader) {
                    this.Dom.groupHeader = this.getHeader().querySelector("td.mfp-group-row")
                }
                return this.Dom.groupHeader
            }
        }, {
            key: 'getContent',
            value: function getContent() {
                if (!this.Dom.content) {
                    this.Dom.content = this.calendar.getElement().querySelector("div.mfp-content")
                }
                return this.Dom.content
            }
        }, {
            key: 'getRows',
            value: function getRows() {
                return this.calendar.getElement().querySelectorAll('div.week')
            }
        }, {
            key: 'getBgCells',
            value: function getBgCells() {
                return this.calendar.getElement().querySelectorAll('div.mfp-cell-wrap')
            }
        }, {
            key: 'detach',
            value: function detach() {
                this.getHeader().removeEventListener("click", this.headerClickHandler);
                if (this.getGroupHeader()) this.getGroupHeader().removeEventListener("click", this.headerClickHandler);
                if (this.getTimelineHeader()) this.getTimelineHeader().removeEventListener("click", this.headerClickHandler);
                var a = this.getHeader().querySelectorAll("a.mfp-button");
                for (var i = 0; i < a.length; i++) {
                    a[i].removeEventListener('click', this.buttonClickHandler)
                }
            }
        }, {
            key: 'attach',
            value: function attach() {
                var a = this.getElement().querySelectorAll("div.mfp-column");
                var b = this.getHeaderItemsCells();
                for (var i = 0; i < this._columns.count(); i++) {
                    var c = this._columns.items()[i];
                    c.bgTable = a[i];
                    c.headerCell.bgCell = b[i];
                    var d = c.bgTable.querySelectorAll("div.mfp-cell-wrap");
                    for (var k = 0, m = c.cells.count(); k < m; k++) {
                        var e = c.cells.items()[k];
                        e.bgCell = d[k]
                    }
                }
                this.clear();
                this.init();
                this.getHeader().addEventListener("click", this.headerClickHandler);
                if (this.getGroupHeader()) this.getGroupHeader().addEventListener("click", this.headerClickHandler);
                if (this.getTimelineHeader()) this.getTimelineHeader().addEventListener("click", this.headerClickHandler);
                var f = this.getHeader().querySelectorAll("a.mfp-button");
                for (var i = 0; i < f.length; i++) {
                    f[i].addEventListener('click', this.buttonClickHandler)
                }
            }
        }, {
            key: 'getCellAt',
            value: function getCellAt(x, y, a) {
                var b = bz.getCursorPosition({
                    clientX: x,
                    clientY: y
                });
                var c = bz.isPointInBounds(b, this.getHeaderBounds());
                var i = this.getCellIndexAt(x, y, a);
                if (c) return this.headerCells.items()[i];
                else return this.cells.items()[i]
            }
        }, {
            key: 'getCellIndexAt',
            value: function getCellIndexAt(x, y, a) {
                if (!this.cellWidth) this.getDimensions();
                var b = bz.getCursorPosition({
                    clientX: x,
                    clientY: y
                });
                var c = bz.isPointInBounds(b, this.getScheduleBounds());
                var d = bz.isPointInBounds(b, this.getHeaderBounds());
                var e = null;
                var f = null;
                if (d) {
                    e = bz.getPointInBounds(b, this.getHeaderBounds());
                    f = this.headerCells.items()[parseInt(e.y / this.cellHeight)];
                    if (f) {
                        if (this.grouped && a && f.resource != a) {
                            var g = this.getColumnIndexByTime(f.startTime._date.valueOf(), false, a);
                            var f = this.headerCells.items()[g]
                        }
                        return f.index
                    }
                } else if (c) {
                    e = bz.getPointInBounds(b, this.getScheduleBounds());
                    if (e.y >= this.cellHeight * this.rowsCount) return null;
                    var h = parseInt(e.x / this.cellWidth);
                    var i = parseInt(e.y / this.cellHeight);
                    f = this.cells.items()[h + this.rowsCount * i];
                    if (f) {
                        if (this.grouped && a && f.resource != a) {
                            var g = this.getColumnIndexByTime(f.startTime._date.valueOf(), false, a);
                            var f = this.getTimeCell(f.startTime, false, g)
                        }
                        return f.index
                    }
                }
                return null
            }
        }, {
            key: 'getColumnIndexByTime',
            value: function getColumnIndexByTime(a, b, d) {
                if (a != null && a.getTime != null) a = a.getTime();
                for (var i = 0, l = this._columns.count(); i < l; i++) {
                    var c = this._columns.items()[i];
                    if (d === c.resource) {
                        var e = c.headerCell.startTime._date.valueOf();
                        var f = c.headerCell.endTime._date.valueOf();
                        if (a >= e && a <= f && b) return i;
                        if (a >= e && a < f) return i
                    }
                }
                return -1
            }
        }, {
            key: 'addUnits',
            value: function addUnits(a, b) {
                var c;
                var r = new bx(bx.addMilliseconds2(new Date(a._date.valueOf()), b * this.settings.cellTime.milliseconds));
                c = bx.addMilliseconds(a, b * this.settings.cellTime.milliseconds);
                if (c._date.valueOf() < r._date.valueOf()) {
                    return r
                }
                if (c._date.getHours() - r._date.getHours() > 1) {
                    this.skipNext = 3600000 + b * this.settings.cellTime.milliseconds
                } else {
                    if (this.skipNext > 0) {
                        this.skipped = true
                    }
                    if (this.skipNext === 0 && this.skipped) {
                        c._date.setHours(c._date.getHours() - 1)
                    }
                    this.skipNext = 0
                }
                return c
            }
        }, {
            key: 'getScheduleBounds',
            value: function getScheduleBounds() {
                return bz.getBounds(this.getContent())
            }
        }, {
            key: 'getHeaderBounds',
            value: function getHeaderBounds() {
                var a = this.getHeader();
                if (!a) return null;
                var b = a.querySelectorAll("div.mfp-title");
                if (b.length === 0) return {
                    x: 0,
                    y: 0,
                    width: 0,
                    height: 0
                };
                var c = bz.getBounds(b[0]);
                var d = a.querySelector("td.mfp-header-row");
                if (d) {
                    var e = d.offsetWidth;
                    c.x += e;
                    c.width -= e
                }
                return c
            }
        }, {
            key: 'getAllItemsInCell',
            value: function getAllItemsInCell(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.isItemInColumn(this.items[i].item, this.columns.items()[a.columnIndex])) {
                        if (this.items[i].startCellIndex <= a.index && this.items[i].lastCellIndex >= a.index) {
                            b.push(this.items[i])
                        }
                    }
                }
                return b
            }
        }, {
            key: 'startSelect',
            value: function startSelect(e) {
                var a = bz.getCursorPosition(e);
                var b = bz.isPointInBounds(a, this.getHeaderBounds());
                var c = this.getCellIndexAt(e.clientX, e.clientY, this.calendar.selectManager.resource);
                this.startCol = this.endCol = this.cells.items()[c].columnIndex;
                this.startCell = c;
                if (b) {
                    this.startCol = this.endCol = c;
                    var c = c * this.rowsCount;
                    this.startCell = c
                }
                this.calendar.selectManager.start = c;
                this.calendar.selectManager.end = c;
                if (b) {
                    this.calendar.selectManager.end = c + this.rowsCount - 1
                }
                this.calendar.selectManager.isInHeader = b
            }
        }, {
            key: 'doSelect',
            value: function doSelect(e) {
                if (this.calendar.selectManager.start != null) {
                    var a = bz.getCursorPosition(e);
                    var b = bz.isPointInBounds(a, this.getHeaderBounds());
                    if (b) {
                        var c = this.getCellIndexAt(e.clientX, e.clientY);
                        if (c != null) {
                            if (this.calendar.selectManager.resource && this._columns.items()[c].resource !== this.calendar.selectManager.resource) return;
                            this.endCol = c;
                            var d = Math.min(this.startCol, this.endCol);
                            var f = Math.max(this.startCol, this.endCol);
                            var g = d * this.rowsCount;
                            var h = f * this.rowsCount + this.rowsCount - 1;
                            this.calendar.selectManager.start = g;
                            this.calendar.selectManager.end = h;
                            this.calendar.selectManager.isInHeader = true
                        }
                    } else {
                        var i = this.getCellIndexAt(e.clientX, e.clientY);
                        if (i != null) {
                            if (this.calendar.selectManager.resource && this.cells.items()[i].resource !== this.calendar.selectManager.resource) return
                        }
                        if (this.calendar.selectManager.isInHeader) {
                            this.calendar.selectManager.start = this.startCell
                        }
                        i = this.getCellIndexAt(e.clientX, e.clientY, this.calendar.selectManager.resource);
                        if (i != null) {
                            this.endCol = this.cells.items()[i].columnIndex;
                            var g = this.calendar.selectManager.start;
                            var h = i;
                            this.calendar.selectManager.start = g;
                            this.calendar.selectManager.end = h;
                            this.calendar.selectManager.isInHeader = false
                        }
                    }
                }
            }
        }, {
            key: 'endSelection',
            value: function endSelection(e, a, b, c) {
                var d = bz.getCursorPosition(e);
                var f = bz.isPointInBounds(d, this.getHeaderBounds());
                var g = this.cells.items()[a].startTime;
                var h = this.cells.items()[b].endTime;
                if (f) {
                    var g = this.headerCells.items()[this.cells.items()[a].columnIndex].startTime;
                    var h = this.headerCells.items()[this.cells.items()[b].columnIndex].endTime
                }
                var i = new cB(g, h, '', f, this.calendar, c);
                bt(cJ.prototype.__proto__ || Object.getPrototypeOf(cJ.prototype), 'endSelection', this).call(this, i)
            }
        }, {
            key: 'updateDrag',
            value: function updateDrag(a, b, e) {
                if (b) {
                    var c = bz.getCursorPosition(e);
                    var d = bz.isPointInBounds(c, this.getHeaderBounds());
                    var f = a.isMilestone;
                    if (this.headerCells.contains(b) && !a.isHeader) {
                        a.item._allDayEvent = true;
                        a.isHeader = true;
                        a.cellsLength = 1;
                        a.item._startTime = b.startTime;
                        a.item._endTime = b.endTime;
                        a.length = a.getLength(a.item);
                        a.recreateVisual();
                        this.itemData.startTimeOffset2 = 0;
                        this.itemData.endTimeOffset2 = 0
                    } else if (!this.headerCells.contains(b) && a.isHeader) {
                        a.item._allDayEvent = false;
                        a.isHeader = false;
                        a.cellsLength = 1;
                        a.item._startTime = b.startTime;
                        a.item._endTime = b.endTime;
                        a.length = a.getLength(a.item);
                        a.recreateVisual();
                        this.itemData.startTimeOffset2 = 0;
                        this.itemData.endTimeOffset2 = 0
                    } else {
                        if (a.partIndex === 1) {
                            a.item._endTime = bx.addTicksToDate(b.endTime, this.itemData.endTimeOffset2);
                            a.item._startTime = bx.addTicksToDate(a.item.endTime, -a.length)
                        } else {
                            a.item._startTime = bx.addTicksToDate(b.startTime, this.itemData.startTimeOffset2);
                            if (f) a.item._endTime = a.item.startTime;
                            else a.item._endTime = bx.addTicksToDate(a.item.startTime, a.length)
                        }
                    }
                    a.item.setResource(b.resource);
                    a.removeParts();
                    if (d) var g = this.updateHeaderItem(a);
                    else var g = this.updateDayItem(a);
                    for (var k = 0, l = g.length; k < l; k++) {
                        if (g[k] !== undefined) this.placeItem(g[k])
                    }
                    a = g[a.partIndex === 1 ? g.length - 1 : 0];
                    this.dragContainer.data.appointment = a;
                    this.dragContainer.data.item = a.item;
                    this.updateLayout()
                }
            }
        }, {
            key: 'endItemDrag',
            value: function endItemDrag(e, a) {
                var b = this.itemData.item;
                var c = this.itemData.appointment;
                var d = this.getCellAt(e.clientX, e.clientY, a);
                if (d) {
                    var f = this.itemData.item.startTime.clone();
                    var g = this.itemData.item.endTime.clone();
                    var a = d.resource;
                    this.itemData.item._startTime = this.itemData.startTime;
                    this.itemData.item._endTime = this.itemData.endTime;
                    this.itemData.item.setResource(this.itemData.itemStartCell.resource);
                    bt(cJ.prototype.__proto__ || Object.getPrototypeOf(cJ.prototype), 'endItemDrag', this).call(this, {
                        startTime: f,
                        endTime: g,
                        resource: a
                    })
                } else {
                    this.cancelInteraction(bk.Drag)
                }
            }
        }, {
            key: 'endItemResize',
            value: function endItemResize(e) {
                var a = this.itemData.item;
                var b = this.itemData.appointment;
                var c = this.itemData.itemStartCell.resource;
                var d = this.getCellAt(e.clientX, e.clientY, c);
                if (d) {
                    var f = this.itemData.item.startTime.clone();
                    var g = this.itemData.item.endTime.clone();
                    var c = d.resource;
                    this.itemData.item._startTime = this.itemData.startTime;
                    this.itemData.item._endTime = this.itemData.endTime;
                    this.itemData.item.setResource(this.itemData.itemStartCell.resource);
                    bt(cJ.prototype.__proto__ || Object.getPrototypeOf(cJ.prototype), 'endItemResize', this).call(this, {
                        startTime: f,
                        endTime: g,
                        resource: c
                    })
                } else {
                    this.cancelInteraction(bk.Resize)
                }
            }
        }, {
            key: 'cancelInteraction',
            value: function cancelInteraction(a) {
                var b = this.calendar.getAppointmentById(this.itemData.item.id, this.itemData.item.occurrenceIndex);
                if (b.isHeader != this.itemData.isHeader) {
                    b.isHeader = this.itemData.isHeader;
                    b.item._allDayEvent = this.itemData.isHeader;
                    b.length = this.itemData.length;
                    b.recreateVisual()
                }
                var c = this.itemData.startTime;
                var d = this.itemData.endTime;
                var e = this.itemData.itemStartCell.resource;
                if (a == bk.Drag) bt(cJ.prototype.__proto__ || Object.getPrototypeOf(cJ.prototype), 'endItemDrag', this).call(this, {
                    startTime: c,
                    endTime: d,
                    resource: e
                });
                else bt(cJ.prototype.__proto__ || Object.getPrototypeOf(cJ.prototype), 'endItemResize', this).call(this, {
                    startTime: c,
                    endTime: d,
                    resource: e
                })
            }
        }, {
            key: 'updateResize',
            value: function updateResize(a, b, e) {
                var c = bz.getCursorPosition(e);
                var d = bz.isPointInBounds(c, this.getHeaderBounds());
                var f = b.index;
                var g = this.resizeStartCell.index;
                var h = this.resizeLastCell.index;
                if (this.itemData.handle === 'start') {
                    if (f < g) {
                        var s = b;
                        var e = this.resizeLastCell
                    } else {
                        if (f < h) {
                            var s = b;
                            var e = this.resizeLastCell
                        } else {
                            var s = this.resizeLastCell;
                            var e = b
                        }
                    }
                }
                if (this.itemData.handle === 'end') {
                    if (f > h) {
                        var s = this.resizeStartCell;
                        var e = b
                    } else {
                        if (f > g) {
                            var s = this.resizeStartCell;
                            var e = b
                        } else {
                            var s = b;
                            var e = this.resizeStartCell
                        }
                    }
                }
                var j;
                if (!s.isHeader && !e.isHeader || s.isHeader && e.isHeader) j = s.index < e.index ? s : e;
                else if (!s.isHeader) j = s.columnIndex <= e.index ? s : e;
                else if (!e.isHeader) j = s.index < e.columnIndex ? s : e;
                var k = j === s ? e : s;
                if (this.grouped && this.reverseGrouping && j.resource !== k.resource) {
                    return
                }
                if (this.itemData.handle === 'start') a.item._startTime = j.startTime;
                if (this.itemData.handle === 'end') a.item._endTime = k.endTime;
                if ((a.getLength(a.item) >= this.dayLength || d) && !a.isHeader) {
                    a.item._allDayEvent = true;
                    a.isHeader = true;
                    a.cellsLength = 1;
                    a.length = a.getLength(a.item);
                    a.recreateVisual();
                    d = true
                }
                if (a.getLength(a.item) < this.dayLength && a.isHeader) {
                    a.item._allDayEvent = false;
                    a.isHeader = false;
                    a.length = a.getLength(a.item);
                    a.cellsLength = a.length / this.cellTime;
                    a.recreateVisual();
                    d = false
                }
                a.item.setResource(this.itemData.itemStartCell.resource);
                a.removeParts();
                if (a.isHeader) var m = this.updateHeaderItem(a);
                else var m = this.updateDayItem(a);
                for (var i = 0, l = m.length; i < l; i++) {
                    this.placeItem(m[i])
                }
                if (this.itemData.handle === 'end') {
                    a = m[m.length - 1]
                } else {
                    a = m[0]
                }
                this.resizeContainer.data.appointment = a;
                this.updateLayout()
            }
        }, {
            key: 'getDimensions',
            value: function getDimensions() {
                var a = this.getContent().querySelectorAll("div.mfp-cell-wrap")[0];
                this.cellWidth = a.offsetWidth;
                this.cellHeight = a.offsetHeight
            }
        }, {
            key: 'clear',
            value: function clear() {
                bz.removeNodes(this.getElement().querySelectorAll('.mfp-item-wrap'));
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-cell'))
            }
        }, {
            key: 'init',
            value: function init() {
                if (!this.cellWidth) this.getDimensions();
                this.getAllItems();
                this.placeItems();
                this.updateLayout();
                if (this.calendar.itemSettings.showItems && this.settings.showDayHeader) {
                    this.getCues();
                    this.createCues()
                }
            }
        }, {
            key: 'placeItems',
            value: function placeItems() {
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].isHeader && !this.settings.showDayHeader) continue;
                    this.placeItem(this.items[i])
                }
            }
        }, {
            key: 'placeItem',
            value: function placeItem(a) {
                var b = this.getItemCell(a);
                if (b != null) {
                    if (b.nodeName.toUpperCase() === "TD" && b.innerHTML === "&nbsp;") b.innerHTML = "";
                    b.appendChild(a.element.parentNode)
                }
                if (a.isHeader) {
                    a.element.style.margin = this.calendar.itemSettings.spacing + 'px';
                    if (this.calendar.itemSettings.spacing > 0) {
                        a.element.style.marginRight = '0px'
                    }
                } else {
                    a.updateTimeIndicator();
                    a.element.style.width = a.cellsLength * this.cellWidth + 'px';
                    if (this.calendar.itemSettings.spacing > 0) {
                        a.element.childNodes[0].style.marginBottom = this.calendar.itemSettings.spacing + 'px'
                    }
                }
            }
        }, {
            key: 'getCues',
            value: function getCues() {
                this.cues = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    var a = this.items[i];
                    if (!a.isHeader) {
                        continue
                    }
                    var b = this.getHeaderItemRow(a);
                    if (b >= this.settings.maxItems) {
                        var c = this.getItemCueCells(a);
                        for (var k = 0; k < c.length; k++) {
                            if (this.cues.indexOf(c[k]) === -1) this.cues.push(c[k])
                        }
                        a.hidden = true;
                        a.element.parentNode.style.visibility = 'hidden';
                        a.element.parentNode.style.display = 'none'
                    } else {
                        a.hidden = false;
                        a.element.parentNode.style.visibility = 'visible';
                        a.element.parentNode.style.display = 'block'
                    }
                }
            }
        }, {
            key: 'getHeaderItemRow',
            value: function getHeaderItemRow(a) {
                if (!a.isHeader) {
                    return -1
                }
                var w = this.getItemCell(a).querySelectorAll(".mfp-item-wrap");
                for (var i = 0, l = w.length; i < l; i++) {
                    if (w[i] == bz.getParent(a.element, "mfp-item-wrap")) return i
                }
                return -1
            }
        }, {
            key: 'getItemCell',
            value: function getItemCell(a) {
                var b = null;
                var c = a.cellIndex;
                if (a.isHeader) {
                    var d = this.getHeaderItemsCells();
                    if (c >= 0 && c < d.length) b = d[c]
                } else {
                    if (c >= 0 && c < this.cells.count()) {
                        var e = this.cells.items()[c].bgCell;
                        var f = e.querySelectorAll(".mfp-item-cell");
                        if (f.length === 0) {
                            b = document.createElement("div");
                            b.className = "mfp-item-cell";
                            e.appendChild(b)
                        } else b = f[0]
                    }
                }
                return b
            }
        }, {
            key: 'updateLayout',
            value: function updateLayout() {
                var a = this.items;
                var b = null;
                var c = [];
                for (var i = 0, l = a.length; i < l; i++) {
                    b = a[i];
                    if (!b.isHeader) {
                        var d = parseInt(b.cellIndex / this.rowsCount);
                        if (c[d] == null) c[d] = [];
                        c[d].push(b)
                    }
                }
                for (var d = 0, colLength = c.length; d < colLength; d++) {
                    var e = c[d];
                    if (!e) {
                        continue
                    }
                    e.sort(this.calendar.sortAppointments);
                    var f = [];
                    for (var i = 0; i < this.rowsCount; i++) {
                        f.push([null])
                    }
                    var g = 0,
                        itemEnd = 0;
                    var h = 0;
                    var k = true;
                    for (var j = 0, dLen = e.length; j < dLen; j++) {
                        var m = e[j];
                        g = m.cellIndex % this.rowsCount;
                        itemEnd = g + m.cellsLength - 1;
                        h = 0;
                        do {
                            k = true;
                            if (f[0].length <= h) {
                                for (var i = 0; i < this.rowsCount; i++) {
                                    f[i].push(null)
                                }
                            }
                            for (var i = g; i <= itemEnd; i++) {
                                if (f[i][h] != null) {
                                    k = false;
                                    h++;
                                    break
                                }
                            }
                            if (k) {
                                m.intLeft = h;
                                for (var i = g; i <= itemEnd; i++) {
                                    f[i][h] = m.element
                                }
                            }
                        } while (!k)
                    }
                    var o = [];
                    var q = [];
                    var r = -1;
                    var s = -1;
                    var t = false;
                    var u = 0;
                    for (var i = 0, luc = f.length; i < luc; i++) {
                        var v = f[i];
                        q = new Array();
                        for (var j = 0, columnCount = v.length; j < columnCount; j++) {
                            var w = v[j];
                            if (w != null && q.indexOf(w) === -1) q.push(w)
                        }
                        if (q.length > 0) {
                            if (r === -1) {
                                r = i;
                                for (var j = 0; j < q.length; j++) {
                                    if (o.indexOf(q[j]) === -1) o.push(q[j])
                                }
                            } else {
                                t = false;
                                for (var j = 0; j < q.length; j++) {
                                    if (o.indexOf(q[j]) > -1) {
                                        t = true;
                                        break
                                    }
                                }
                                if (t) {
                                    for (var j = 0; j < q.length; j++) {
                                        if (o.indexOf(q[j]) === -1) o.push(q[j])
                                    }
                                } else {
                                    s = i;
                                    i--
                                }
                            }
                        } else {
                            if (r > -1) {
                                s = i;
                                i--
                            }
                        }
                        if (i == luc - 1 && r > -1 && s == -1) s = i + 1;
                        if (r > -1 && s > -1) {
                            var u = 0,
                                tMax = 0;
                            for (var x = r; x < s; x++) {
                                var v = f[x];
                                tMax = 0;
                                for (var y = 0; y < v.length; y++) {
                                    if (v[y] != null) {
                                        tMax++
                                    }
                                }
                                if (tMax > u) u = tMax
                            }
                            if (u > 0) {
                                for (var p = 0; p < o.length; p++) {
                                    var z = null;
                                    for (var n = 0; n < e.length; n++) {
                                        if (o[p] == e[n].element) {
                                            z = e[n];
                                            break
                                        }
                                    }
                                    if (z == null) continue;
                                    var A = parseInt(100 / u);
                                    var B = A * z.intLeft;
                                    var C = z.element.style;
                                    if (B > 0) C.top = B + "%";
                                    else C.top = "auto";
                                    C.height = A + "%";
                                    delete z.intLeft
                                }
                            }
                            o = [];
                            r = -1;
                            s = -1
                        }
                    }
                }
            }
        }, {
            key: 'updateHeaderItem',
            value: function updateHeaderItem(a, b) {
                var c = a.item;
                if (!c.visible) {
                    return a
                }
                var d = [];
                var e = [];
                var f = this.getItemColumns(c);
                if (f.length === 0) {
                    return []
                }
                var g = this.getItemGroupColumns(c);
                a.groupColumnIndex = g;
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    var h = bx.maxDate(c.startTime, this.headerItemsStartTime, false);
                    var k = bx.minDate(c.endTime, this.headerItemsEndTime, true);
                    if (g.length === 1) {
                        for (var j = 0, m = f.length - 1; j <= m; j++) {
                            var n = bx.maxDate(c.startTime, this._columns.items()[f[j]].headerCell.startTime, false);
                            var o = bx.minDate(c.endTime, this._columns.items()[f[j]].headerCell.endTime, true);
                            if (n.equals(o)) continue;
                            var p = 0;
                            if (n.compareTo(c.startTime) === 1) p = 1;
                            if (o.compareTo(c.endTime) === -1) p = -1;
                            if (n.compareTo(c.startTime) === 1 && o.compareTo(c.endTime) === -1) p = 0;
                            var q = this.headerCells.items()[f[j]];
                            var r = this.headerCells.items()[f[j]];
                            var s = {
                                prototype: a,
                                type: 'part',
                                cellIndex: q.index,
                                cellsLength: r.index - q.index + 1,
                                colIndex: q.rowIndex,
                                isPartial: true,
                                partIndex: p,
                                isHeader: true,
                                lastCellIndex: r.index,
                                startCellIndex: q.index,
                                groupColumnIndex: a.groupColumnIndex
                            };
                            var t = new cp(s);
                            t.composite = true;
                            d.push(t);
                            e.push(a)
                        }
                    } else if (g.length > 1) {
                        for (var i = 0, l = g.length; i < l; i++) {
                            var n = bx.maxDate(c.startTime, this._columns.items()[g[i]].headerCell.startTime, false);
                            var o = bx.minDate(c.endTime, this._columns.items()[g[i]].headerCell.endTime, true);
                            if (n.equals(o)) continue;
                            var p = 0;
                            if (n.compareTo(c.startTime) === 1) p = 1;
                            if (o.compareTo(c.endTime) === -1) p = -1;
                            if (n.compareTo(c.startTime) === 1 && o.compareTo(c.endTime) === -1) p = 0;
                            var q = this.headerCells.items()[g[i]];
                            var r = this.headerCells.items()[g[i]];
                            var s = {
                                prototype: a,
                                type: 'part',
                                cellIndex: q.index,
                                cellsLength: r.index - q.index + 1,
                                colIndex: q.rowIndex,
                                isPartial: true,
                                partIndex: p,
                                isHeader: true,
                                lastCellIndex: r.index,
                                startCellIndex: q.index,
                                groupColumnIndex: a.groupColumnIndex[i]
                            };
                            var t = new cp(s);
                            t.composite = true;
                            d.push(t);
                            e.push(a)
                        }
                    }
                } else if (g.length > 1) {
                    for (var i = 0, l = g.length; i < l; i++) {
                        var u = this.headerCells.items()[g[i]];
                        var r = u;
                        var s = {
                            prototype: a,
                            type: 'part',
                            cellIndex: u.index,
                            cellsLength: r.index - u.index + 1,
                            colIndex: g[i],
                            isPartial: true,
                            partIndex: undefined,
                            isHeader: true,
                            lastCellIndex: r.index,
                            startCellIndex: u.index,
                            groupColumnIndex: a.groupColumnIndex[i]
                        };
                        var t = new cp(s);
                        t.composite = true;
                        d.push(t);
                        e.push(a)
                    }
                } else if (g.length === 1) {
                    var u = this.headerCells.items()[f[0]];
                    var r = u;
                    a.lastCellIndex = r.index;
                    a.startCellIndex = u.index;
                    a.cellsLength = r.index - u.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = u.index;
                    a.colIndex = u.rowIndex;
                    a.partIndex = undefined;
                    a.updateVisual()
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b !== false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'updateDayItem',
            value: function updateDayItem(a, b) {
                var c = a.item;
                if (!c.visible) {
                    return a
                }
                var d = [];
                var e = [];
                var f = this.getItemColumns(c);
                if (f.length === 0) {
                    return []
                }
                var g = this.getItemGroupColumns(c);
                a.groupColumnIndex = g;
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    if (g.length === 1) {
                        for (var j = 0, m = f.length - 1; j <= m; j++) {
                            var h = bx.maxDate(c.startTime, this._columns.items()[f[j]].startTime, false);
                            var k = bx.minDate(c.endTime, this._columns.items()[f[j]].endTime, true);
                            if (h.equals(k)) continue;
                            var n = 0;
                            if (h.compareTo(c.startTime) === 1) n = 1;
                            if (k.compareTo(c.endTime) === -1) n = -1;
                            if (h.compareTo(c.startTime) === 1 && k.compareTo(c.endTime) === -1) n = 0;
                            var o = this.getTimeCell(h, false, f[0]);
                            var p = this.getTimeCell(k, true, f[0]);
                            if (o === undefined || p === undefined) {
                                continue
                            }
                            var q = {
                                prototype: a,
                                type: 'part',
                                cellIndex: o.index,
                                cellsLength: p.index - o.index + 1,
                                colIndex: o.rowIndex,
                                isPartial: true,
                                partIndex: n,
                                lastCellIndex: p.index,
                                startCellIndex: o.index,
                                groupColumnIndex: a.groupColumnIndex
                            };
                            var r = new cp(q);
                            r.composite = true;
                            d.push(r);
                            e.push(a)
                        }
                    } else if (g.length > 1) {
                        for (var i = 0, l = g.length; i < l; i++) {
                            var h = bx.maxDate(c.startTime, this._columns.items()[g[i]].startTime, false);
                            var k = bx.minDate(c.endTime, this._columns.items()[g[i]].endTime, true);
                            if (h.equals(k)) continue;
                            var n = 0;
                            if (h.compareTo(c.startTime) === 1) n = 1;
                            if (k.compareTo(c.endTime) === -1) n = -1;
                            if (h.compareTo(c.startTime) === 1 && k.compareTo(c.endTime) === -1) n = 0;
                            var o = this.getTimeCell(h, false, g[i]);
                            var p = this.getTimeCell(k, true, g[i]);
                            var q = {
                                prototype: a,
                                type: 'part',
                                cellIndex: o.index,
                                cellsLength: p.index - o.index + 1,
                                colIndex: o.rowIndex,
                                isPartial: true,
                                partIndex: n,
                                lastCellIndex: p.index,
                                startCellIndex: o.index,
                                groupColumnIndex: a.groupColumnIndex[i]
                            };
                            var r = new cp(q);
                            r.composite = true;
                            d.push(r);
                            e.push(a)
                        }
                    }
                } else if (g.length > 1) {
                    for (var i = 0, l = g.length; i < l; i++) {
                        var s = this.getTimeCell(c.startTime, false, g[i]);
                        if (c.startTime._date.valueOf() === c.endTime._date.valueOf()) {
                            var p = s
                        } else {
                            var p = this.getTimeCell(c.endTime, true, g[i])
                        }
                        var q = {
                            prototype: a,
                            type: 'part',
                            cellIndex: s.index,
                            cellsLength: p.index - s.index + 1,
                            colIndex: a.groupColumnIndex[i],
                            isPartial: true,
                            partIndex: undefined,
                            lastCellIndex: p.index,
                            startCellIndex: s.index,
                            groupColumnIndex: a.groupColumnIndex[i]
                        };
                        var r = new cp(q);
                        r.composite = true;
                        d.push(r);
                        e.push(a)
                    }
                } else if (g.length === 1) {
                    var s = this.getTimeCell(c.startTime, false, f[0]);
                    if (c.startTime._date.valueOf() === c.endTime._date.valueOf()) {
                        var p = s
                    } else {
                        var p = this.getTimeCell(c.endTime, true, f[0])
                    }
                    a.lastCellIndex = p.index;
                    a.startCellIndex = s.index;
                    a.cellsLength = p.index - s.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = s.index;
                    a.colIndex = s.rowIndex;
                    a.partIndex = undefined;
                    a.updateVisual()
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b !== false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'updateItem',
            value: function updateItem(a, b) {
                if (a.isHeader) return this.updateHeaderItem(a, b);
                else return this.updateDayItem(a, b)
            }
        }, {
            key: 'getColumnsByResource',
            value: function getColumnsByResource(a) {
                var b = [];
                for (var i = 0, l = this._columns.count(); i < l; i++) {
                    if (a === this._columns.items()[i].resource) {
                        b.push(this._columns.items()[i])
                    }
                }
                return b
            }
        }, {
            key: 'getItemStartColumn',
            value: function getItemStartColumn(a) {
                var b = a.startTime.getDate().valueOf();
                for (var i = 0, l = this._columns.count(); i < l; i++) {
                    var c = this._columns.items()[i].date.valueOf();
                    if (b <= c) {
                        if (this.grouped) {
                            if (a.hasResource(this._columns.items()[i].resource)) {
                                return i
                            }
                        } else {
                            return i
                        }
                    }
                }
            }
        }, {
            key: 'getItemEndColumn',
            value: function getItemEndColumn(a, b) {
                var c = this._columns.count() - 1;
                var d = a.endTime.getDate().valueOf();
                var e = this.getColumnsByResource(b);
                for (var i = 0, l = e.length; i < l; i++) {
                    var f = e[i].date.valueOf();
                    if (d === f) {
                        if (a.endTime._date.valueOf() > e[i].startTime._date.valueOf()) {
                            return e[i].index
                        } else if (i > 0) {
                            return e[i - 1].index
                        } else {
                            return null
                        }
                    }
                    if (d > f) {
                        c = e[i].index
                    }
                }
                return c
            }
        }, {
            key: 'getTimeCell',
            value: function getTimeCell(a, b, c) {
                if (c.length != undefined) c = c[0];
                if (c < 0 || c > this._columns.count() - 1) return null;
                if (a._date.valueOf() < this.dates[0].startTime._date.valueOf()) return null;
                if (a._date.valueOf() > this.dates[this.dates.length - 1].endTime._date.valueOf()) return null;
                var d = null;
                if (c != null && this.resources != null && this.grouped) d = this._columns.items()[c].resource;
                for (var i = 0, l = this._columns.count(); i < l; i++) {
                    if (d === this._columns.items()[i].resource) {
                        if (a._date.valueOf() >= this._columns.items()[i].startTime._date.valueOf() && (a._date.valueOf() < this._columns.items()[i].endTime._date.valueOf() || b && a._date.valueOf() === this._columns.items()[i].endTime._date.valueOf())) {
                            var e = i * this.rowsCount + Math.floor(bx.millisecondsBetween(a, this._columns.items()[i].startTime) / this.settings.cellTime.milliseconds);
                            if (e > this._columns.items()[i].cells.items()[this._columns.items()[i].cells.count() - 1].index) {
                                if (b && a.equals(this._columns.items()[i].cells.items()[this._columns.items()[i].cells.count() - 1].endTime)) return this.cells.items()[e - 1];
                                else return null
                            }
                            if (b && bx.isSameDate(a, this.cells.items()[e].startTime) && e > 0) {
                                e -= 1
                            }
                            return this.cells.items()[e]
                        }
                    }
                }
                return this.cells.items()[e]
            }
        }, {
            key: 'getTimeCells',
            value: function getTimeCells(a, b, c, d) {
                var e = null;
                var f = null;
                if (d.length != undefined) d = d[0];
                if (d < 0 || d > this._columns.count() - 1) return null;
                var g = this._columns.items()[d].resource;
                var h = this._columns.items()[d].cells;
                if (a.valueOf() < this.startTime.valueOf()) {
                    e = h.items()[0]
                } else if (a.valueOf() > this.endTime.valueOf()) {
                    return []
                } else {
                    e = this.getTimeCell(a, false, d)
                }
                if (b !== null && typeof b !== "undefined" && typeof b._date !== "undefined") {
                    if (b.valueOf() > this.endTime.valueOf()) {
                        f = h.items()[h.count() - 1]
                    } else if (b.valueOf() < this.startTime.valueOf()) {
                        return []
                    } else {
                        f = this.getTimeCell(b, c, d)
                    }
                } else {
                    f = e
                }
                if (e != null && f != null) {
                    var j = [];
                    if (e === f) {
                        j.push(e)
                    } else {
                        for (var i = e.index; i < f.index; i++) {
                            var k = this.cells.items()[i];
                            if (g == null || g && this.columns.items()[k.columnIndex].resource == g) {
                                j.push(k)
                            }
                        }
                    }
                    return j
                }
                return []
            }
        }, {
            key: 'getItemColumns',
            value: function getItemColumns(a) {
                var b = this.getItemStartColumn(a);
                if (b === undefined) {
                    return []
                }
                var c = this._columns.items()[b].resource;
                var d = this.getItemEndColumn(a, c);
                if (d == null || d < b) {
                    d = b
                }
                var e = [];
                for (var i = b; i <= d; i++) {
                    if (this.grouped) {
                        if (this._columns.items()[i].resource === c) {
                            if (e.indexOf(i) === -1) {
                                e.push(i)
                            }
                        }
                    } else {
                        if (e.indexOf(i) === -1) {
                            e.push(i)
                        }
                    }
                }
                return e
            }
        }, {
            key: 'getItemGroupColumns',
            value: function getItemGroupColumns(a) {
                var b = [];
                var c = null;
                if (!this.grouped || this.resources == null) {
                    b.push(0)
                } else {
                    for (var i = 0, l = this._columns.count(); i < l; i++) {
                        if (this.isItemInColumn(a, this._columns.items()[i])) {
                            if (a.hasResource(this._columns.items()[i].resource)) {
                                if (!this._columns.items()[i].resource.equals(c)) {
                                    b.push(i);
                                    c = this._columns.items()[i].resource
                                }
                            }
                        }
                    }
                }
                return b
            }
        }, {
            key: 'isItemInColumn',
            value: function isItemInColumn(a, b) {
                if (a.startTime >= b.startTime && a.startTime < b.endTime) return true;
                if (a.endTime > b.startTime && a.endTime <= b.endTime) return true;
                if (a.startTime < b.startTime && a.endTime >= b.endTime) return true;
                return false
            }
        }, {
            key: 'isComposite',
            value: function isComposite(a) {
                if (a.startTime._date.valueOf() == a.endTime._date.valueOf()) {
                    return false
                }
                if (a.allDayEvent) {
                    if (a.startTime._date.valueOf() < this.headerItemsStartTime._date.valueOf()) return true;
                    if (a.endTime._date.valueOf() > this.headerItemsEndTime._date.valueOf()) return true;
                    var b = this.getItemColumns(a);
                    if (b.length > 1) return true
                } else {
                    if (a.startTime._date.valueOf() < this.itemsStartTime._date.valueOf()) return true;
                    if (a.endTime._date.valueOf() > this.itemsEndTime._date.valueOf()) return true;
                    var b = this.getItemColumns(a);
                    if (b.length > 1) return true;
                    var c = this.getTimeCell(a.startTime, false, b[0]);
                    if (c == null) return true;
                    var d = this.getTimeCell(a.endTime, true, b[0]);
                    if (d == null) return true
                }
                return false
            }
        }, {
            key: 'hasVisibleParts',
            value: function hasVisibleParts(a) {
                if (this.grouped && this.getItemGroupColumns(a).length == 0) return false;
                if (a.startTime._date.valueOf() >= this._columns.items()[0].startTime._date.valueOf() && a.startTime._date.valueOf() < this._columns.items()[this._columns.count() - 1].endTime._date.valueOf()) return true;
                if (a.endTime._date.valueOf() > this._columns.items()[0].startTime._date.valueOf() && a.endTime._date.valueOf() < this._columns.items()[this._columns.count() - 1].endTime._date.valueOf()) return true;
                if (a.startTime._date.valueOf() <= this._columns.items()[0].startTime._date.valueOf() && a.endTime._date.valueOf() >= this._columns.items()[0].endTime._date.valueOf()) return true;
                return false
            }
        }, {
            key: 'getItemsInCell',
            value: function getItemsInCell(a, b) {
                var c = [];
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].startCellIndex == a.index) c.push(b[i])
                }
                return c
            }
        }, {
            key: 'getHeaderType',
            value: function getHeaderType(a) {
                var h = this.getGroupHeader();
                if (h) {
                    if (h.contains(a)) return bo.Group
                }
                h = this.getTimelineHeader();
                if (h) {
                    if (h.contains(a)) return bo.Timeline
                }
                return bt(cJ.prototype.__proto__ || Object.getPrototypeOf(cJ.prototype), 'getHeaderType', this).call(this, a)
            }
        }, {
            key: 'drawHeader',
            value: function drawHeader() {
                var a = null;
                var b = this.calendar.renderer;
                var c = document.createElement("div");
                c.className = "mfp-header";
                a = c;
                var e = document.createElement("div");
                e.className = "mfp-corner";
                e.innerHTML = "&nbsp;";
                c.appendChild(e);
                var d = this.drawColumnHeaders();
                c.appendChild(d);
                var f = document.createElement("div");
                f.className = "mfp-scrollfix";
                f.innerHTML = "&nbsp;";
                c.appendChild(f);
                return a
            }
        }, {
            key: 'drawColumnHeaders',
            value: function drawColumnHeaders() {
                var a = null;
                var c = this.calendar.renderer;
                var e = document.createElement("div");
                e.className = "mfp-title";
                a = e;
                if ((this.settings.headerStyle & T.Title) === T.Title) {
                    var d = this.drawDateHeaders();
                    e.appendChild(d)
                }
                if ((this.settings.headerStyle & T.Buttons) == T.Buttons) {
                    var b = this.drawHeaderButtons();
                    e.appendChild(b)
                }
                return a
            }
        }, {
            key: 'drawDateHeaders',
            value: function drawDateHeaders() {
                var a = null;
                var b = document.createElement("table");
                b.className = "mfp-title-table";
                b.cellSpacing = 0;
                b.cellPadding = 0;
                a = b;
                if (this._groupColumns > 0 && this.settings.reverseGrouping) {
                    var c = document.createElement("tr");
                    c.style.height = "100%";
                    b.appendChild(c);
                    var d = document.createElement("td");
                    d.rowSpan = this._dateColumns;
                    d.className = "mfp-group-row";
                    c.appendChild(d);
                    var e = document.createElement("table");
                    e.cellPadding = 0;
                    e.cellSpacing = 0;
                    e.style.height = "100%";
                    d.appendChild(e);
                    var f = "";
                    for (var h = 0; h < this._groupColumns; h++) {
                        var j = document.createElement("tr");
                        e.appendChild(j);
                        f = this.calendar.getResourceName(this.resources[h]);
                        var d = document.createElement("td");
                        d.innerHTML = f || "&nbsp;";
                        j.appendChild(d);
                        if (h == 0) {
                            if (this.settings.showDayHeader) {
                                var d = document.createElement("td");
                                d.className = "mfp-header-row";
                                d.rowSpan = this._groupColumns;
                                j.appendChild(d);
                                var l = document.createElement("table");
                                l.cellPadding = 0;
                                l.cellSpacing = 0;
                                l.style.height = "100%";
                                d.appendChild(l);
                                for (var g = 0; g < this._groupColumns; g++) {
                                    for (var i = 0; i < this._dateColumns; i++) {
                                        var j = document.createElement("tr");
                                        l.appendChild(j);
                                        var d = document.createElement("td");
                                        j.appendChild(d);
                                        if (this._groupColumns > 0) d.style.colspan = this._groupColumns;
                                        d.innerHTML = this.settings.dates.items()[i].toString(this.settings.titleFormat, this.formatInfo);
                                        if (this.calendar.showToolTips) d.title = this.settings.dates.items()[i].toString(this.formatInfo.longDate, this.formatInfo)
                                    }
                                }
                                var d = document.createElement("td");
                                d.className = "mfp-item-row";
                                d.style.minWidth = this.calendar.itemSettings.size + "px";
                                d.rowSpan = this._groupColumns;
                                c.appendChild(d);
                                var m = document.createElement("table");
                                m.cellPadding = 0;
                                m.cellSpacing = 0;
                                d.appendChild(m);
                                for (var n = 0; n < this._totalColumns; n++) {
                                    var j = document.createElement("tr");
                                    j.style.height = 100 / this._columns.count() + "%";
                                    m.appendChild(j);
                                    var d = document.createElement("td");
                                    d.className = "mfp-item-cell";
                                    d.innerHTML = "&nbsp;";
                                    j.appendChild(d)
                                }
                                var d = document.createElement("td");
                                d.className = "mfp-empty-row";
                                d.style.minWidth = this.calendar.itemSettings.size + "px";
                                d.rowSpan = this._dateColumns;
                                c.appendChild(d);
                                var o = document.createElement("table");
                                o.cellPadding = 0;
                                o.cellSpacing = 0;
                                o.style.height = "100%";
                                d.appendChild(o);
                                for (var n = 0; n < this._totalColumns; n++) {
                                    var j = document.createElement("tr");
                                    o.appendChild(j);
                                    var d = document.createElement("td");
                                    d.innerHTML = "&nbsp;";
                                    j.appendChild(d)
                                }
                            }
                        }
                    }
                } else {
                    for (var i = 0; i < this._dateColumns; i++) {
                        var c = document.createElement("tr");
                        b.appendChild(c);
                        var d = document.createElement("td");
                        d.className = "mfp-header-row";
                        if (this._groupColumns > 0) d.colSpan = this._groupColumns;
                        d.innerText = this.settings.dates.items()[i].toString(this.settings.titleFormat, this.formatInfo);
                        if (this.calendar.showToolTips) d.title = this.settings.dates.items()[i].toString(this.formatInfo.longDate, this.formatInfo);
                        c.appendChild(d);
                        if (i == 0) {
                            if (this.settings.showDayHeader) {
                                if (this._groupColumns > 0 && !this.settings.reverseGrouping) {
                                    var d = document.createElement("td");
                                    d.className = "mfp-group-row";
                                    d.rowSpan = this._dateColumns;
                                    c.appendChild(d);
                                    var e = document.createElement("table");
                                    e.cellPadding = 0;
                                    e.cellSpacing = 0;
                                    e.style.height = "100%";
                                    d.appendChild(e);
                                    var f = "";
                                    for (var k = 0; k < this._dateColumns; k++) {
                                        for (var h = 0; h < this._groupColumns; h++) {
                                            var j = document.createElement("tr");
                                            e.appendChild(j);
                                            f = this.calendar.getResourceName(this.resources[h]);
                                            var d = document.createElement("td");
                                            d.innerHTML = f || '&nbsp';
                                            if (this.calendar.showToolTips) d.title = f;
                                            j.appendChild(d)
                                        }
                                    }
                                }
                                var d = document.createElement("td");
                                d.className = "mfp-item-row";
                                d.style.minWidth = this.calendar.itemSettings.size + "px";
                                d.rowSpan = this._dateColumns;
                                c.appendChild(d);
                                var m = document.createElement("table");
                                m.cellPadding = 0;
                                m.cellSpacing = 0;
                                m.style.height = "100%";
                                d.appendChild(m);
                                for (var n = 0; n < this._totalColumns; n++) {
                                    var j = document.createElement("tr");
                                    j.style.height = 100 / this._columns.count() + "%";
                                    m.appendChild(j);
                                    var d = document.createElement("td");
                                    d.className = "mfp-item-cell";
                                    d.innerHTML = "&nbsp;";
                                    j.appendChild(d)
                                }
                                var d = document.createElement("td");
                                d.className = "mfp-empty-row";
                                d.style.minWidth = this.calendar.itemSettings.size + "px";
                                d.rowSpan = this._dateColumns;
                                c.appendChild(d);
                                var o = document.createElement("table");
                                o.cellPadding = 0;
                                o.cellSpacing = 0;
                                o.style.height = "100%";
                                d.appendChild(o);
                                for (var n = 0; n < this._totalColumns; n++) {
                                    var j = document.createElement("tr");
                                    o.appendChild(j);
                                    var d = document.createElement("td");
                                    d.innerHTML = "&nbsp;";
                                    j.appendChild(d)
                                }
                            }
                        }
                    }
                }
                return a
            }
        }, {
            key: 'drawHeaderButtons',
            value: function drawHeaderButtons() {
                var a = null;
                var d = document.createElement("div");
                d.className = "mfp-button-wrap";
                a = d;
                var b = document.createElement("a");
                bz.addCssClass(b, "mfp-button");
                bz.addCssClass(b, "mfp-button-prev");
                if (this.calendar.showTooltips) {
                    b.title = this.getButtonTooltip(-1)
                }
                var s = document.createElement("span");
                b.appendChild(s);
                d.appendChild(b);
                var c = document.createElement("a");
                bz.addCssClass(c, "mfp-button");
                bz.addCssClass(c, "mfp-button-next");
                if (this.calendar.showTooltips) {
                    c.title = this.getButtonTooltip(1)
                }
                s = document.createElement("span");
                c.appendChild(s);
                d.appendChild(c);
                return a
            }
        }, {
            key: 'getButtonTooltip',
            value: function getButtonTooltip(f) {
                var s = "";
                for (var i = 0; i < this.settings.dates.count(); i++) {
                    s += i !== this.settings.dates.count() - 1 ? "\n" : ""
                }
                return s
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var a = null;
                var b = this.calendar.renderer;
                var s = document.createElement("div");
                s.className = "mfp-scroll-container";
                a = s;
                var e = document.createElement("div");
                e.className = "mfp-content-wrap";
                e.style.width = this._totalCells * this.settings.cellSize + "px";
                s.appendChild(e);
                var t = this.drawTimeline(b);
                e.appendChild(t);
                var f = document.createElement("div");
                f.className = "mfp-content";
                e.appendChild(f);
                var g = "";
                for (var h = 0; h < this._totalColumns; h++) {
                    var i = document.createElement("div");
                    i.className = "mfp-column";
                    f.appendChild(i);
                    for (var j = 0; j < this._totalCells; j++) {
                        g = "mfp-cell-wrap";
                        if (h == 0) g += " left";
                        if (h == this._totalColumns - 1) g += " right";
                        if (j == 0) g += " top";
                        if (j == this._totalCells - 1) g += " bottom";
                        var d = document.createElement("div");
                        i.appendChild(d);
                        d.className = g;
                        d.style.zIndex = this._totalCells - j;
                        d.style.flex = "0 0 " + this.settings.cellSize + "px";
                        var c = document.createElement("div");
                        c.className = "mfp-cell";
                        d.appendChild(c)
                    }
                }
                return a
            }
        }, {
            key: 'drawTimeline',
            value: function drawTimeline() {
                var a = null;
                var d;
                var b = bw.fromMinutes(this.settings.realEndTime);
                var t = document.createElement("div");
                t.className = "mfp-header-timeline";
                t.cellPadding = 0;
                t.cellSpacing = 0;
                a = t;
                var e = bw.fromMinutes(this.settings.startTime);
                var f = Math.round(60 / this.settings.cellTime.minutes);
                if (this.settings.groupHours && this._canGroupHour) {
                    var g = false;
                    while (e.ticks < b.ticks) {
                        g = false;
                        d = new bx(e.milliseconds);
                        var j = document.createElement("div");
                        j.className = "mfp-hour";
                        t.appendChild(j);
                        if (this.calendar.showTooltips) j.title = d.toString(this.formatInfo.dateFormats.longTime, this.formatInfo);
                        var s = document.createElement("span");
                        if (this.settings.twelveHourFormat) s.innerHTML = d.toString("h ", this.formatInfo).trim();
                        else s.innerHTML = d.toString("H ", this.formatInfo).trim();
                        j.appendChild(s);
                        var c = document.createElement("div");
                        c.className = "mfp-group-time";
                        j.appendChild(c);
                        var k = document.createElement("div");
                        if (this.settings.twelveHourFormat && e.subtract(this.settings.cellTime).hours !== e.hours && (e.hours == 0 || e.hours == 12) || e.equals(bw.fromMinutes(this.settings.startTime)) && this.settings.showAM) {
                            g = true;
                            k.className = "mfp-AMPM"
                        } else {
                            k.className = "mfp-minute"
                        }
                        if (this.calendar.showTooltips) k.title = d.toString(this.formatInfo.dateFormats.longTime, this.formatInfo);
                        if (g) k.innerHTML = d.toString("tt", this.formatInfo).trim();
                        else k.innerHTML = this.getMinutesText(d);
                        c.appendChild(k);
                        e = e.add(this.settings.cellTime);
                        d = new bx(e.milliseconds);
                        for (var i = 1; i < f; i++) {
                            var l = document.createElement("div");
                            l.className = "mfp-minute";
                            if (this.calendar.showTooltips) l.title = new bx(e.milliseconds).toString(this.formatInfo.dateFormats.longTime, this.formatInfo);
                            c.appendChild(l);
                            if (this.settings.showMinutes) l.innerHTML = this.getMinutesText(new bx(e.milliseconds));
                            else l.innerHTML = "&nbsp;";
                            e = e.add(this.settings.cellTime);
                            d = new bx(e.milliseconds)
                        }
                    }
                } else {
                    while (e.ticks < b.ticks) {
                        d = new bx(e.milliseconds);
                        var c = document.createElement("div");
                        c.className = "mfp-time";
                        t.appendChild(c);
                        if (this.calendar.showTooltips) c.title = d.toString(this.formatInfo.dateFormats.longTime, this.formatInfo);
                        var h = d.toString(this.settings.generalFormat, this.formatInfo).trim();
                        c.innerHTML = h;
                        e = e.add(this.settings.cellTime);
                        d = new bx(e.milliseconds)
                    }
                }
                return a
            }
        }, {
            key: 'getMinutesText',
            value: function getMinutesText(a) {
                return a.toString("mm", this.formatInfo).trim()
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                var a = new bB();
                this._columns.forEach(function(t) {
                    a.addRange(t.cells.items())
                }, this);
                return a
            }
        }, {
            key: 'headerCells',
            get: function get$$1() {
                var a = new bB();
                this._columns.forEach(function(t) {
                    a.add(t.headerCell)
                }, this);
                return a
            }
        }, {
            key: 'dates',
            get: function get$$1() {
                var a = [];
                this._columns.forEach(function(t) {
                    if (a.indexOf(t.date) === -1) a.push(t)
                }, this);
                return a
            }
        }, {
            key: 'groupResources',
            get: function get$$1() {
                if (this.grouped && this.settings.reverseGrouping) {
                    var a = [];
                    this._columns.forEach(function(t) {
                        a.push(t.resource)
                    }, this);
                    return a
                }
                return this.calendar.groupResources.items()
            }
        }, {
            key: 'orientation',
            get: function get$$1() {
                return W.Horizontal
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return "mfp-horizontal-timetable-view"
            }
        }, {
            key: 'cueCells',
            get: function get$$1() {
                var a = this.getHeader().querySelector(".mfp-empty-row");
                if (a) return a.querySelectorAll("td");
                return []
            }
        }]);
        return cJ
    }(cy);
    var cK = function(p) {
        bu(cK, p);

        function cK(a) {
            br(this, cK);
            var b = bv(this, (cK.__proto__ || Object.getPrototypeOf(cK)).call(this, a));
            b._settings = b.calendar.listSettings;
            b._rows = new bB();
            b.initVars();
            b._dragging = false;
            b._resizing = false;
            b._selecting = false;
            b._selectionPaused = false;
            b.items = [];
            b.Dom = {};
            return b
        }
        bs(cK, [{
            key: 'initVars',
            value: function initVars() {
                var d = this.calendar.date.clone();
                switch (this.settings.cellUnits) {
                    case R.Second: {
                        this._date = new bx(Date.UTC(d.year, d.month, d.day, d.hour, d.minute, d.second));
                        break
                    }
                    case R.Minute: {
                        this._date = new bx(Date.UTC(d.year, d.month, d.day, d.hour, d.minute, 0));
                        break
                    }
                    case R.Hour: {
                        this._date = new bx(Date.UTC(d.year, d.month, d.day, d.hour, 0, 0));
                        break
                    }
                    case R.Week: {
                        var a = this.calendar.getWeekFirstDate(d);
                        this._date = new bx(Date.UTC(a.year, a.month, a.day, 0, 0, 0));
                        break
                    }
                    case R.Month: {
                        this._date = new bx(Date.UTC(d.year, d.month, 1, 0, 0, 0));
                        break
                    }
                    case R.Year: {
                        this._date = new bx(Date.UTC(d.year, 1, 1, 0, 0, 0));
                        break
                    }
                    default: {
                        this._date = new bx(Date.UTC(d.year, d.month, d.day, 0, 0, 0));
                        break
                    }
                }
                this.calendar._date = this._date;
                var b = this._date;
                switch (this.settings.cellUnits) {
                    case R.Second:
                        this._lastDate = bx.addSeconds(b, this.settings.numberOfCells);
                        break;
                    case R.Minute:
                        this._lastDate = bx.addMinutes(b, this.settings.numberOfCells);
                        break;
                    case R.Hour:
                        this._lastDate = bx.addHours(b, this.settings.numberOfCells);
                        break;
                    case R.Day:
                        this._lastDate = bx.addDays(b, this.settings.numberOfCells);
                        break;
                    case R.Week:
                        this._lastDate = bx.addDays(b, this.settings.numberOfCells * 7);
                        break;
                    case R.Month:
                        this._lastDate = bx.addMonths(b, this.settings.numberOfCells);
                        break;
                    case R.Year:
                        this._lastDate = bx.addYears(b, this.settings.numberOfCells);
                        break
                }
                this._groupColumns = 0;
                if (this.calendar.realGroupType !== bl.None) this._groupColumns = this.calendar.groupResources.count();
                this._totalColumns = this._groupColumns === 0 ? 1 : this._groupColumns;
                this.createCells()
            }
        }, {
            key: 'getContent',
            value: function getContent() {
                if (!this.Dom.content) {
                    this.Dom.content = this.calendar.getElement().querySelector("div.mfp-scroller")
                }
                return this.Dom.content
            }
        }, {
            key: 'getGroupHeader',
            value: function getGroupHeader() {
                if (!this.Dom.groupHeader) {
                    this.Dom.groupHeader = this.calendar.getElement().querySelector("div.mfp-header-group")
                }
                return this.Dom.groupHeader
            }
        }, {
            key: 'getRows',
            value: function getRows() {
                if (!this.Dom.rows) {
                    this.Dom.rows = this.calendar.getElement().querySelectorAll('div.mfp-wrap')
                }
                return this.Dom.rows
            }
        }, {
            key: 'getBgCells',
            value: function getBgCells() {
                if (!this.Dom.bgCells) {
                    this.Dom.bgCells = this.calendar.getElement().querySelectorAll('div.mfp-bg-cell')
                }
                return this.Dom.bgCells
            }
        }, {
            key: 'createCells',
            value: function createCells() {
                this.startTime = this.itemsStartTime = this._date;
                this.endTime = this.itemsEndTime = this._lastDate;
                var a, cet;
                var b, cellEndTime;
                this._columns = new bB();
                for (var i = 0; i < this._totalColumns; i++) {
                    var c = new cH(i, this._date, this._date, this._lastDate);
                    c.resource = this.resources[i];
                    this._columns.add(c)
                }
                this.rowCellsCount = this.settings.numberOfCells;
                var j = 0;
                for (var i = 0; i < this._totalColumns; i++) {
                    var d = new cz(this.startTime, this.endTime, this.startTime, this.endTime);
                    d.index = i;
                    for (var k = 0, m = this.rowCellsCount; k < m; k++) {
                        if (this.skipNext > 0 && k <= this.skipNext) {
                            a = this.addUnits(this.startTime, k);
                            cet = this.addUnits(this.startTime, k + 1)
                        } else {
                            b = this.addUnits(this.startTime, k);
                            cellEndTime = this.addUnits(this.startTime, k + 1)
                        }
                        var e = new cA();
                        e.index = k;
                        e.cellIndex = j;
                        e.rowIndex = i;
                        e.startTime = b;
                        e.endTime = cellEndTime;
                        e.columnIndex = i;
                        if (this.grouped) {
                            e.resource = this.resources == null ? null : this.resources[i]
                        }
                        d.cells.add(e);
                        j += 1
                    }
                    this._rows.add(d)
                }
                this.groupCols = [];
                var c = new cH(0, this._date, this._date, this._date);
                c.resource = this.resources == null ? null : this.resources[0];
                this.groupCols.push(c);
                if (this._totalColumns > 1) {
                    var f = this.cells.items().slice(0);
                    for (var i = 1, l = this._totalColumns; i < l; i++) {
                        var c = new cH(i, this._date, this._date, this._date);
                        c.resource = this.resources == null ? null : this.resources[i];
                        this.groupCols.push(c)
                    }
                }
            }
        }, {
            key: 'detach',
            value: function detach() {
                if (this.getHeader()) {
                    this.getHeader().removeEventListener("click", this.headerClickHandler);
                    var a = this.getHeader().querySelectorAll("a.mfp-button");
                    for (var i = 0; i < a.length; i++) {
                        a[i].removeEventListener('click', this.buttonClickHandler)
                    }
                }
                if (this.getGroupHeader()) this.getGroupHeader().removeEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'attach',
            value: function attach() {
                var a = this.getContent().querySelectorAll("div.mfp-bg-cell");
                var b = this.getContent().querySelectorAll("div.mfp-item-cell");
                var c = this.getContent().querySelectorAll(".mfp-item-table .mfp-cell-header");
                var j = 0;
                for (var i = 0; i < this._rows.count(); i++) {
                    var d = this._rows.items()[i];
                    for (var k = 0, m = d.cells.count(); k < m; k++) {
                        var e = d.cells.items()[k];
                        e.bgCell = a[j];
                        e.itemCell = b[j];
                        e.title = a[j].childNodes[0];
                        e.cueCell = c[j];
                        j++
                    }
                }
                var f = this.getContent().querySelectorAll(".mfp-item-table");
                for (var i = 0; i < this.groupCols.length; i++) {
                    this.groupCols[i].itemTable = f[i]
                }
                this.clear();
                this.init();
                if (this.getHeader()) {
                    this.getHeader().addEventListener("click", this.headerClickHandler);
                    var g = this.getHeader().querySelectorAll("a.mfp-button");
                    for (var i = 0; i < g.length; i++) {
                        g[i].addEventListener('click', this.buttonClickHandler)
                    }
                }
                if (this.getGroupHeader()) this.getGroupHeader().addEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'getCellAt',
            value: function getCellAt(x, y, a) {
                var i = this.getCellIndexAt(x, y, a);
                if (i >= this.cells.count()) {}
                return this.cells.items()[i]
            }
        }, {
            key: 'getCellIndexAt',
            value: function getCellIndexAt(x, y, a) {
                if (!this.cellWidth) this.getDimensions();
                var b = bz.getCursorPosition({
                    clientX: x,
                    clientY: y - this.headerHeight
                }, this.getContent(), this.getScroller());
                var r = Math.floor(b.y / this.rowHeight);
                var c = Math.floor(b.x / this.cellWidth);
                if (r >= this._totalColumns || r < 0) {
                    return null
                }
                if (c >= this.settings.numberOfCells || c < 0) {
                    return null
                }
                var d = c + r * this.settings.numberOfCells;
                if (a && this.cells.items()[d].resource != a) {
                    var e = this.getTimeCell(this.cells.items()[d].startTime, false, this.resources.indexOf(a));
                    d = this.cells.indexOfItem(e)
                }
                return d
            }
        }, {
            key: 'getEndCell',
            value: function getEndCell(a, b) {
                a = Math.min(a, this.cells.count() - 1);
                var c = this.cells.items()[a];
                if (c.resource == b || b == null) return c.cellIndex;
                var d = this.groupCols[this.resources.indexOf(b)];
                var e = this.getGroupCells(d.index);
                if (e.length == 0) {}
                return e[e.length - 1].cellIndex
            }
        }, {
            key: 'getItemCueCells',
            value: function getItemCueCells(a) {
                var b = [];
                for (var i = a.startCellIndex; i <= a.lastCellIndex; i++) {
                    var c = this.getGroupCells(a.groupColumnIndex)[i];
                    b.push(c.cellIndex)
                }
                return b
            }
        }, {
            key: 'addUnits',
            value: function addUnits(a, b) {
                var c;
                switch (this.settings.cellUnits) {
                    case R.Second: {
                        var r = new bx(bx.addSeconds2(new Date(a._date.valueOf()), b));
                        c = bx.addSeconds(a, b);
                        if (c < r) {
                            return r
                        }
                        if (c._date.getHours() - r._date.getHours() > 1) {
                            this.skipNext = 3600 + b
                        } else {
                            if (this.skipNext > 0) {
                                this.skipped = true
                            }
                            if (this.skipNext == 0 && this.skipped) {
                                c._date.setHours(c._date.getHours() - 1)
                            }
                            this.skipNext = 0
                        }
                        break
                    }
                    case R.Minute: {
                        var r = new bx(bx.addMinutes2(new Date(a._date.valueOf()), b));
                        c = bx.addMinutes(a, b);
                        if (c < r) {
                            return r
                        }
                        if (c._date.getHours() - r._date.getHours() > 1) {
                            this.skipNext = 60 + b
                        } else {
                            if (this.skipNext > 0) {
                                this.skipped = true
                            }
                            if (this.skipNext == 0 && this.skipped) {
                                c._date.setHours(c._date.getHours() - 1)
                            }
                            this.skipNext = 0
                        }
                        break
                    }
                    case R.Hour: {
                        var r = new bx(bx.addHours2(new Date(a._date.valueOf()), b));
                        c = bx.addHours(a, b);
                        if (c < r) {
                            return r
                        }
                        if (c._date.getHours() - r._date.getHours() > 1) {
                            this.skipNext = 1 + b
                        } else {
                            if (this.skipNext > 0) {
                                this.skipped = true
                            }
                            if (this.skipNext == 0 && this.skipped) {
                                c._date.setHours(c._date.getHours() - 1)
                            }
                            this.skipNext = 0
                        }
                        break
                    }
                    case R.Day: {
                        c = new bx(bx.addDays2(new Date(a._date.valueOf()), b));
                        break
                    }
                    case R.Week: {
                        c = new bx(bx.addWeeks2(new Date(a._date.valueOf()), b));
                        break
                    }
                    case R.Month: {
                        c = new bx(bx.addMonths2(new Date(a._date.valueOf()), b));
                        break
                    }
                    case R.Year: {
                        c = new bx(bx.addYears2(new Date(a._date.valueOf()), b));
                        break
                    }
                }
                return c
            }
        }, {
            key: 'setTimeOfUnit',
            value: function setTimeOfUnit(a, b) {
                var c = 0;
                switch (this.settings.cellUnits) {
                    case R.Second:
                        c = bx.setTimeOfSecond(a, b);
                        break;
                    case R.Minute:
                        c = bx.setTimeOfMinute(a, b);
                        break;
                    case R.Hour:
                        c = bx.setTimeOfHour(a, b);
                        break;
                    case R.Day:
                        c = bx.setTimeOfDay(a, b);
                        break;
                    case R.Week:
                        c = bx.setDayOfWeek(a, b);
                        break;
                    case R.Month:
                        c = bx.setDayOfMonth(a, b);
                        break;
                    case R.Year:
                        c = bx.setDayOfYear(a, b);
                        break
                }
                return c
            }
        }, {
            key: 'unitsBetween',
            value: function unitsBetween(a, b) {
                var c = 0;
                switch (this.settings.cellUnits) {
                    case R.Second:
                        c = bx.secondsBetween(a, b);
                        break;
                    case R.Minute:
                        c = bx.minutesBetween(a, b);
                        break;
                    case R.Hour:
                        c = bx.hoursBetween(a, b);
                        break;
                    case R.Day:
                        c = bx.daysBetween(a, b);
                        break;
                    case R.Week:
                        c = bx.weeksBetween(a, b);
                        break;
                    case R.Month:
                        c = bx.monthsBetween(a, b);
                        break;
                    case R.Year:
                        c = bx.yearsBetween(a, b);
                        break
                }
                return c
            }
        }, {
            key: 'endSelection',
            value: function endSelection(e, a, b, c) {
                var d = this.cells.items()[a].startTime;
                var f = this.cells.items()[b].endTime;
                var g = new cB(d, f, '', this.settings.cellUnits > 2, this.calendar, c);
                bt(cK.prototype.__proto__ || Object.getPrototypeOf(cK.prototype), 'endSelection', this).call(this, g)
            }
        }, {
            key: 'endItemDrag',
            value: function endItemDrag(e, a) {
                var b = this.getCellAt(e.clientX, e.clientY, a);
                var c = this.getGroupCells(this.itemData.appointment.groupColumnIndex)[this.itemData.startCellIndex];
                if (!b) {
                    b = c
                }
                var d = this.itemData.item;
                var f = this.itemData.appointment;
                f.row = b;
                var g = this.setTimeOfUnit(d.startTime, b.startTime);
                var h = f.getEndTime(g);
                var a = b.resource;
                bt(cK.prototype.__proto__ || Object.getPrototypeOf(cK.prototype), 'endItemDrag', this).call(this, {
                    startTime: g,
                    endTime: h,
                    resource: a
                })
            }
        }, {
            key: 'endItemResize',
            value: function endItemResize(e) {
                var a = this.itemData.itemStartCell;
                var b = this.itemData.itemLastCell;
                var c = this.getCellAt(e.clientX, e.clientY);
                if (!c) {
                    a = b = null
                }
                var d = this.itemData.item;
                var f = this.itemData.appointment;
                var g;
                var h;
                if (a != null) {
                    g = bx.setTimeOfDay(d.startTime, a.startTime);
                    h = a.resource
                } else {
                    g = d.startTime;
                    h = this.getGroupCells(this.itemData.appointment.groupColumnIndex)[this.itemData.startCellIndex].resource
                }
                var i = b != null ? b.endTime : d.endTime;
                bt(cK.prototype.__proto__ || Object.getPrototypeOf(cK.prototype), 'endItemResize', this).call(this, {
                    startTime: g,
                    endTime: i,
                    resource: h
                })
            }
        }, {
            key: 'getDimensions',
            value: function getDimensions() {
                var a = bz.getBounds;
                var b = this.getRows()[0];
                this.cellWidth = this.getContent().querySelector(".mfp-bg-cell-header").offsetWidth;
                this.rowHeight = a(b).height;
                this.headerHeight = this.getHeader() ? a(this.getHeader()).height : 0;
                var c = a(bz.firstRealChild(this.getBgCells()[0])).height;
                this.itemsCount = Math.floor((this.rowHeight - c) / (this.calendar.itemSettings.size + this.calendar.itemSettings.spacing));
                if (this.settings.maxItems) this.itemsCount = Math.min(this.settings.maxItems, this.itemsCount);
                this.dragWidth = this.cellWidth;
                var d = this.grouped ? a(this.getGroupHeader()).width : 0;
                this.dragOffsetLeft = a(this.calendar.getElement()).x + d
            }
        }, {
            key: 'clear',
            value: function clear() {
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-wrap'));
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-row'))
            }
        }, {
            key: 'init',
            value: function init() {
                if (!this.cellWidth) this.getDimensions();
                this.getAllItems();
                for (var k = 0, m = this.groupCols.length; k < m; k++) {
                    this.itemsToPut = this.getItemsToPut(k);
                    for (var i = 0; i < this.itemsToPut.length; i++) {
                        this.itemsToPut[i].cell = null;
                        this.itemsToPut[i].row = -1
                    }
                    this.createItemsTable(this._rows.items()[k], k);
                    for (var i = 0; i < this.itemsToPut.length; i++) {
                        var a = this.items[this.items.indexOf(this.itemsToPut[i])];
                        a.cell = null;
                        a.row = -1;
                        a.hidden = true
                    }
                }
                this.placeItems();
                if (this.calendar.itemSettings.showItems) {
                    this.getCues();
                    this.createCues()
                }
            }
        }, {
            key: 'createItemsTable',
            value: function createItemsTable(a, b) {
                var c = this.getItemsToPutInCol(b);
                for (var i = 0, l = this.itemsCount; i < l; i++) {
                    var d = document.createElement('tr');
                    d.className = 'mfp-item-row';
                    var e = 0;
                    while (e < this.rowCellsCount) {
                        var c = this.getItemsInCell(a.cells.items()[e], this.itemsToPut);
                        var f = null;
                        if (c.length > 0) f = c[0];
                        if (f != null) {
                            var g = document.createElement('td');
                            g.className = 'mfp-item-cell';
                            g.colSpan = f.cellsLength;
                            e += f.cellsLength - 1;
                            f.cell = g;
                            f.row = i;
                            this.itemsToPut.splice(this.itemsToPut.indexOf(f), 1)
                        } else {
                            var g = document.createElement('td');
                            g.className = 'mfp-item-cell'
                        }
                        d.appendChild(g);
                        e += 1
                    }
                    this.groupCols[b].itemTable.getElementsByTagName("TBODY")[0].appendChild(d)
                }
            }
        }, {
            key: 'updateItem',
            value: function updateItem(a, b) {
                var c = a.item;
                a.groupColumnIndex = this.getItemCols(c);
                if (!c.visible) {
                    return a
                }
                var a = a;
                var d = [];
                var e = [];
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    var f = bx.maxDate(c.startTime, this.itemsStartTime, false);
                    var g = bx.minDate(c.endTime, this.itemsEndTime, true);
                    var h = 0;
                    if (f.compareTo(c.startTime) == 1) h = 1;
                    if (g.compareTo(c.endTime) == -1) h = -1;
                    if (f.compareTo(c.startTime) == 1 && g.compareTo(c.endTime) == -1) h = 0;
                    if (a.groupColumnIndex.length == 1) {
                        var j = this.getTimeCell(f, false, a.groupColumnIndex);
                        var k = this.getTimeCell(g, true, a.groupColumnIndex);
                        var m = {
                            prototype: a,
                            type: 'part',
                            cellIndex: j.index,
                            cellsLength: k.index - j.index + 1,
                            colIndex: 0,
                            isPartial: true,
                            partIndex: h,
                            lastCellIndex: k.index,
                            startCellIndex: j.index,
                            groupColumnIndex: a.groupColumnIndex
                        };
                        var n = new cp(m);
                        n.composite = true;
                        d.push(n);
                        e.push(a)
                    } else if (a.groupColumnIndex.length > 1) {
                        for (var i = 0, l = a.groupColumnIndex.length; i < l; i++) {
                            var j = this.getTimeCell(f, false, a.groupColumnIndex[i]);
                            var k = this.getTimeCell(g, true, a.groupColumnIndex[i]);
                            var m = {
                                prototype: a,
                                type: 'part',
                                cellIndex: j.index,
                                cellsLength: k.index - j.index + 1,
                                colIndex: j.rowIndex,
                                isPartial: true,
                                partIndex: h,
                                lastCellIndex: k.index,
                                startCellIndex: j.index,
                                groupColumnIndex: a.groupColumnIndex[i]
                            };
                            var n = new cp(m);
                            n.composite = true;
                            d.push(n);
                            e.push(a)
                        }
                    }
                } else if (a.groupColumnIndex.length == 1) {
                    var o = this.getTimeCell(c.startTime, false, a.groupColumnIndex);
                    if (c.startTime._date.valueOf() == c.endTime._date.valueOf()) {
                        var k = o
                    } else {
                        var k = this.getTimeCell(c.endTime, true, a.groupColumnIndex)
                    }
                    a.lastCellIndex = k.index;
                    a.startCellIndex = o.index;
                    a.cellsLength = k.index - o.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = o.index;
                    a.colIndex = o.rowIndex;
                    a.updateVisual()
                } else if (a.groupColumnIndex.length > 1) {
                    for (var i = 0, l = a.groupColumnIndex.length; i < l; i++) {
                        var o = this.getTimeCell(c.startTime, false, a.groupColumnIndex[i]);
                        if (c.startTime._date.valueOf() == c.endTime._date.valueOf()) {
                            var k = o
                        } else {
                            var k = this.getTimeCell(c.endTime, true, a.groupColumnIndex[i])
                        }
                        var m = {
                            prototype: a,
                            type: 'part',
                            cellIndex: o.index,
                            cellsLength: k.index - o.index + 1,
                            colIndex: a.groupColumnIndex[i],
                            isPartial: true,
                            partIndex: a.partIndex,
                            lastCellIndex: k.index,
                            startCellIndex: o.index,
                            groupColumnIndex: a.groupColumnIndex[i]
                        };
                        var n = new cp(m);
                        n.composite = true;
                        d.push(n);
                        e.push(a)
                    }
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b != false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'getTimeCell',
            value: function getTimeCell(a, b, c) {
                if (c.length != undefined) c = c[0];
                var d = this.getGroupCells(c);
                if (a.valueOf() < this.startTime.valueOf()) return null;
                if (a.valueOf() > this.endTime.valueOf()) return null;
                var t = this.setTimeOfUnit(this.startTime, a);
                var i = this.unitsBetween(this.startTime, t);
                if (this.skipNext > 0 && i > d.length) {
                    return d[d.length - 1]
                }
                if (i > d.length) return null;
                if (i == d.length) {
                    if (b && a.equals(d[i - 1].endTime)) return d[i - 1];
                    else return null
                }
                if (b && bx.isSameDate(a, d[i].startTime) && i > 0) {
                    i -= 1
                }
                return d[i]
            }
        }, {
            key: 'getTimeCells',
            value: function getTimeCells(a, b, c, d) {
                var e = null;
                var f = null;
                if (d.length != undefined) d = d[0];
                if (d < 0 || d > this.groupCols.length - 1) return null;
                var g = this.getGroupCells(d);
                if (a.valueOf() < this.startTime.valueOf()) {
                    e = g[0]
                } else if (a.valueOf() > this.endTime.valueOf()) {
                    return []
                } else {
                    e = this.getTimeCell(a, false, d)
                }
                if (b !== null && typeof b !== "undefined" && typeof b._date !== "undefined") {
                    if (b.valueOf() > this.endTime.valueOf()) {
                        f = g.items()[g.count() - 1]
                    } else if (b.valueOf() < this.startTime.valueOf()) {
                        return []
                    } else {
                        f = this.getTimeCell(b, c, d)
                    }
                } else {
                    f = e
                }
                if (e && f) {
                    return g.slice(e.index, f.index + 1)
                }
                return []
            }
        }, {
            key: 'isComposite',
            value: function isComposite(a) {
                if (a.startTime._date.valueOf() == a.endTime._date.valueOf()) {
                    return false
                }
                if (a.startTime._date.valueOf() < this._rows.items()[0].itemsStartTime._date.valueOf()) {
                    return true
                }
                if (a.endTime._date.valueOf() > this._rows.items()[this._rows.count() - 1].itemsEndTime._date.valueOf()) {
                    return true
                }
                return false
            }
        }, {
            key: 'hasVisibleParts',
            value: function hasVisibleParts(a) {
                if (this.grouped && this.getItemCols(a).length == 0) return false;
                if (a.startTime._date.valueOf() >= this._rows.items()[0].itemsStartTime._date.valueOf() && a.startTime._date.valueOf() < this._rows.items()[this._rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.endTime._date.valueOf() > this._rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() < this._rows.items()[this._rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.startTime._date.valueOf() <= this._rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() >= this._rows.items()[0].itemsEndTime._date.valueOf()) return true;
                return false
            }
        }, {
            key: 'checkElementBounds',
            value: function checkElementBounds(a, x, y, b) {
                for (var i = 0; i < a.length; i++) {
                    if (x == a[i].x) {
                        if (y >= a[i].y && y < a[i].y2 || b >= a[i].y && b < a[i].y2) return false
                    }
                }
                return true
            }
        }, {
            key: 'getItemsInCell',
            value: function getItemsInCell(a, b) {
                var c = [];
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].startCellIndex == a.index) c.push(b[i])
                }
                return c
            }
        }, {
            key: 'getAllItemsInCell',
            value: function getAllItemsInCell(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].groupColumnIndex == a.columnIndex) {
                        if (this.items[i].startCellIndex <= a.index && this.items[i].lastCellIndex >= a.index) {
                            if (this.items[i].row < this.itemsCount || this.items[i].row == -1) {
                                b.push(this.items[i])
                            }
                        }
                    }
                }
                return b
            }
        }, {
            key: 'getItemsInCol',
            value: function getItemsInCol(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].groupColumnIndex == a && this.items[i].item.visible == true) {
                        b.push(this.items[i])
                    }
                }
                return b
            }
        }, {
            key: 'getItemCols',
            value: function getItemCols(a) {
                var b = [];
                if (this.resources == null || !this.grouped) {
                    b.push(0);
                    return b
                }
                for (var i = 0, l = this.resources.length; i < l; i++) {
                    if (a.hasResource(this.resources[i])) {
                        b.push(i)
                    }
                }
                return b
            }
        }, {
            key: 'getItemCell',
            value: function getItemCell(a) {
                return this.cells.items()[a.cellIndex + a.groupColumnIndex * this._rows.count()]
            }
        }, {
            key: 'getGroupCells',
            value: function getGroupCells(a) {
                if (a.length) a = a[0];
                var b = [];
                this.cells.forEach(function(t) {
                    if (t.columnIndex == a) b.push(t)
                });
                return b
            }
        }, {
            key: 'getItemRow',
            value: function getItemRow(a, b) {
                return this.getGroupCells(b)[a.index].itemCell
            }
        }, {
            key: 'getItemHeight',
            value: function getItemHeight(a) {
                if (!this.rowHeight) {
                    this.getDimensions()
                }
                return Math.floor(this.rowHeight * a.cellsLength)
            }
        }, {
            key: 'getItemsToPut',
            value: function getItemsToPut(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].item.visible && this.items[i].groupColumnIndex == a) {
                        b.push(this.items[i])
                    }
                }
                return b
            }
        }, {
            key: 'getItemsToPutInCol',
            value: function getItemsToPutInCol(a) {
                var b = [];
                for (var i = 0, l = this.itemsToPut.length; i < l; i++) {
                    if (this.itemsToPut[i].groupColumnIndex == a) b.push(this.itemsToPut[i])
                }
                return b
            }
        }, {
            key: 'getItemsCountInRow',
            value: function getItemsCountInRow(a, b) {
                var c = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].groupColumnIndex == b && this.items[i].startCellIndex == a.index && this.items[i].cell != null && this.items[i].row != -1) c.push(this.items[i]);
                    if (this.items[i].groupColumnIndex == b && this.items[i].startCellIndex < a.index && this.items[i].lastCellIndex >= a.index && this.items[i].cell != null && this.items[i].row != -1) c.push(this.items[i])
                }
                return c.length
            }
        }, {
            key: 'draw',
            value: function draw() {
                this._element = document.createElement("div");
                if (this._groupColumns > 0) {
                    var g = this.drawGroupHeader();
                    this._element.appendChild(g)
                }
                var a = document.createElement("div");
                a.className = "mfp-scroller";
                this._element.appendChild(a);
                var c = document.createElement("div");
                c.className = "mfp-wrapper";
                if (this.settings.numberOfCells > this.settings.visibleCells) {
                    var w = cE.percentage(Math.round(100 / this.settings.visibleCells * this.settings.numberOfCells, 2)).toString();
                    c.style.width = w
                }
                a.appendChild(c);
                if (this.settings.headerStyle !== T.None) {
                    var d = this.drawHeader();
                    c.appendChild(d);
                    if ((this.settings.headerStyle & T.Buttons) === T.Buttons) {
                        var b = this.drawHeaderButtons();
                        d.appendChild(b)
                    }
                }
                var e = this.drawContent();
                c.appendChild(e);
                return this._element
            }
        }, {
            key: 'drawGroupHeader',
            value: function drawGroupHeader() {
                var b = null;
                var c = this.calendar.renderer;
                var e;
                var d = document.createElement("div");
                d.className = "mfp-header-group";
                b = d;
                var f = document.createElement("div");
                d.appendChild(f);
                for (var k = 0; k < this._totalColumns; k++) {
                    e = this.calendar.getResourceName(this.calendar.groupResources.items()[k]);
                    var g = document.createElement("div");
                    d.appendChild(g);
                    var a = document.createElement("a");
                    g.appendChild(a);
                    a.innerHTML = e || "&nbsp;"
                }
                var h = document.createElement("div");
                d.appendChild(h);
                return b
            }
        }, {
            key: 'drawHeader',
            value: function drawHeader() {
                var a = null;
                var b = this.calendar.renderer;
                var c = this._date.clone();
                var e = document.createElement("div");
                e.className = "mfp-header";
                a = e;
                if ((this.settings.headerStyle & T.Title) === T.Title) {
                    for (var f = 0; f < this.settings.numberOfCells; f++) {
                        var d = document.createElement("div");
                        d.innerHTML = c.toString(this.settings.titleFormat, this.formatInfo);
                        e.appendChild(d);
                        c = this.addUnits(c, 1)
                    }
                }
                return a
            }
        }, {
            key: 'drawHeaderButtons',
            value: function drawHeaderButtons(a) {
                var b = null;
                var d = document.createElement("div");
                d.className = "mfp-button-wrap";
                b = d;
                var c = document.createElement("a");
                bz.addCssClass(c, "mfp-button");
                bz.addCssClass(c, "mfp-button-prev");
                if (this.calendar.showTooltips) {
                    c.title = this.getHeaderButtonTooltip(-1)
                }
                var s = document.createElement("span");
                c.appendChild(s);
                d.appendChild(c);
                var e = document.createElement("a");
                bz.addCssClass(e, "mfp-button");
                bz.addCssClass(e, "mfp-button-next");
                if (this.calendar.showTooltips) {
                    e.title = this.getHeaderButtonTooltip(0)
                }
                s = document.createElement("span");
                e.appendChild(s);
                d.appendChild(e);
                return b
            }
        }, {
            key: 'getHeaderButtonTooltip',
            value: function getHeaderButtonTooltip(a) {
                var b = a == -1 ? this._date : this._lastDate;
                var c = "";
                var d = this.formatInfo.dateFormats;
                switch (this.settings.cellUnits) {
                    case R.Second:
                        c = bx.addSeconds(b, a).toString(d.longTime, this.formatInfo);
                        break;
                    case R.Minute:
                        c = bx.addMinutes(b, a).toString(d.longTime, this.formatInfo);
                        break;
                    case R.Hour:
                        c = bx.addHours(b, a).toString(d.longTime, this.formatInfo);
                        break;
                    case R.Day:
                        c = bx.addDays(b, a).toString(d.longDate, this.formatInfo);
                        break;
                    case R.Week:
                        c = bx.addDays(b, a * 7).toString(d.longDate, this.formatInfo);
                        c += " - ";
                        c += b.toString(d.longDate, this.formatInfo);
                        break;
                    case R.Month:
                        c = bx.addMonths(b, a).toString(d.yearMonth, this.formatInfo);
                        break;
                    case R.Year:
                        c = bx.addYears(b, a).toString(d.yearMonth, this.formatInfo);
                        break
                }
                return c
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var a = null;
                var b = this.calendar.renderer;
                var c = document.createElement("div");
                c.className = "mfp-content";
                a = c;
                for (var k = 0; k < this._totalColumns; k++) {
                    var r = document.createElement("div");
                    r.style.height = cE.percentage(Math.round(100 / this._totalColumns, 2)).toString();
                    r.className = "mfp-wrap";
                    c.appendChild(r);
                    var t = this.drawBackgroundTable();
                    r.appendChild(t);
                    var t = this.drawItemTable();
                    r.appendChild(t)
                }
                return a
            }
        }, {
            key: 'drawBackgroundTable',
            value: function drawBackgroundTable() {
                var a = null;
                var b = this._date;
                var r = document.createElement("div");
                r.className = "mfp-bg-row";
                a = r;
                for (var k = 0; k < this.settings.numberOfCells; k++) {
                    var d = this.drawDay(b);
                    d.className = "mfp-bg-cell";
                    var c = b.dayOfWeek;
                    if (c === bi.Saturday || c === bi.Sunday) d.className += " mfp-weekend-cell";
                    r.appendChild(d);
                    b = this.addUnits(b, 1)
                }
                return a
            }
        }, {
            key: 'drawDay',
            value: function drawDay(a) {
                var b = null;
                var c = bx.getDayOfMonth(a);
                var d = bx.getMonth(a);
                var t = document.createElement("div");
                b = t;
                var e = document.createElement("div");
                e.className = "mfp-bg-cell-header";
                t.appendChild(e);
                if (d == 1 && c == 1) e.innerHTML = a.toString(this.settings.firstDayOfYearFormat, this.formatInfo);
                else if (d != 1 && c == 1) e.innerHTML = a.toString(this.settings.firstDayOfMonthFormat, this.formatInfo);
                else e.innerHTML = a.toString(this.settings.generalFormat, this.formatInfo);
                return b
            }
        }, {
            key: 'drawItemTable',
            value: function drawItemTable() {
                var a = null;
                var b = this._date;
                var t = document.createElement("table");
                t.className = "mfp-item-table";
                t.cellSpacing = 0;
                t.cellPadding = 0;
                a = t;
                var c = document.createElement("tbody");
                t.appendChild(c);
                var e = document.createElement("tr");
                c.appendChild(e);
                for (var k = 0; k < this.settings.numberOfCells; k++) {
                    var f = document.createElement("td");
                    if (this.calendar.showTooltips) f.title = b.toString(this.formatInfo.dateFormats.longDate, this.formatInfo);
                    e.appendChild(f);
                    var d = document.createElement("div");
                    d.className = "mfp-cell-header";
                    f.appendChild(d);
                    b = this.addUnits(b, 1)
                }
                return a
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                var c = new bB();
                this._rows.forEach(function(t) {
                    c.addRange(t.cells.items())
                }, this);
                c.sort(function(a, b) {
                    return a.cellIndex - b.cellIndex
                });
                return c
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return "mfp-list-view"
            }
        }]);
        return cK
    }(cy);
    var cL = function(p) {
        bu(cL, p);

        function cL(a) {
            br(this, cL);
            var b = bv(this, (cL.__proto__ || Object.getPrototypeOf(cL)).call(this, a));
            b._settings = b.calendar.listSettings;
            b._rows = new bB();
            b.initVars();
            b._dragging = false;
            b._resizing = false;
            b._selecting = false;
            b._selectionPaused = false;
            b.items = [];
            b.Dom = {};
            return b
        }
        bs(cL, [{
            key: 'initVars',
            value: function initVars() {
                var d = this.calendar.date.clone();
                switch (this.settings.cellUnits) {
                    case R.Second: {
                        this._date = new bx(Date.UTC(d.year, d.month, d.day, d.hour, d.minute, d.second));
                        break
                    }
                    case R.Minute: {
                        this._date = new bx(Date.UTC(d.year, d.month, d.day, d.hour, d.minute, 0));
                        break
                    }
                    case R.Hour: {
                        this._date = new bx(Date.UTC(d.year, d.month, d.day, d.hour, 0, 0));
                        break
                    }
                    case R.Week: {
                        var a = this.calendar.getWeekFirstDate(d);
                        this._date = new bx(Date.UTC(a.year, a.month, a.day, 0, 0, 0));
                        break
                    }
                    case R.Month: {
                        this._date = new bx(Date.UTC(d.year, d.month, 1, 0, 0, 0));
                        break
                    }
                    case R.Year: {
                        this._date = new bx(Date.UTC(d.year, 1, 1, 0, 0, 0));
                        break
                    }
                    default: {
                        this._date = new bx(Date.UTC(d.year, d.month, d.day, 0, 0, 0));
                        break
                    }
                }
                this.calendar._date = this._date;
                var b = this._date;
                switch (this.settings.cellUnits) {
                    case R.Second:
                        this._lastDate = bx.addSeconds(b, this.settings.numberOfCells);
                        break;
                    case R.Minute:
                        this._lastDate = bx.addMinutes(b, this.settings.numberOfCells);
                        break;
                    case R.Hour:
                        this._lastDate = bx.addHours(b, this.settings.numberOfCells);
                        break;
                    case R.Week:
                        this._lastDate = bx.addDays(b, this.settings.numberOfCells * 7);
                        break;
                    case R.Month:
                        this._lastDate = bx.addMonths(b, this.settings.numberOfCells);
                        break;
                    case R.Year:
                        this._lastDate = bx.addYears(b, this.settings.numberOfCells);
                        break;
                    default:
                        this._lastDate = bx.addDays(b, this.settings.numberOfCells);
                        break
                }
                this._groupColumns = 0;
                if (this.calendar.realGroupType != bl.None) this._groupColumns = this.calendar.groupResources.count();
                this._totalColumns = this._groupColumns == 0 ? 1 : this._groupColumns;
                this.createCells()
            }
        }, {
            key: 'getContent',
            value: function getContent() {
                if (!this.Dom.content) {
                    this.Dom.content = this.calendar.getElement().querySelector("div.mfp-scroller")
                }
                return this.Dom.content
            }
        }, {
            key: 'getGroupHeader',
            value: function getGroupHeader() {
                if (!this.Dom.groupHeader) {
                    this.Dom.groupHeader = this.calendar.getElement().querySelector("div.mfp-header-group")
                }
                return this.Dom.groupHeader
            }
        }, {
            key: 'getRows',
            value: function getRows() {
                if (!this.Dom.rows) {
                    this.Dom.rows = this.calendar.getElement().querySelectorAll('div.mfp-item-row')
                }
                return this.Dom.rows
            }
        }, {
            key: 'getBgCells',
            value: function getBgCells() {
                if (!this.Dom.bgCells) {
                    this.Dom.bgCells = this.calendar.getElement().querySelectorAll('div.mfp-bg-cell')
                }
                return this.Dom.bgCells
            }
        }, {
            key: 'createCells',
            value: function createCells() {
                this.startTime = this.itemsStartTime = this._date;
                this.endTime = this.itemsEndTime = this._lastDate;
                this._columns = new bB();
                for (var i = 0; i < this._totalColumns; i++) {
                    var a = new cH(i, this._date, this._date, this._lastDate);
                    a.resource = this.resources[i];
                    this._columns.add(a)
                }
                this.rowCellsCount = 1;
                var b = this._date;
                var c = this.addUnits(b, 1);
                var j = 0;
                for (var i = 0; i < this.settings.numberOfCells; i++) {
                    var d = new cz(b, c, b, c);
                    d.index = i;
                    for (var k = 0, m = this.rowCellsCount; k < m; k++) {
                        if (this.skipNext > 0 && k <= this.skipNext) {
                            var e = this.addUnits(b, k);
                            var f = this.addUnits(b, k + 1)
                        } else {
                            var g = this.addUnits(b, k);
                            var h = this.addUnits(b, k + 1)
                        }
                        var n = new cA();
                        n.index = j;
                        n.cellIndex = j;
                        n.rowIndex = i;
                        n.startTime = g;
                        n.endTime = h;
                        n.columnIndex = 0;
                        if (this.grouped) {
                            n.resource = this.resources == null ? null : this.resources[0]
                        }
                        d.cells.add(n);
                        j += 1
                    }
                    b = this.addUnits(b, 1);
                    c = this.addUnits(c, 1);
                    this._rows.add(d)
                }
                this.groupCols = [];
                var a = new cH(0, this._date, this._date, this._date);
                a.resource = this.resources == null ? null : this.resources[0];
                this.groupCols.push(a);
                if (this._totalColumns > 1) {
                    var o = this.cells.items().slice(0);
                    for (var i = 1, l = this._totalColumns; i < l; i++) {
                        for (var k = 0, m = o.length; k < m; k++) {
                            var n = new cA();
                            n.index = o[k].index;
                            n.cellIndex = this.settings.numberOfCells * i + k;
                            n.rowIndex = o[k].rowIndex;
                            n.startTime = o[k].startTime;
                            n.endTime = o[k].endTime;
                            n.columnIndex = i;
                            if (this.grouped) {
                                n.resource = this.resources == null ? null : this.resources[i]
                            }
                            this._rows.items()[n.rowIndex].cells.add(n)
                        }
                        var a = new cH(i, this._date, this._date, this._date);
                        a.resource = this.resources == null ? null : this.resources[i];
                        this.groupCols.push(a)
                    }
                }
            }
        }, {
            key: 'detach',
            value: function detach() {
                if (this.getHeader()) {
                    this.getHeader().removeEventListener("click", this.headerClickHandler);
                    var a = this.getHeader().querySelectorAll("a.mfp-button");
                    for (var i = 0; i < a.length; i++) {
                        a[i].removeEventListener('click', this.buttonClickHandler)
                    }
                }
                if (this.getGroupHeader()) this.getGroupHeader().removeEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'attach',
            value: function attach() {
                if (this.settings.numberOfCells > this.settings.visibleCells) {
                    var h = cE.percentage(Math.round(100 / this.settings.visibleCells * this.settings.numberOfCells, 2)).toString();
                    this.getContent().children[0].style.height = h
                }
                var a = this.getBgCells();
                var b = this.getContent().querySelectorAll("div.mfp-item-cell");
                var c = this.getContent().querySelectorAll(".mfp-item-table .mfp-cell-header");
                var j = 0;
                for (var i = 0; i < this._rows.count(); i++) {
                    var d = this._rows.items()[i];
                    for (var k = 0, m = d.cells.count(); k < m; k++) {
                        var e = d.cells.items()[k];
                        e.bgCell = a[j];
                        e.itemCell = b[j];
                        e.title = a[j].childNodes[0];
                        e.cueCell = c[j];
                        j++
                    }
                }
                this.clear();
                this.init();
                if (this.getHeader()) {
                    this.getHeader().addEventListener("click", this.headerClickHandler);
                    var f = this.getHeader().querySelectorAll("a.mfp-button");
                    for (var i = 0; i < f.length; i++) {
                        f[i].addEventListener('click', this.buttonClickHandler)
                    }
                }
                if (this.getGroupHeader()) this.getGroupHeader().addEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'getCellAt',
            value: function getCellAt(x, y, a) {
                var i = this.getCellIndexAt(x, y, a);
                if (i >= this.cells.count()) {}
                return this.cells.items()[i]
            }
        }, {
            key: 'getCellIndexAt',
            value: function getCellIndexAt(x, y, a) {
                if (!this.cellWidth) this.getDimensions();
                var b = bz.getCursorPosition({
                    clientX: x - this.headerWidth,
                    clientY: y
                }, this.getContent(), this.getScroller());
                var r = Math.floor(b.y / this.calculatedCellHeight);
                var c = Math.floor(b.x / this.cellWidth);
                if (r >= this.settings.numberOfCells || r < 0) {
                    return null
                }
                if (c >= this._totalColumns || c < 0) {
                    return null
                }
                var d = r + c * this._rows.count();
                if (a && this.cells.items()[d].resource != a) {
                    var e = this.getTimeCell(this.cells.items()[d].startTime, false, this.resources.indexOf(a));
                    d = this.cells.indexOfItem(e)
                }
                return d
            }
        }, {
            key: 'getItemCueCells',
            value: function getItemCueCells(a) {
                var b = [];
                for (var i = a.startCellIndex; i <= a.lastCellIndex; i++) {
                    var c = this.getGroupCells(a.groupColumnIndex)[i];
                    b.push(c.index * this._totalColumns + c.columnIndex)
                }
                return b
            }
        }, {
            key: 'getEndCell',
            value: function getEndCell(a, b) {
                a = Math.min(a, this.cells.count() - 1);
                var c = this.cells.items()[a];
                if (c.resource == b || b == null) return c.cellIndex;
                var d = this.groupCols[this.resources.indexOf(b)];
                var e = this.getGroupCells(d.index);
                if (e.length == 0) {}
                return e[e.length - 1].cellIndex
            }
        }, {
            key: 'addUnits',
            value: function addUnits(a, b) {
                var c;
                switch (this.settings.cellUnits) {
                    case R.Second: {
                        var r = new bx(bx.addSeconds2(new Date(a._date.valueOf()), b));
                        c = bx.addSeconds(a, b);
                        if (c < r) {
                            return r
                        }
                        if (c._date.getHours() - r._date.getHours() > 1) {
                            this.skipNext = 3600 + b
                        } else {
                            if (this.skipNext > 0) {
                                this.skipped = true
                            }
                            if (this.skipNext == 0 && this.skipped) {
                                c._date.setHours(c._date.getHours() - 1)
                            }
                            this.skipNext = 0
                        }
                        break
                    }
                    case R.Minute: {
                        var r = new bx(bx.addMinutes2(new Date(a._date.valueOf()), b));
                        c = bx.addMinutes(a, b);
                        if (c < r) {
                            return r
                        }
                        if (c._date.getHours() - r._date.getHours() > 1) {
                            this.skipNext = 60 + b
                        } else {
                            if (this.skipNext > 0) {
                                this.skipped = true
                            }
                            if (this.skipNext == 0 && this.skipped) {
                                c._date.setHours(c._date.getHours() - 1)
                            }
                            this.skipNext = 0
                        }
                        break
                    }
                    case R.Hour: {
                        var r = new bx(bx.addHours2(new Date(a._date.valueOf()), b));
                        c = bx.addHours(a, b);
                        if (c < r) {
                            return r
                        }
                        if (c._date.getHours() - r._date.getHours() > 1) {
                            this.skipNext = 1 + b
                        } else {
                            if (this.skipNext > 0) {
                                this.skipped = true
                            }
                            if (this.skipNext == 0 && this.skipped) {
                                c._date.setHours(c._date.getHours() - 1)
                            }
                            this.skipNext = 0
                        }
                        break
                    }
                    case R.Day: {
                        c = new bx(bx.addDays2(new Date(a._date.valueOf()), b));
                        break
                    }
                    case R.Week: {
                        c = new bx(bx.addWeeks2(new Date(a._date.valueOf()), b));
                        break
                    }
                    case R.Month: {
                        c = new bx(bx.addMonths2(new Date(a._date.valueOf()), b));
                        break
                    }
                    case R.Year: {
                        c = new bx(bx.addYears2(new Date(a._date.valueOf()), b));
                        break
                    }
                }
                return c
            }
        }, {
            key: 'setTimeOfUnit',
            value: function setTimeOfUnit(a, b) {
                var c = 0;
                switch (this.settings.cellUnits) {
                    case R.Second:
                        c = bx.setTimeOfSecond(a, b);
                        break;
                    case R.Minute:
                        c = bx.setTimeOfMinute(a, b);
                        break;
                    case R.Hour:
                        c = bx.setTimeOfHour(a, b);
                        break;
                    case R.Day:
                        c = bx.setTimeOfDay(a, b);
                        break;
                    case R.Week:
                        c = bx.setDayOfWeek(a, b);
                        break;
                    case R.Month:
                        c = bx.setDayOfMonth(a, b);
                        break;
                    case R.Year:
                        c = bx.setDayOfYear(a, b);
                        break
                }
                return c
            }
        }, {
            key: 'unitsBetween',
            value: function unitsBetween(a, b) {
                var c = 0;
                switch (this.settings.cellUnits) {
                    case R.Second:
                        c = bx.secondsBetween(a, b);
                        break;
                    case R.Minute:
                        c = bx.minutesBetween(a, b);
                        break;
                    case R.Hour:
                        c = bx.hoursBetween(a, b);
                        break;
                    case R.Day:
                        c = bx.daysBetween(a, b);
                        break;
                    case R.Week:
                        c = bx.weeksBetween(a, b);
                        break;
                    case R.Month:
                        c = bx.monthsBetween(a, b);
                        break;
                    case R.Year:
                        c = bx.yearsBetween(a, b);
                        break
                }
                return c
            }
        }, {
            key: 'endSelection',
            value: function endSelection(e, a, b, c) {
                var d = this.cells.items()[a].startTime;
                var f = this.cells.items()[b].endTime;
                var g = new cB(d, f, '', this.settings.cellUnits > 2, this.calendar, c);
                bt(cL.prototype.__proto__ || Object.getPrototypeOf(cL.prototype), 'endSelection', this).call(this, g)
            }
        }, {
            key: 'endItemDrag',
            value: function endItemDrag(e, a) {
                var b = this.getCellAt(e.clientX, e.clientY, a);
                var c = this.getGroupCells(this.itemData.appointment.groupColumnIndex)[this.itemData.startCellIndex];
                if (!b) {
                    b = c
                }
                var d = this.itemData.item;
                var f = this.itemData.appointment;
                f.row = b;
                var g = this.setTimeOfUnit(d.startTime, b.startTime);
                var h = f.getEndTime(g);
                var a = b.resource;
                bt(cL.prototype.__proto__ || Object.getPrototypeOf(cL.prototype), 'endItemDrag', this).call(this, {
                    startTime: g,
                    endTime: h,
                    resource: a
                })
            }
        }, {
            key: 'endItemResize',
            value: function endItemResize(e) {
                var a = this.itemData.itemStartCell;
                var b = this.itemData.itemLastCell;
                var c = this.getCellAt(e.clientX, e.clientY);
                if (!c) {
                    a = b = null
                }
                var d = this.itemData.item;
                var f = this.itemData.appointment;
                var g;
                var h;
                if (a != null) {
                    g = bx.setTimeOfDay(d.startTime, a.startTime);
                    h = a.resource
                } else {
                    g = d.startTime;
                    h = this.getGroupCells(this.itemData.appointment.groupColumnIndex)[this.itemData.startCellIndex].resource
                }
                var i = b != null ? b.endTime : d.endTime;
                bt(cL.prototype.__proto__ || Object.getPrototypeOf(cL.prototype), 'endItemResize', this).call(this, {
                    startTime: g,
                    endTime: i,
                    resource: h
                })
            }
        }, {
            key: 'getDragOffset',
            value: function getDragOffset(c, d) {
                var e = this.getAllItemsInCell(c);
                if (this.itemsContainItem(d, e)) {
                    e.splice(e.indexOf(d), 1)
                }
                if (e.length == 0) {
                    return 0
                }
                var f = [];
                for (var i = 0, l = e.length; i < l; i++) {
                    if (e[i].pos != -1) {
                        f.push(e[i].pos)
                    }
                }
                f.sort(function(a, b) {
                    return a - b
                });
                var g = 0;
                for (var l = f.length; g < l; g++) {
                    if (f[g] == g || f.indexOf(g) > -1) {
                        continue
                    }
                    return g
                }
                return g
            }
        }, {
            key: 'getDimensions',
            value: function getDimensions() {
                var a = bz.getBounds;
                var b = this.getRows()[0];
                this.cellWidth = a(this.getBgCells()[0]).width;
                this.dayHeaderHeight = a(this.cells.items()[0].title).height;
                this.calculatedCellHeight = a(b).height;
                this.rowHeight = a(b).height - this.dayHeaderHeight;
                this.headerWidth = this.getHeader() ? a(this.getHeader()).width : 0;
                this.dragWidth = this.calendar.itemSettings.size;
                this.dragHeight = this.rowHeight;
                this.itemsCount = Math.floor(this.cellWidth / (this.calendar.itemSettings.size + this.calendar.itemSettings.spacing));
                if (this.settings.maxItems) this.itemsCount = Math.min(this.settings.maxItems, this.itemsCount)
            }
        }, {
            key: 'clear',
            value: function clear() {
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-wrap'))
            }
        }, {
            key: 'init',
            value: function init() {
                if (!this.cellWidth) this.getDimensions();
                this.getAllItems();
                for (var k = 0, m = this.groupCols.length; k < m; k++) {
                    this.itemsToPut = this.getItemsToPut(k);
                    for (var i = 0; i < this.itemsToPut.length; i++) {
                        this.itemsToPut[i].cell = null;
                        this.itemsToPut[i].row = -1
                    }
                    for (var i = 0, l = this._rows.count(); i < l; i++) {
                        this.createItemsTable(this._rows.items()[i], k)
                    }
                    for (var i = 0; i < this.itemsToPut.length; i++) {
                        var a = this.items[this.items.indexOf(this.itemsToPut[i])];
                        a.cell = null;
                        a.row = -1;
                        a.hidden = true
                    }
                }
                this.placeItems();
                if (this.calendar.itemSettings.showItems) {
                    this.getCues();
                    this.createCues()
                }
            }
        }, {
            key: 'createItemsTable',
            value: function createItemsTable(a, b) {
                var c = this.getItemsToPutInCol(a, b);
                for (var i = 0, l = c.length; i < l; i++) {
                    c[i].cell = null;
                    if (this.getItemsCountInRow(a, b) < this.itemsCount) {
                        c[i].cell = this.getItemRow(a, b);
                        c[i].row = c[i].startCellIndex;
                        this.itemsToPut.splice(this.itemsToPut.indexOf(c[i]), 1)
                    } else {
                        c[i].cell = this.getItemRow(a, b)
                    }
                }
            }
        }, {
            key: 'placeItems',
            value: function placeItems() {
                for (var i = 0; i < this.items.length; i++) {
                    var a = this.items[i];
                    if (a.cell) {
                        a.hidden = false;
                        a.element.parentNode.style.cssText = '';
                        a.element.parentNode.style.position = 'absolute';
                        a.element.parentNode.style.height = this.getItemHeight(a) + 'px';
                        a.cell.appendChild(a.element.parentNode)
                    } else {
                        a.hidden = true;
                        a.item.row = -1;
                        a.item.pos = -1
                    }
                }
                this.arrangeItems()
            }
        }, {
            key: 'arrangeItems',
            value: function arrangeItems() {
                for (var i = 0, l = this._totalColumns; i < l; i++) {
                    this.arrangeItemsInCol(i)
                }
            }
        }, {
            key: 'arrangeItemsInCol',
            value: function arrangeItemsInCol(a) {
                var c = this.getItemsInCol(a);
                var b = [];
                for (var i = 0; i < c.length; i++) {
                    c[i].element.parentNode.style.height = this.getItemHeight(c[i]) + 'px';
                    c[i].element.parentNode.style.left = '0px'
                }
                for (var i = 0; i < c.length; i++) {
                    if (c[i].cell == null) {
                        continue
                    }
                    var d = c[i].element.parentNode;
                    var e = this.getItemCell(c[i]).bgCell;
                    var f = bz.getRelativeBounds(d, e);
                    var g = bz.getRelativeBounds(e, this.getContent());
                    var h = g.x - this.headerWidth;
                    var j = 0;
                    if (d && this.calendar.itemSettings.size > 0) {
                        var x = f.x || 0;
                        var y = (f.y || 0) + g.y;
                        var k = f.height + y;
                        while (!this.checkElementBounds(b, x, y, k)) {
                            j += 1;
                            x += this.calendar.itemSettings.size + this.calendar.itemSettings.spacing * 2
                        }
                        b.push({
                            x: x,
                            y: y,
                            y2: k
                        });
                        d.style.left = h + this.calendar.itemSettings.size * j + this.calendar.itemSettings.spacing * (j + 1) + 'px';
                        if (this.calendar.itemSettings.size * j + this.calendar.itemSettings.spacing * (j + 1) + this.calendar.itemSettings.size + this.calendar.itemSettings.spacing > this.cellWidth) {
                            c[i].row = -1;
                            c[i].pos = -1
                        } else {
                            c[i].pos = j
                        }
                    }
                }
            }
        }, {
            key: 'getCues',
            value: function getCues() {
                this.cues = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    var a = this.items[i];
                    if (a.row == -1) {
                        var b = this.getItemCueCells(a);
                        for (var k = 0; k < b.length; k++) {
                            if (this.cues.indexOf(b[k]) === -1) this.cues.push(b[k])
                        }
                        a.element.parentNode.style.visibility = 'hidden';
                        a.element.parentNode.style.display = 'none'
                    } else {
                        a.element.parentNode.style.visibility = 'visible'
                    }
                }
            }
        }, {
            key: 'updateItem',
            value: function updateItem(a, b) {
                var c = a.item;
                a.groupColumnIndex = this.getItemCols(c);
                if (!c.visible) {
                    return a
                }
                var a = a;
                var d = [];
                var e = [];
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    var f = bx.maxDate(c.startTime, this.itemsStartTime, false);
                    var g = bx.minDate(c.endTime, this.itemsEndTime, true);
                    var h = 0;
                    if (f.compareTo(c.startTime) == 1) h = 1;
                    if (g.compareTo(c.endTime) == -1) h = -1;
                    if (f.compareTo(c.startTime) == 1 && g.compareTo(c.endTime) == -1) h = 0;
                    if (a.groupColumnIndex.length == 1) {
                        var j = this.getTimeCell(f, false, a.groupColumnIndex);
                        var k = this.getTimeCell(g, true, a.groupColumnIndex);
                        var m = {
                            prototype: a,
                            type: 'part',
                            cellIndex: j.index,
                            cellsLength: k.index - j.index + 1,
                            colIndex: 0,
                            isPartial: true,
                            partIndex: h,
                            lastCellIndex: k.index,
                            startCellIndex: j.index,
                            groupColumnIndex: a.groupColumnIndex
                        };
                        var n = new cp(m);
                        n.composite = true;
                        d.push(n);
                        e.push(a)
                    } else if (a.groupColumnIndex.length > 1) {
                        for (var i = 0, l = a.groupColumnIndex.length; i < l; i++) {
                            var j = this.getTimeCell(f, false, a.groupColumnIndex[i]);
                            var k = this.getTimeCell(g, true, a.groupColumnIndex[i]);
                            var m = {
                                prototype: a,
                                type: 'part',
                                cellIndex: j.index,
                                cellsLength: k.index - j.index + 1,
                                colIndex: j.rowIndex,
                                isPartial: true,
                                partIndex: h,
                                lastCellIndex: k.index,
                                startCellIndex: j.index,
                                groupColumnIndex: a.groupColumnIndex[i]
                            };
                            var n = new cp(m);
                            n.composite = true;
                            d.push(n);
                            e.push(a)
                        }
                    }
                } else if (a.groupColumnIndex.length == 1) {
                    var o = this.getTimeCell(c.startTime, false, a.groupColumnIndex);
                    if (c.startTime._date.valueOf() == c.endTime._date.valueOf()) {
                        var k = o
                    } else {
                        var k = this.getTimeCell(c.endTime, true, a.groupColumnIndex)
                    }
                    a.lastCellIndex = k.index;
                    a.startCellIndex = o.index;
                    a.cellsLength = k.index - o.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = o.index;
                    a.colIndex = o.rowIndex;
                    a.updateVisual()
                } else if (a.groupColumnIndex.length > 1) {
                    for (var i = 0, l = a.groupColumnIndex.length; i < l; i++) {
                        var o = this.getTimeCell(c.startTime, false, a.groupColumnIndex[i]);
                        if (c.startTime._date.valueOf() == c.endTime._date.valueOf()) {
                            var k = o
                        } else {
                            var k = this.getTimeCell(c.endTime, true, a.groupColumnIndex[i])
                        }
                        var m = {
                            prototype: a,
                            type: 'part',
                            cellIndex: o.index,
                            cellsLength: k.index - o.index + 1,
                            colIndex: a.groupColumnIndex[i],
                            isPartial: true,
                            partIndex: a.partIndex,
                            lastCellIndex: k.index,
                            startCellIndex: o.index,
                            groupColumnIndex: a.groupColumnIndex[i]
                        };
                        var n = new cp(m);
                        n.composite = true;
                        d.push(n);
                        e.push(a)
                    }
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b != false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'getTimeCell',
            value: function getTimeCell(a, b, c) {
                if (c.length != undefined) c = c[0];
                var d = this.getGroupCells(c);
                if (a._date.valueOf() < this.startTime._date.valueOf()) return null;
                if (a._date.valueOf() > this.endTime._date.valueOf()) return null;
                var t = this.setTimeOfUnit(this.startTime, a);
                var i = this.unitsBetween(this.startTime, t);
                if (this.skipNext > 0 && i > d.length) {
                    return d[d.length - 1]
                }
                if (i > d.length) return null;
                if (i == d.length) {
                    if (b && a.equals(d[i - 1].endTime)) return d[i - 1];
                    else return null
                }
                if (b && bx.isSameDate(a, d[i].startTime) && i > 0) {
                    i -= 1
                }
                return d[i]
            }
        }, {
            key: 'getTimeCells',
            value: function getTimeCells(a, b, c, d) {
                var e = null;
                var f = null;
                if (d.length != undefined) d = d[0];
                if (d < 0 || d > this.groupCols.length - 1) return null;
                var g = this.getGroupCells(d);
                if (!g) return [];
                if (a.valueOf() < this.startTime.valueOf()) {
                    e = g[0]
                } else if (a.valueOf() > this.endTime.valueOf()) {
                    return []
                } else {
                    e = this.getTimeCell(a, false, d)
                }
                if (b !== null && typeof b !== "undefined" && typeof b._date !== "undefined") {
                    if (b.valueOf() > this.endTime.valueOf()) {
                        f = g[g.length - 1]
                    } else if (b.valueOf() < this.startTime.valueOf()) {
                        return []
                    } else {
                        f = this.getTimeCell(b, c, d)
                    }
                } else {
                    f = e
                }
                if (e && f) {
                    return g.slice(e.index, f.index + 1)
                }
                return []
            }
        }, {
            key: 'isComposite',
            value: function isComposite(a) {
                if (a.startTime._date.valueOf() < this._rows.items()[0].itemsStartTime._date.valueOf()) return true;
                if (a.endTime._date.valueOf() > this._rows.items()[this._rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                return false
            }
        }, {
            key: 'hasVisibleParts',
            value: function hasVisibleParts(a) {
                if (this.grouped && this.getItemCols(a).length == 0) return false;
                if (a.startTime._date.valueOf() >= this._rows.items()[0].itemsStartTime._date.valueOf() && a.startTime._date.valueOf() < this._rows.items()[this._rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.endTime._date.valueOf() > this._rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() < this._rows.items()[this._rows.count() - 1].itemsEndTime._date.valueOf()) return true;
                if (a.startTime._date.valueOf() <= this._rows.items()[0].itemsStartTime._date.valueOf() && a.endTime._date.valueOf() >= this._rows.items()[0].itemsEndTime._date.valueOf()) return true;
                return false
            }
        }, {
            key: 'checkElementBounds',
            value: function checkElementBounds(a, x, y, b) {
                for (var i = 0; i < a.length; i++) {
                    if (x == a[i].x) {
                        if (y >= a[i].y && y < a[i].y2 || b >= a[i].y && b < a[i].y2) return false
                    }
                }
                return true
            }
        }, {
            key: 'getItemsInCell',
            value: function getItemsInCell(a, b) {
                var c = [];
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].startCellIndex == a.index) c.push(b[i])
                }
                return c
            }
        }, {
            key: 'getAllItemsInCell',
            value: function getAllItemsInCell(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].groupColumnIndex == a.columnIndex) {
                        if (this.items[i].startCellIndex <= a.index && this.items[i].lastCellIndex >= a.index) {
                            if (this.items[i].pos < this.itemsCount || this.items[i].pos == -1) {
                                b.push(this.items[i])
                            }
                        }
                    }
                }
                return b
            }
        }, {
            key: 'getItemsInCol',
            value: function getItemsInCol(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].groupColumnIndex == a && this.items[i].item.visible == true) {
                        b.push(this.items[i])
                    }
                }
                return b
            }
        }, {
            key: 'getItemCols',
            value: function getItemCols(a) {
                var b = [];
                if (this.resources == null || !this.grouped) {
                    b.push(0);
                    return b
                }
                for (var i = 0, l = this.resources.length; i < l; i++) {
                    if (a.hasResource(this.resources[i])) {
                        b.push(i)
                    }
                }
                return b
            }
        }, {
            key: 'getItemCell',
            value: function getItemCell(a) {
                return this.cells.items()[a.cellIndex + a.groupColumnIndex * this._rows.count()]
            }
        }, {
            key: 'getGroupCells',
            value: function getGroupCells(a) {
                if (a.length) a = a[0];
                var b = [];
                this.cells.forEach(function(t) {
                    if (t.columnIndex == a) b.push(t)
                });
                return b
            }
        }, {
            key: 'getItemRow',
            value: function getItemRow(a, b) {
                return this.getGroupCells(b)[a.index].itemCell
            }
        }, {
            key: 'getItemHeight',
            value: function getItemHeight(a) {
                return Math.floor(this.rowHeight * a.cellsLength + this.dayHeaderHeight * (a.cellsLength - 1))
            }
        }, {
            key: 'getItemsToPut',
            value: function getItemsToPut(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].item.visible && this.items[i].groupColumnIndex == a) {
                        b.push(this.items[i])
                    }
                }
                return b
            }
        }, {
            key: 'getItemsToPutInCol',
            value: function getItemsToPutInCol(a, b) {
                var c = [];
                for (var i = 0, l = this.itemsToPut.length; i < l; i++) {
                    if (this.itemsToPut[i].groupColumnIndex == b && this.itemsToPut[i].startCellIndex == a.index) c.push(this.itemsToPut[i])
                }
                return c
            }
        }, {
            key: 'getItemsCountInRow',
            value: function getItemsCountInRow(a, b) {
                var c = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].groupColumnIndex == b && this.items[i].startCellIndex == a.index && this.items[i].cell != null && this.items[i].row != -1) c.push(this.items[i]);
                    if (this.items[i].groupColumnIndex == b && this.items[i].startCellIndex < a.index && this.items[i].lastCellIndex >= a.index && this.items[i].cell != null && this.items[i].row != -1) c.push(this.items[i])
                }
                return c.length
            }
        }, {
            key: 'draw',
            value: function draw() {
                this._element = document.createElement("div");
                if (this._groupColumns > 0) {
                    var g = this.drawGroupHeader();
                    this._element.appendChild(g)
                }
                var a = document.createElement("div");
                a.className = "mfp-scroller";
                this._element.appendChild(a);
                var c = document.createElement("div");
                c.className = "mfp-wrapper";
                a.appendChild(c);
                if (this.settings.headerStyle != T.None) {
                    var d = this.drawHeader();
                    c.appendChild(d);
                    if ((this.settings.headerStyle & T.Buttons) == T.Buttons) {
                        var b = this.drawHeaderButtons();
                        d.appendChild(b)
                    }
                }
                var e = this.drawContent();
                c.appendChild(e);
                return this._element
            }
        }, {
            key: 'drawGroupHeader',
            value: function drawGroupHeader() {
                var a = null;
                var b = "";
                var d = document.createElement("div");
                d.className = "mfp-header-group";
                a = d;
                var c = document.createElement("div");
                d.appendChild(c);
                for (var k = 0; k < this._totalColumns; k++) {
                    b = this.calendar.getResourceName(this.calendar.groupResources.items()[k]);
                    var g = document.createElement("div");
                    d.appendChild(g);
                    g.innerHTML = b || "&nbsp;"
                }
                var e = document.createElement("div");
                d.appendChild(e);
                return a
            }
        }, {
            key: 'drawHeader',
            value: function drawHeader() {
                var b = null;
                var c = this._date.clone();
                var e = document.createElement("div");
                e.className = "mfp-header";
                b = e;
                if ((this.settings.headerStyle & T.Title) == T.Title) {
                    for (var f = 0; f < this.settings.numberOfCells; f++) {
                        var d = document.createElement("div");
                        var a = document.createElement("a");
                        a.innerHTML = c.toString(this.settings.titleFormat, this.formatInfo);
                        d.appendChild(a);
                        e.appendChild(d);
                        c = this.addUnits(c, 1)
                    }
                }
                return b
            }
        }, {
            key: 'drawHeaderButtons',
            value: function drawHeaderButtons(a) {
                var b = null;
                var d = document.createElement("div");
                d.className = "mfp-button-wrap";
                b = d;
                var c = document.createElement("a");
                bz.addCssClass(c, "mfp-button");
                bz.addCssClass(c, "mfp-button-prev");
                if (this.calendar.showTooltips) {
                    c.title = this.getHeaderButtonTooltip(-1)
                }
                var s = document.createElement("span");
                c.appendChild(s);
                d.appendChild(c);
                var e = document.createElement("a");
                bz.addCssClass(e, "mfp-button");
                bz.addCssClass(e, "mfp-button-next");
                if (this.calendar.showTooltips) {
                    e.title = this.getHeaderButtonTooltip(0)
                }
                s = document.createElement("span");
                e.appendChild(s);
                d.appendChild(e);
                return b
            }
        }, {
            key: 'getHeaderButtonTooltip',
            value: function getHeaderButtonTooltip(a) {
                var b = a == -1 ? this._date : this._lastDate;
                var c = "";
                var d = this.formatInfo.dateFormats;
                switch (this.settings.cellUnits) {
                    case R.Second:
                        c = bx.addSeconds(b, a).toString(d.longTime, this.formatInfo);
                        break;
                    case R.Minute:
                        c = bx.addMinutes(b, a).toString(d.longTime, this.formatInfo);
                        break;
                    case R.Hour:
                        c = bx.addHours(b, a).toString(d.longTime, this.formatInfo);
                        break;
                    case R.Day:
                        c = bx.addDays(b, a).toString(d.longDate, this.formatInfo);
                        break;
                    case R.Week:
                        c = bx.addDays(b, a * 7).toString(d.longDate, this.formatInfo);
                        c += " - ";
                        c += b.toString(d.longDate, this.formatInfo);
                        break;
                    case R.Month:
                        c = bx.addMonths(b, a).toString(d.yearMonth, this.formatInfo);
                        break;
                    case R.Year:
                        c = bx.addYears(b, a).toString(d.yearMonth, this.formatInfo);
                        break
                }
                return c
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var a = null;
                var b = document.createElement("div");
                b.className = "mfp-content";
                a = b;
                var r = document.createElement("div");
                r.className = "mfp-wrap";
                b.appendChild(r);
                var t = this.drawBackgroundTable();
                r.appendChild(t);
                var t = this.drawItemTable();
                r.appendChild(t);
                return a
            }
        }, {
            key: 'drawBackgroundTable',
            value: function drawBackgroundTable() {
                var a = null;
                var b = this._date;
                var c = document.createElement("div");
                c.className = "mfp-bg-table";
                a = c;
                for (var i = 0; i < this._rows.count(); i++) {
                    var r = document.createElement("div");
                    r.className = "mfp-bg-row";
                    c.appendChild(r);
                    for (var k = 0; k < this._totalColumns; k++) {
                        var d = this.drawDay(b);
                        r.appendChild(d)
                    }
                    b = this.addUnits(b, 1)
                }
                return a
            }
        }, {
            key: 'drawBackgroundTable1',
            value: function drawBackgroundTable1() {
                var a = null;
                var b = this._date;
                var c = document.createElement("table");
                c.cellSpacing = 0;
                c.cellPadding = 0;
                c.className = "mfp-bg-table";
                a = c;
                for (var i = 0; i < this._rows.count(); i++) {
                    var e = document.createElement("tr");
                    c.appendChild(e);
                    for (var k = 0; k < this._totalColumns; k++) {
                        var d = this.drawDay(b);
                        e.appendChild(d)
                    }
                    b = this.addUnits(b, 1)
                }
                return a
            }
        }, {
            key: 'drawDay',
            value: function drawDay(a) {
                var b = null;
                var e = this.calendar.renderer;
                var f = bx.getDayOfMonth(a);
                var g = bx.getMonth(a);
                var c = document.createElement("div");
                c.className = "mfp-bg-cell";
                var h = a.dayOfWeek;
                if (h === bi.Saturday || h === bi.Sunday) c.className += " mfp-weekend-cell";
                var d = document.createElement("div");
                d.className = "mfp-bg-cell-header";
                if (g == 1 && f == 1) d.innerHTML = a.toString(this.settings.firstDayOfYearFormat, this.formatInfo);
                else if (g != 1 && f == 1) d.innerHTML = a.toString(this.settings.firstDayOfMonthFormat, this.formatInfo);
                else d.innerHTML = a.toString(this.settings.generalFormat, this.formatInfo);
                c.appendChild(d);
                b = c;
                return b
            }
        }, {
            key: 'drawItemTable',
            value: function drawItemTable() {
                var a = null;
                var b = this._date;
                var d = document.createElement("div");
                d.className = "mfp-item-table";
                a = d;
                for (var e = 0; e < this._rows.count(); e++) {
                    var r = document.createElement("div");
                    r.className = "mfp-item-row";
                    d.appendChild(r);
                    var w = document.createElement("div");
                    w.className = "mfp-header-wrap";
                    r.appendChild(w);
                    for (var k = 0; k < this._totalColumns; k++) {
                        var c = document.createElement("div");
                        c.className = "mfp-cell-header";
                        if (this.calendar.showTooltips) c.title = b.toString(this.formatInfo.dateFormats.longDate, this.formatInfo);
                        w.appendChild(c)
                    }
                    b = this.addUnits(b, 1);
                    w = document.createElement("div");
                    w.className = "mfp-cell-wrap";
                    r.appendChild(w);
                    for (var k = 0; k < this._totalColumns; k++) {
                        c = document.createElement("div");
                        c.className = "mfp-item-cell";
                        w.appendChild(c)
                    }
                }
                return a
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                var c = new bB();
                this._rows.forEach(function(t) {
                    c.addRange(t.cells.items())
                }, this);
                c.sort(function(a, b) {
                    return a.cellIndex - b.cellIndex
                });
                return c
            }
        }, {
            key: 'orientation',
            get: function get$$1() {
                return W.Vertical
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return "mfp-vertical-list-view"
            }
        }]);
        return cL
    }(cy);
    var cM = function(u) {
        bu(cM, u);

        function cM(a) {
            br(this, cM);
            var b = bv(this, (cM.__proto__ || Object.getPrototypeOf(cM)).call(this, a));
            b._date = b.calendar.date;
            b._settings = b.calendar.resourceViewSettings;
            b._timelineSettings = b.calendar.resourceViewSettings.bottomTimelineSettings;
            b._rows = new bB();
            b.initVars();
            b._dragging = false;
            b._resizing = false;
            b._selecting = false;
            b._selectionPaused = false;
            b.items = [];
            b.Dom = {};
            return b
        }
        bs(cM, [{
            key: 'initVars',
            value: function initVars() {
                this._date = bx.getFirstDateAfter(this._date, this._timelineSettings.unit, this._timelineSettings.unitCount, this.formatInfo);
                if (this._date.greaterThan(this.calendar.date)) this._date = bx.getPreviousDate(this._date, this._timelineSettings.unit, this._timelineSettings.unitCount);
                this.calendar._date = this._date;
                var a = this.calendar.endDate;
                var b = this.getCellsCount(this._date, a, this._timelineSettings.unit, this._timelineSettings.unitCount);
                this._lastDate = a;
                this._realCells = this.rowCellsCount = b;
                if (b > this._settings.visibleCells) this._contentWidth = cE.percentage(Math.round(100 / this._settings.visibleCells * b, 2)).toString();
                else this._contentWidth = cE.percentage(100).toString();
                this._firstVisibleDate = this._date;
                this._groupColumns = this.calendar.groupResources.count();
                this.cellTicks = new bB();
                for (var i = 0; i < this._settings.timelines; i++) {
                    this.cellTicks.add(new bB())
                }
                if (this._settings.timelines >= 1) {
                    this._bottomTimelineCells = this.calculateCells(this._settings.bottomTimelineSettings, Q.Bottom)
                }
                if (this._settings.timelines >= 2) {
                    this._middleTimelineCells = this.calculateCells(this._settings.middleTimelineSettings, Q.Middle)
                }
                if (this._settings.timelines >= 3) {
                    this._topTimelineCells = this.calculateCells(this._settings.topTimelineSettings, Q.Top)
                }
                this.createCells()
            }
        }, {
            key: 'getTimelineHeader',
            value: function getTimelineHeader() {
                if (!this.Dom.timelineHeader) {
                    this.Dom.timelineHeader = this.calendar.getElement().querySelector("div.mfp-header-timeline")
                }
                return this.Dom.timelineHeader
            }
        }, {
            key: 'getGroupHeader',
            value: function getGroupHeader() {
                if (!this.Dom.groupHeader) {
                    this.Dom.groupHeader = this.calendar.getElement().querySelector("div.mfp-header-group-wrap")
                }
                return this.Dom.groupHeader
            }
        }, {
            key: 'getRows',
            value: function getRows() {
                if (!this.Dom.rows) {
                    this.Dom.rows = this.calendar.getElement().querySelectorAll('div.mfp-wrap')
                }
                return this.Dom.rows
            }
        }, {
            key: 'getBgCells',
            value: function getBgCells() {
                if (!this.Dom.bgCells) {
                    this.Dom.bgCells = this.calendar.getElement().querySelectorAll('div.mfp-bg-cell')
                }
                return this.Dom.bgCells
            }
        }, {
            key: 'getDayCells',
            value: function getDayCells() {
                return this.getBgCells()
            }
        }, {
            key: 'createCells',
            value: function createCells() {
                this.startTime = this.itemsStartTime = this._date;
                this.endTime = this.itemsEndTime = this._lastDate;
                var j = 0;
                this.groupCols = [];
                for (var i = 0; i < this._groupColumns; i++) {
                    var a = new cH(i, this.startTime, this.startTime, this.endTime);
                    a.resource = this.resources == null ? null : this.resources[i];
                    this.groupCols.push(a);
                    var b = new cz(this.startTime, this.endTime, this.startTime, this.endTime);
                    b.index = i;
                    for (var k = 0, m = this._realCells; k < m; k++) {
                        if (this.skipNext > 0 && k <= this.skipNext) {
                            var c = this.addUnits(this.startTime, k);
                            var d = this.addUnits(this.startTime, k + 1)
                        } else {
                            var e = this.addUnits(this.startTime, k);
                            var f = this.addUnits(this.startTime, k + 1)
                        }
                        var g = new cA();
                        g.index = k;
                        g.cellIndex = j;
                        g.rowIndex = i;
                        g.startTime = e;
                        g.endTime = f;
                        g.columnIndex = i;
                        if (this.grouped) {
                            g.resource = this.resources == null ? null : this.resources[i]
                        }
                        b.cells.add(g);
                        j += 1
                    }
                    this._rows.add(b)
                }
            }
        }, {
            key: 'detach',
            value: function detach() {
                var a = this;
                this.getScroller().removeEventListener("scroll", function(e) {
                    return a.onScroll(e)
                });
                this.getHeader().removeEventListener("click", this.headerClickHandler);
                if (this.getGroupHeader()) this.getGroupHeader().removeEventListener("click", this.headerClickHandler);
                if (this.getTimelineHeader()) this.getTimelineHeader().removeEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'attach',
            value: function attach() {
                var a = this;
                var b = this.getContent().querySelectorAll("div.mfp-bg-row");
                var c = this.getContent().querySelectorAll("div.mfp-bg-cell");
                var d = this.getContent().querySelectorAll("div.mfp-item-cell");
                var f = this.getContent().querySelector("div.mfp-content-wrap");
                f.style.width = this._contentWidth;
                var g = bz.getBounds(f).width;
                var j = 0;
                for (var i = 0; i < this._rows.count(); i++) {
                    var h = this._rows.items()[i];
                    h.bgTable = b[i];
                    for (var k = 0, m = h.cells.count(); k < m; k++) {
                        var l = h.cells.items()[k];
                        l.bgCell = c[j];
                        l.itemCell = d[j];
                        l.title = c[j];
                        j++
                    }
                }
                var n = this.getContent().querySelectorAll(".mfp-item-table");
                var o = this.getContent().querySelectorAll(".mfp-lane-table");
                for (var i = 0; i < this.groupCols.length; i++) {
                    this.groupCols[i].itemTable = n[i];
                    this.groupCols[i].laneTable = o[i]
                }
                if (this.grouped) {
                    var p = this.getGroupHeader().childNodes;
                    for (var i = 0; i < this.groupCols.length; i++) {
                        this.groupCols[i].header = p[i]
                    }
                }
                var q = this.getHeader().querySelectorAll(".mfp-timeline");
                for (var i = 0; i < q.length; i++) {
                    q[i].style.width = g + "px"
                }
                this.updateTimelines();
                this.clear();
                this.init();
                this.getScroller().addEventListener("scroll", function(e) {
                    return a.onScroll(e)
                });
                this.getHeader().addEventListener("click", this.headerClickHandler);
                if (this.getGroupHeader()) this.getGroupHeader().addEventListener("click", this.headerClickHandler);
                if (this.getTimelineHeader()) this.getTimelineHeader().addEventListener("click", this.headerClickHandler)
            }
        }, {
            key: 'updateTimelines',
            value: function updateTimelines() {
                if (!this.calculatedCellWidth) this.getDimensions();
                var a = this.getHeader().querySelectorAll(".mfp-timeline");
                var b = [];
                for (var i = 0, l = a.length; i < l; i++) {
                    var c = [];
                    var d = a[i].querySelectorAll('div');
                    for (var j = 0, m = d.length; j < m; j++) {
                        c.push(d[j])
                    }
                    b.push(c)
                }
                var e = b[b.length - 1][0];
                var f = e.offsetWidth - e.clientWidth;
                var g = Math.floor(this.calculatedCellWidth) - f;
                var h = b[b.length - 1].length * (g + f);
                this.cellsWidthCache = [];
                for (var i = 0, l = this.cellTicks.count(); i < l; i++) {
                    if (i < l - 1) {
                        this.cellsWidthCache.push([]);
                        var k = b[i][0].offsetWidth - b[i][0].clientWidth
                    }
                    for (var j = 0, m = this.cellTicks.items()[i].count(); j < m; j++) {
                        var w;
                        if (i < l - 1) {
                            w = this.cellTicks.items()[i].items()[j] * (g + f) - k
                        } else {
                            w = g
                        }
                        b[i][j].style.width = w + "px";
                        if (i < l - 1) {
                            this.cellsWidthCache[i].push(w)
                        }
                    }
                }
                for (var i = 0; i < a.length; i++) {
                    a[i].style.width = h + "px"
                }
                this.getContent().querySelector("div.mfp-content-wrap").style.width = h + "px";
                this.updateLeftmost(this.getScroller().scrollLeft);
                if (this._rows.count() > 0) this.calculatedCellWidth = bz.getBounds(this.getRows()[0]).width / this.rowCellsCount
            }
        }, {
            key: 'onScroll',
            value: function onScroll(e) {
                var s = this.getScroller();
                this.getTimelineHeader().style.left = -s.scrollLeft + 'px';
                if (this.getGroupHeader()) this.getGroupHeader().style.top = -s.scrollTop + 'px';
                this.updateLeftmost(s.scrollLeft)
            }
        }, {
            key: 'updateLeftmost',
            value: function updateLeftmost(a) {
                var b = this.getHeader().querySelectorAll(".mfp-timeline");
                var c = b.length;
                if (!this.cellsWidthCache) {
                    return
                }
                if (c <= 1) {
                    return
                }
                var d = [];
                for (var i = 0; i < c - 1; i++) {
                    var e = b[i].querySelectorAll('div')[0].style.textAlign;
                    d.push(e == 'left' || e == '')
                }
                var f = [];
                var g = c == 2 ? [
                    []
                ] : [
                    [],
                    []
                ];
                for (var i = 0; i < c - 1; i++) {
                    f = b[i].querySelectorAll('span');
                    g[i] = f
                }
                var h = this.getLeftmost(a);
                if (!this.currentLeftmost || h.length !== this.currentLeftmost.length) {
                    this.currentLeftmost = [];
                    for (var i = 0, l = h.length; i < l; i++) {
                        this.currentLeftmost.push(h[i])
                    }
                }
                for (var i = 0, l = g.length; i < l; i++) {
                    if (d[i] === false) {
                        continue
                    }
                    var j = h[i];
                    var k = this.currentLeftmost[i];
                    var m = g[i][j];
                    if (j !== k) {
                        this.currentLeftmost[i] = h[i];
                        var n = g[i][k];
                        n.style.left = '0px'
                    }
                    if (m) m.style.left = this.calcLeftmostOffset(a, m.parentNode, i)
                }
            }
        }, {
            key: 'calcLeftmostOffset',
            value: function calcLeftmostOffset(a, b, c) {
                var d = this.getHeader().querySelectorAll(".mfp-timeline");
                var x = bz.getRelativeBounds(b, d[c]).x;
                var l = a - x;
                return l + "px"
            }
        }, {
            key: 'getLeftmost',
            value: function getLeftmost(a) {
                var b = [];
                var c = this.cellsWidthCache;
                for (var i = 0, l = c.length; i < l; i++) {
                    var d = a;
                    if (c[i].length == 1) {
                        b.push(0);
                        continue
                    }
                    for (var j = 0, m = c[i].length; j < m; j++) {
                        d -= c[i][j];
                        if (d < 0) {
                            b.push(j);
                            break
                        }
                    }
                }
                return b
            }
        }, {
            key: 'getCellsCount',
            value: function getCellsCount(a, b, c, e) {
                var d = a.clone();
                var f = bx.getFirstDateAfter(d, c, e, this.formatInfo);
                if (f.equals(d)) f = bx.getNextDate(d, c, e);
                if (f.greaterThan(b)) b = f.clone();
                var g = 1;
                while (f.lessThan(b)) {
                    d = f.clone();
                    f = bx.getNextDate(f, c, e);
                    if (f.greaterThan(b)) b = f;
                    g++
                }
                return g
            }
        }, {
            key: 'getRelativeTicks',
            value: function getRelativeTicks(a, b, c, d) {
                var e = c - b;
                switch (a.unit) {
                    case R.Second:
                    case R.Minute:
                    case R.Hour:
                    case R.Day:
                    case R.Week:
                    default:
                        return e.ticks;
                    case R.Month:
                    case R.Year:
                        var f = this._settings.bottomTimelineSettings;
                        var g = b.clone();
                        var h = 0;
                        while (g < c) {
                            g = bx.getNextDate(g, f.Unit, 1);
                            h++
                        }
                        return d * h
                }
            }
        }, {
            key: 'getBottomRelativeTicks',
            value: function getBottomRelativeTicks(a) {
                switch (a.unit) {
                    case R.Second:
                        return bx.MillisPerSecond;
                    case R.Minute:
                        return bx.MillisPerMinute;
                    case R.Hour:
                        return bx.MillisPerHour;
                    case R.Day:
                    default:
                        return bx.MillisPerDay;
                    case R.Week:
                        return bx.MillisPerDay * 7;
                    case R.Month:
                        return bx.MillisPerDay * 30;
                    case R.Year:
                        return bx.MillisPerDay * 365
                }
            }
        }, {
            key: 'calculateCells',
            value: function calculateCells(a, b) {
                var c = new bB();
                var d = b - (3 - this._settings.timelines);
                if (b === Q.Bottom) {
                    for (var i = 0; i < this._realCells; i++) {
                        c.add(1 / this._realCells);
                        this.cellTicks.items()[d].add(1)
                    }
                    return c
                }
                var e = this._settings.bottomTimelineSettings.unit >= R.Month;
                var f = this.getBottomRelativeTicks(this._settings.bottomTimelineSettings);
                var g = this._settings.bottomTimelineSettings.unitCount;
                var h = this._date.date.clone();
                var j = this.calendar.endDate.clone();
                var k = bx.millisecondsBetween(j, h);
                var l = bx.getFirstDateAfter(h, a.unit, a.unitCount, this.formatInfo);
                if (l.equals(h)) l = bx.getNextDate(h, a.unit, a.unitCount);
                if (l.greaterThan(j)) l = j;
                var m = -1;
                if (e) m = this.getRelativeTicks(a, h, l, f);
                else m = Math.abs(l._ticks - h._ticks);
                var n = m / f / g;
                c.add(m / k);
                this.cellTicks.items()[d].add(n);
                while (l.lessThan(j)) {
                    h = l.clone();
                    l = bx.getNextDate(l, a.unit, a.unitCount);
                    if (l.greaterThan(j)) l = j.clone();
                    if (e) m = this.getRelativeTicks(a, h, l, f);
                    else m = Math.abs(l._ticks - h._ticks);
                    n = m / f / g;
                    c.add(m / k);
                    this.cellTicks.items()[d].add(n)
                }
                return c
            }
        }, {
            key: 'getEndCell',
            value: function getEndCell(a, b) {
                a = Math.min(a, this.cells.count() - 1);
                var c = this.cells.items()[a];
                if (c.resource == b || b == null) return c.cellIndex;
                var d = this.groupCols[this.resources.indexOf(b)];
                var e = this.getGroupCells(d.index);
                if (e.length == 0) {}
                return e[e.length - 1].cellIndex
            }
        }, {
            key: 'endSelection',
            value: function endSelection(e, a, b, c) {
                var d = this.cells.items()[a].startTime;
                var f = this.cells.items()[b].endTime;
                var g = new cB(d, f, '', this._timelineSettings.unit > 2, this.calendar, c);
                bt(cM.prototype.__proto__ || Object.getPrototypeOf(cM.prototype), 'endSelection', this).call(this, g)
            }
        }, {
            key: 'endItemDrag',
            value: function endItemDrag(e, a) {
                var b = this.getCellAt(e.clientX, e.clientY, a);
                var c = this.getGroupCells(this.itemData.appointment.groupColumnIndex)[this.itemData.startCellIndex];
                if (b == null) b = c;
                var d = this.itemData.item;
                var f = this.itemData.appointment;
                var g = this.setTimeOfUnit(d.startTime, b.startTime);
                var h = f.getEndTime(g);
                var a = b.resource;
                bt(cM.prototype.__proto__ || Object.getPrototypeOf(cM.prototype), 'endItemDrag', this).call(this, {
                    startTime: g,
                    endTime: h,
                    resource: a
                })
            }
        }, {
            key: 'endItemResize',
            value: function endItemResize(e) {
                var a = this.itemData.itemStartCell;
                var b = this.itemData.itemLastCell;
                var c = this.getCellAt(e.clientX, e.clientY);
                if (!c) {
                    a = b = null
                }
                var d = this.itemData.item;
                var f = this.itemData.appointment;
                var g;
                var h;
                if (a != null) {
                    g = bx.setTimeOfDay(d.startTime, a.startTime);
                    h = a.resource
                } else {
                    g = d.startTime;
                    h = this.getGroupCells(this.itemData.appointment.groupColumnIndex)[this.itemData.startCellIndex].resource
                }
                var i = b != null ? b.endTime : d.endTime;
                bt(cM.prototype.__proto__ || Object.getPrototypeOf(cM.prototype), 'endItemResize', this).call(this, {
                    startTime: g,
                    endTime: i,
                    resource: h
                })
            }
        }, {
            key: 'getDimensions',
            value: function getDimensions() {
                var a = bz.getBounds;
                if (this.getBgCells().length == 0) {
                    var b = a(this.getContent()).width;
                    this.cellWidth = b / this._settings.visibleCells;
                    this.calculatedCellWidth = Math.floor(this.cellWidth);
                    this.getHeader().childNodes[0].style.display = "none";
                    this.getContent().childNodes[0].style.height = "100%"
                } else {
                    this.cellWidth = this.cells.items()[0].title.offsetWidth;
                    this.calculatedCellWidth = a(this.getRows()[0]).width / this.rowCellsCount;
                    this.rowHeight = a(this.getRows()[0]).height;
                    this.groupHeaderWidth = a(this.getGroupHeader()).width;
                    this.dragOffsetLeft = a(this.getElement()).x + this.groupHeaderWidth;
                    this.dragWidth = this.cellWidth
                }
            }
        }, {
            key: 'updateItem',
            value: function updateItem(a, b) {
                var c = a.item;
                a.groupColumnIndex = this.getItemCols(c);
                if (!c.visible) {
                    return a
                }
                var a = a;
                var d = [];
                var e = [];
                if (!this.hasVisibleParts(c)) {
                    e.push(a)
                } else if (this.isComposite(c)) {
                    var f = bx.maxDate(c.startTime, this.itemsStartTime, false);
                    var g = bx.minDate(c.endTime, this.itemsEndTime, true);
                    var h = 0;
                    if (f.compareTo(c.startTime) == 1) h = 1;
                    if (g.compareTo(c.endTime) == -1) h = -1;
                    if (f.compareTo(c.startTime) == 1 && g.compareTo(c.endTime) == -1) h = 0;
                    if (a.groupColumnIndex.length == 1) {
                        var j = this.getTimeCell(f, false, a.groupColumnIndex[0]);
                        var k = this.getTimeCell(g, true, a.groupColumnIndex[0]);
                        var m = {
                            prototype: a,
                            type: 'part',
                            cellIndex: j.index,
                            cellsLength: k.index - j.index + 1,
                            colIndex: j.rowIndex,
                            isPartial: true,
                            partIndex: h,
                            lastCellIndex: k.index,
                            startCellIndex: j.index,
                            groupColumnIndex: a.groupColumnIndex
                        };
                        var n = new cp(m);
                        n.composite = true;
                        d.push(n);
                        e.push(a)
                    } else if (a.groupColumnIndex.length > 1) {
                        for (var i = 0, l = a.groupColumnIndex.length; i < l; i++) {
                            var j = this.getTimeCell(f, false, a.groupColumnIndex[i]);
                            var k = this.getTimeCell(g, true, a.groupColumnIndex[i]);
                            var m = {
                                prototype: a,
                                type: 'part',
                                cellIndex: j.index,
                                cellsLength: k.index - j.index + 1,
                                colIndex: j.rowIndex,
                                isPartial: true,
                                partIndex: h,
                                lastCellIndex: k.index,
                                startCellIndex: j.index,
                                groupColumnIndex: a.groupColumnIndex[i]
                            };
                            var n = new cp(m);
                            n.composite = true;
                            d.push(n);
                            e.push(a)
                        }
                    }
                } else if (a.groupColumnIndex.length == 1) {
                    var o = this.getTimeCell(c.startTime, false, a.groupColumnIndex[0]);
                    if (c.startTime._date.valueOf() == c.endTime._date.valueOf()) {
                        var k = o
                    } else {
                        var k = this.getTimeCell(c.endTime, true, a.groupColumnIndex[0])
                    }
                    a.lastCellIndex = k.index;
                    a.startCellIndex = o.index;
                    a.cellsLength = k.index - o.index + 1;
                    if (a.cellsLength < 1) {
                        a.cellsLength = 1
                    }
                    a.cellIndex = o.index;
                    a.colIndex = o.rowIndex;
                    a.updateVisual()
                } else if (a.groupColumnIndex.length > 1) {
                    for (var i = 0, l = a.groupColumnIndex.length; i < l; i++) {
                        var o = this.getTimeCell(c.startTime, false, a.groupColumnIndex[i]);
                        if (c.startTime._date.valueOf() == c.endTime._date.valueOf()) {
                            var k = o
                        } else {
                            var k = this.getTimeCell(c.endTime, true, a.groupColumnIndex[i])
                        }
                        var m = {
                            prototype: a,
                            type: 'part',
                            cellIndex: o.index,
                            cellsLength: k.index - o.index + 1,
                            colIndex: a.groupColumnIndex[i],
                            isPartial: true,
                            partIndex: undefined,
                            lastCellIndex: k.index,
                            startCellIndex: o.index,
                            groupColumnIndex: a.groupColumnIndex[i]
                        };
                        var n = new cp(m);
                        n.composite = true;
                        d.push(n);
                        e.push(a)
                    }
                }
                for (var i = 0; i < e.length; i++) {
                    this.removeAppointment(e[i])
                }
                if (b != false) this.items = this.items.concat(d);
                for (var i = 0; i < d.length; i++) {
                    d[i].updateVisual()
                }
                if (d.length > 0) return d;
                d.push(a);
                return d
            }
        }, {
            key: 'isComposite',
            value: function isComposite(a) {
                if (a.startTime.valueOf() == a.endTime.valueOf()) {
                    return false
                }
                if (a.startTime.valueOf() < this._rows.items()[0].itemsStartTime.valueOf()) return true;
                if (a.endTime.valueOf() > this._rows.items()[0].itemsEndTime.valueOf()) return true;
                return false
            }
        }, {
            key: 'hasVisibleParts',
            value: function hasVisibleParts(a) {
                if (this.getItemCols(a).length == 0) return false;
                if (a.startTime.valueOf() >= this._rows.items()[0].itemsStartTime.valueOf() && a.startTime.valueOf() < this._rows.items()[this._rows.count() - 1].itemsEndTime.valueOf()) return true;
                if (a.endTime.valueOf() > this._rows.items()[0].itemsStartTime.valueOf() && a.endTime.valueOf() < this._rows.items()[this._rows.count() - 1].itemsEndTime.valueOf()) return true;
                if (a.startTime.valueOf() <= this._rows.items()[0].itemsStartTime.valueOf() && a.endTime.valueOf() >= this._rows.items()[0].itemsEndTime.valueOf()) return true;
                return false
            }
        }, {
            key: 'clear',
            value: function clear() {
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-wrap'));
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-item-row'));
                bz.removeNodes(this.getContent().querySelectorAll('.mfp-lane-row'))
            }
        }, {
            key: 'init',
            value: function init() {
                if (!this.grouped) return;
                if (!this.cellWidth) this.getDimensions();
                this.getAllItems();
                for (var k = 0, m = this.groupCols.length; k < m; k++) {
                    this.itemsToPut = this.getItemsToPut(k);
                    for (var i = 0, l = this._rows.count(); i < l; i++) {
                        this.createItemsTable(this._rows.items()[i], k)
                    }
                    for (var i = 0; i < this.itemsToPut.length; i++) {
                        var a = this.items[this.items.indexOf(this.itemsToPut[i])];
                        a.cell = null;
                        a.row = -1;
                        a.hidden = true
                    }
                }
                this.createLanes();
                this.placeItems()
            }
        }, {
            key: 'createItemsTable',
            value: function createItemsTable(a, b) {
                var c = false;
                var d = this.getItemsToPutInCol(b);
                for (var i = 0, l = d.length; i < l; i++) {
                    c = false;
                    var e = document.createElement('tr');
                    e.className = 'mfp-item-row';
                    e.style.height = this.calendar.itemSettings.size + this.calendar.itemSettings.spacing + 'px';
                    var f = 0;
                    while (f < this.rowCellsCount) {
                        var d = this.getItemsInCell(a.cells.items()[f], this.itemsToPut);
                        var g = null;
                        if (d.length > 0) g = d[0];
                        if (g != null) {
                            var h = document.createElement('td');
                            h.className = 'mfp-item-cell';
                            h.style.paddingLeft = this.gridBorderLeft + 'px';
                            h.style.paddingRight = this.gridBorderRight + 'px';
                            h.colSpan = g.cellsLength;
                            f += g.cellsLength - 1;
                            g.cell = h;
                            g.row = i;
                            c = true;
                            this.itemsToPut.splice(this.itemsToPut.indexOf(g), 1)
                        } else {
                            var h = document.createElement('td');
                            h.className = 'mfp-item-cell'
                        }
                        e.appendChild(h);
                        f += 1
                    }
                    if (c) {
                        this.groupCols[b].itemTable.appendChild(e)
                    }
                }
            }
        }, {
            key: 'createLanes',
            value: function createLanes() {
                for (var i = 0, l = this._rows.count(); i < l; i++) {
                    while (this.groupCols[i].laneTable.rows.length < this.groupCols[i].itemTable.rows.length + 1) {
                        this.addLaneRow(i)
                    }
                }
                for (var i = 0, l = this.groupCols.length; i < l; i++) {
                    var a = bz.getBounds(this.getRows()[i]).height;
                    this.groupCols[i].header.style.height = a + "px"
                }
            }
        }, {
            key: 'addLaneRow',
            value: function addLaneRow(a) {
                var b = document.createElement('tr');
                b.className = 'mfp-lane-row';
                b.style.height = this.calendar.itemSettings.size + this.calendar.itemSettings.spacing + 'px';
                for (var i = 0, l = this.rowCellsCount; i < l; i++) {
                    var c = document.createElement('td');
                    c.className = 'mfp-lane-cell';
                    b.appendChild(c)
                }
                this.groupCols[a].laneTable.tBodies[0].appendChild(b)
            }
        }, {
            key: 'getItemCols',
            value: function getItemCols(a) {
                var b = [];
                if (this.resources == null || !this.grouped) {
                    b.push(0);
                    return b
                }
                for (var i = 0, l = this.resources.length; i < l; i++) {
                    if (a.hasResource(this.resources[i])) {
                        b.push(i)
                    }
                }
                return b
            }
        }, {
            key: 'getItemsToPutInCol',
            value: function getItemsToPutInCol(a) {
                var b = [];
                for (var i = 0, l = this.itemsToPut.length; i < l; i++) {
                    if (this.itemsToPut[i].groupColumnIndex == a) b.push(this.itemsToPut[i])
                }
                return b
            }
        }, {
            key: 'getItemsInCell',
            value: function getItemsInCell(a, b) {
                var c = [];
                for (var i = 0, l = b.length; i < l; i++) {
                    if (b[i].startCellIndex == a.index) c.push(b[i])
                }
                return c
            }
        }, {
            key: 'getAllItemsInCell',
            value: function getAllItemsInCell(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].groupColumnIndex == a.columnIndex) {
                        if (this.items[i].startCellIndex <= a.index && this.items[i].lastCellIndex >= a.index) {
                            b.push(this.items[i])
                        }
                    }
                }
                return b
            }
        }, {
            key: 'getGroupCells',
            value: function getGroupCells(a) {
                var b = [];
                this.cells.forEach(function(t) {
                    if (t.columnIndex == a) b.push(t)
                });
                return b
            }
        }, {
            key: 'getTimeCell',
            value: function getTimeCell(a, b, c) {
                if (c.length != undefined) c = c[0];
                if (c < 0 || c > this.groupCols.length - 1) return null;
                var d = this.getGroupCells(c);
                if (!d || d.length == 0) return null;
                if (a.valueOf() < this.startTime.valueOf()) return null;
                if (a.valueOf() > this.endTime.valueOf()) return null;
                var t = this.setTimeOfUnit(this.startTime, a);
                var i = this.unitsBetween(this.startTime, t);
                i = Math.floor(i);
                if (this.skipNext > 0 && i > d.length) {
                    return d[d.length - 1]
                }
                if (i > d.length) return null;
                if (i == d.length) {
                    if (b && a.equals(d[i - 1].endTime)) return d[i - 1];
                    else return null
                }
                if (b && bx.isSameDate(a, d[i].startTime) && i > 0) {
                    i -= 1
                }
                return d[i]
            }
        }, {
            key: 'getTimeCells',
            value: function getTimeCells(a, b, c, d) {
                var e = null;
                var f = null;
                if (d.length != undefined) d = d[0];
                if (d < 0 || d > this.groupCols.length - 1) return null;
                var g = this.getGroupCells(d);
                if (!g) return [];
                if (a.valueOf() < this.startTime.valueOf()) {
                    e = g[0]
                } else if (a.valueOf() > this.endTime.valueOf()) {
                    return []
                } else {
                    e = this.getTimeCell(a, false, d)
                }
                if (b !== null && typeof b !== "undefined" && typeof b._date !== "undefined") {
                    if (b.valueOf() > this.endTime.valueOf()) {
                        f = g[g.length - 1]
                    } else if (b.valueOf() < this.startTime.valueOf()) {
                        return []
                    } else {
                        f = this.getTimeCell(b, c, d)
                    }
                } else {
                    f = e
                }
                if (e && f) {
                    return g.slice(e.index, f.index + 1)
                }
                return []
            }
        }, {
            key: 'setTimeOfUnit',
            value: function setTimeOfUnit(a, b) {
                var c = 0;
                switch (this._timelineSettings.unit) {
                    case R.Second:
                        c = bx.setTimeOfSecond(a, b);
                        break;
                    case R.Minute:
                        c = bx.setTimeOfMinute(a, b);
                        break;
                    case R.Hour:
                        c = bx.setTimeOfHour(a, b);
                        break;
                    case R.Day:
                        c = bx.setTimeOfDay(a, b);
                        break;
                    case R.Week:
                        c = bx.setDayOfWeek(a, b);
                        break;
                    case R.Month:
                        c = bx.setDayOfMonth(a, b);
                        break;
                    case R.Year:
                        c = bx.setDayOfYear(a, b);
                        break
                }
                return c
            }
        }, {
            key: 'unitsBetween',
            value: function unitsBetween(a, b) {
                var c = 0;
                switch (this._timelineSettings.unit) {
                    case R.Second:
                        c = bx.secondsBetween(a, b);
                        break;
                    case R.Minute:
                        c = bx.minutesBetween(a, b);
                        break;
                    case R.Hour:
                        c = bx.hoursBetween(a, b);
                        break;
                    case R.Day:
                        c = bx.daysBetween(a, b);
                        break;
                    case R.Week:
                        c = bx.weeksBetween(a, b);
                        break;
                    case R.Month:
                        c = bx.monthsBetween(a, b);
                        break;
                    case R.Year:
                        c = bx.yearsBetween(a, b);
                        break
                }
                return c / this._timelineSettings.unitCount
            }
        }, {
            key: 'getItemsToPut',
            value: function getItemsToPut(a) {
                var b = [];
                for (var i = 0, l = this.items.length; i < l; i++) {
                    if (this.items[i].item.visible && this.items[i].groupColumnIndex == a) {
                        b.push(this.items[i])
                    }
                }
                return b
            }
        }, {
            key: 'getRowAt',
            value: function getRowAt(y) {
                for (var i = 0, l = this._rows.count(); i < l; i++) {
                    var b = bz.getRelativeBounds(this._rows.items()[i].bgTable, this.getContent());
                    if (y >= b.y && y <= b.y + b.height) {
                        return i
                    }
                }
                return -1
            }
        }, {
            key: 'getCellAt',
            value: function getCellAt(x, y, a) {
                var i = this.getCellIndexAt(x, y, a);
                if (i >= this.cells.count()) {}
                return this.cells.items()[i]
            }
        }, {
            key: 'getCellIndexAt',
            value: function getCellIndexAt(x, y, a) {
                if (!this.cellWidth) this.getDimensions();
                var b = bz.getCursorPosition({
                    clientX: x,
                    clientY: y
                }, this.getContent(), this.getScroller());
                var r = this.getRowAt(b.y + this.getScroller().scrollTop);
                var c = Math.floor(b.x / this.calculatedCellWidth);
                if (r >= this._rows.count() || r < 0) {
                    return null
                }
                if (c >= this.rowCellsCount || c < 0) {
                    return null
                }
                var d = c + r * this.rowCellsCount;
                if (a && this.cells.items()[d].resource != a) {
                    var e = this.getTimeCell(this.cells.items()[d].startTime, false, this.resources.indexOf(a));
                    d = this.cells.indexOfItem(e)
                }
                return d
            }
        }, {
            key: 'getItemsCount',
            value: function getItemsCount(a) {
                return this.groupCols[a.columnIndex].itemTable.rows.length || 1
            }
        }, {
            key: 'draw',
            value: function draw() {
                this._element = document.createElement("div");
                var h = this.drawHeader();
                this._element.appendChild(h);
                var w = document.createElement("div");
                w.className = "mfp-wrapper";
                this._element.appendChild(w);
                if (this._groupColumns > 0) {
                    var g = this.drawGroupHeader();
                    w.appendChild(g)
                }
                var c = this.drawContent();
                w.appendChild(c);
                return this._element
            }
        }, {
            key: 'drawHeader',
            value: function drawHeader() {
                var a = null;
                var d = document.createElement("div");
                d.className = "mfp-header";
                a = d;
                var c = document.createElement("div");
                c.innerHTML = "&nbsp;";
                d.appendChild(c);
                var h = document.createElement("div");
                h.className = "mfp-header-timeline";
                d.appendChild(h);
                if (this._settings.timelines >= 3) {
                    var b = this.drawTimeline(Q.Top);
                    h.appendChild(b)
                }
                if (this._settings.timelines >= 2) {
                    var e = this.drawTimeline(Q.Middle);
                    h.appendChild(e)
                }
                if (this._settings.timelines >= 1) {
                    var f = this.drawTimeline(Q.Bottom);
                    h.appendChild(f)
                }
                return a
            }
        }, {
            key: 'drawContent',
            value: function drawContent() {
                var a = null;
                var w = document.createElement("div");
                w.className = "mfp-content";
                a = w;
                var b = document.createElement("div");
                b.className = "mfp-content-wrap";
                w.appendChild(b);
                for (var k = 0; k < this._rows.count(); k++) {
                    var r = document.createElement("div");
                    r.className = "mfp-wrap";
                    r.style.height = "auto";
                    r.style.minHeight = this.calendar.itemSettings.size + this.calendar.itemSettings.spacing + "px";
                    b.appendChild(r);
                    var t = this.drawBackgroundTable();
                    r.appendChild(t);
                    var t = this.drawItemTable();
                    r.appendChild(t);
                    var t = this.drawLaneTable();
                    r.appendChild(t)
                }
                return a
            }
        }, {
            key: 'drawItemTable',
            value: function drawItemTable() {
                var a = null;
                var b = document.createElement("table");
                b.className = "mfp-item-table";
                a = b;
                return a
            }
        }, {
            key: 'drawBackgroundTable',
            value: function drawBackgroundTable() {
                var a = null;
                var b = "mfp-bg-cell";
                var r = document.createElement("div");
                r.className = "mfp-bg-row";
                a = r;
                for (var k = 0; k < this._realCells; k++) {
                    var d = document.createElement("div");
                    d.className = b;
                    r.appendChild(d)
                }
                return a
            }
        }, {
            key: 'drawLaneTable',
            value: function drawLaneTable() {
                var a = null;
                var t = document.createElement("table");
                t.className = "mfp-lane-table";
                t.cellPadding = "0";
                t.cellSpacing = "0";
                a = t;
                var b = document.createElement("tbody");
                t.appendChild(b);
                return a
            }
        }, {
            key: 'drawGroupHeader',
            value: function drawGroupHeader() {
                var a = null;
                var b;
                var w = document.createElement("div");
                w.className = "mfp-header-group";
                a = w;
                var d = document.createElement("div");
                d.className = "mfp-header-group-wrap";
                w.appendChild(d);
                for (var k = 0; k < this._rows.count(); k++) {
                    b = this.calendar.getResourceName(this.calendar.groupResources.items()[k]);
                    var g = document.createElement("div");
                    d.appendChild(g);
                    g.innerHTML = b || "&nbsp;"
                }
                return a
            }
        }, {
            key: 'drawTimeline',
            value: function drawTimeline(a) {
                var b = null;
                var c = this._timelineSettings;
                var d = this._bottomTimelineCells;
                switch (a) {
                    case Q.Top:
                        c = this._settings.topTimelineSettings;
                        d = this._topTimelineCells;
                        break;
                    case Q.Middle:
                        c = this._settings.middleTimelineSettings;
                        d = this._middleTimelineCells;
                        break
                }
                var e = this._date;
                var t = document.createElement("div");
                t.className = "mfp-timeline";
                b = t;
                for (var f = 0; f < d.count(); f++) {
                    var g = document.createElement("div");
                    t.appendChild(g);
                    var h = document.createElement("span");
                    g.appendChild(h);
                    h.innerHTML = e.toString(c.format, this.formatInfo);
                    if (bx.isTimeSpanShorter(e, c.unit, c.unitCount, this.formatInfo)) {
                        var i = e.clone();
                        e = bx.getFirstDateAfter(e, c.unit, c.unitCount, this.formatInfo);
                        if (i.equals(e)) e = bx.getNextDate(e, c.unit, c.unitCount)
                    } else e = bx.getNextDate(e, c.unit, c.unitCount)
                }
                return b
            }
        }, {
            key: 'addUnits',
            value: function addUnits(a, b) {
                b *= this._timelineSettings.unitCount;
                var c;
                switch (this._timelineSettings.unit) {
                    case R.Second: {
                        var r = new bx(bx.addSeconds2(new Date(a._date.valueOf()), b));
                        c = bx.addSeconds(a, b);
                        if (c < r) {
                            return r
                        }
                        if (c._date.getHours() - r._date.getHours() > 1) {
                            this.skipNext = 3600 + b
                        } else {
                            if (this.skipNext > 0) {
                                this.skipped = true
                            }
                            if (this.skipNext == 0 && this.skipped) {
                                c._date.setHours(c._date.getHours() - 1)
                            }
                            this.skipNext = 0
                        }
                        break
                    }
                    case R.Minute: {
                        var r = new bx(bx.addMinutes2(new Date(a._date.valueOf()), b));
                        c = bx.addMinutes(a, b);
                        if (c < r) {
                            return r
                        }
                        if (c._date.getHours() - r._date.getHours() > 1) {
                            this.skipNext = 60 + b
                        } else {
                            if (this.skipNext > 0) {
                                this.skipped = true
                            }
                            if (this.skipNext == 0 && this.skipped) {
                                c._date.setHours(c._date.getHours() - 1)
                            }
                            this.skipNext = 0
                        }
                        break
                    }
                    case R.Hour: {
                        var r = new bx(bx.addHours2(new Date(a._date.valueOf()), b));
                        c = bx.addHours(a, b);
                        if (c < r) {
                            return r
                        }
                        if (c._date.getHours() - r._date.getHours() > 1) {
                            this.skipNext = 1 + b
                        } else {
                            if (this.skipNext > 0) {
                                this.skipped = true
                            }
                            if (this.skipNext == 0 && this.skipped) {
                                c._date.setHours(c._date.getHours() - 1)
                            }
                            this.skipNext = 0
                        }
                        break
                    }
                    case R.Day: {
                        c = new bx(bx.addDays2(new Date(a._date.valueOf()), b));
                        break
                    }
                    case R.Week: {
                        c = new bx(bx.addWeeks2(new Date(a._date.valueOf()), b));
                        break
                    }
                    case R.Month: {
                        c = new bx(bx.addMonths2(new Date(a._date.valueOf()), b));
                        break
                    }
                    case R.Year: {
                        c = new bx(bx.addYears2(new Date(a._date.valueOf()), b));
                        break
                    }
                }
                return c
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                var c = new bB();
                this._rows.forEach(function(t) {
                    c.addRange(t.cells.items())
                }, this);
                c.sort(function(a, b) {
                    return a.cellIndex - b.cellIndex
                });
                return c
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return "mfp-resource-view"
            }
        }]);
        return cM
    }(cy);
    var cN = function() {
        function cN(a) {
            br(this, cN);
            this.calendar = a;
            this._headerStyle = T.Title | T.Buttons;
            this._weekHeaderStyle = U.Left;
            this._dayNamesHeaderStyle = V.Top;
            this._dayOfWeekFormat = S.Abbreviated;
            this._titleFormat = "mmmm, yyyy";
            this._hideTrailingWeeks = true;
            this._trailingWeekCount = 0;
            this._leadingWeekCount = 0;
            this._showPaddingDays = true;
            this._showPaddingItems = true;
            this._generalFormat = "d ";
            this._firstDayOfMonthFormat = "d MMM";
            this._firstDayOfYearFormat = "d ";
            this._propertyChanged = new bK()
        }
        bs(cN, [{
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                if (a.headerStyle !== undefined) this.headerStyle = a.headerStyle;
                if (a.weekHeaderStyle !== undefined) this.weekHeaderStyle = a.weekHeaderStyle;
                if (a.dayNamesHeaderStyle !== undefined) this.dayNamesHeaderStyle = a.dayNamesHeaderStyle;
                if (a.dayOfWeekFormat !== undefined) this.dayOfWeekFormat = a.dayOfWeekFormat;
                if (a.titleFormat !== undefined) this.titleFormat = a.titleFormat;
                if (a.hideTrailingWeeks !== undefined) this.hideTrailingWeeks = a.hideTrailingWeeks;
                if (a.trailingWeekCount !== undefined) this.trailingWeekCount = a.trailingWeekCount;
                if (a.leadingWeekCount !== undefined) this.leadingWeekCount = a.leadingWeekCount;
                if (a.showPaddingDays !== undefined) this.showPaddingDays = a.showPaddingDays;
                if (a.showPaddingItems !== undefined) this.showPaddingItems = a.showPaddingItems;
                if (a.generalFormat !== undefined) this.generalFormat = a.generalFormat;
                if (a.firstDayOfMonthFormat !== undefined) this.firstDayOfMonthFormat = a.firstDayOfMonthFormat;
                if (a.firstDayOfYearFormat !== undefined) this.firstDayOfYearFormat = a.firstDayOfYearFormat;
                if (a.maxItems !== undefined) this.maxItems = a.maxItems
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                this._propertyChanged.raiseEvent(this, new bJ(a, b, c))
            }
        }, {
            key: 'showHeader',
            get: function get$$1() {
                return this.headerStyle !== T.None
            }
        }, {
            key: 'showDayNamesHeader',
            get: function get$$1() {
                return this.dayNamesHeaderStyle !== V.None
            }
        }, {
            key: 'showWeekHeader',
            get: function get$$1() {
                return this._weekHeaderStyle !== U.None
            }
        }, {
            key: 'headerStyle',
            get: function get$$1() {
                return this._headerStyle
            },
            set: function set$$1(a) {
                var b = this._headerStyle;
                this._headerStyle = a;
                this.onPropertyChanged('headerStyle', b, a)
            }
        }, {
            key: 'weekHeaderStyle',
            get: function get$$1() {
                return this._weekHeaderStyle
            },
            set: function set$$1(a) {
                var b = this._weekHeaderStyle;
                this._weekHeaderStyle = a;
                this.onPropertyChanged('weekHeaderStyle', b, a)
            }
        }, {
            key: 'dayNamesHeaderStyle',
            get: function get$$1() {
                return this._dayNamesHeaderStyle
            },
            set: function set$$1(a) {
                var b = this._dayNamesHeaderStyle;
                this._dayNamesHeaderStyle = a;
                this.onPropertyChanged('dayNamesHeaderStyle', b, a)
            }
        }, {
            key: 'dayOfWeekFormat',
            get: function get$$1() {
                return this._dayOfWeekFormat
            },
            set: function set$$1(a) {
                var b = this._dayOfWeekFormat;
                this._dayOfWeekFormat = a;
                this.onPropertyChanged('dayOfWeekFormat', b, a)
            }
        }, {
            key: 'titleFormat',
            get: function get$$1() {
                return this._titleFormat
            },
            set: function set$$1(a) {
                var b = this._titleFormat;
                this._titleFormat = a;
                this.onPropertyChanged('titleFormat', b, a)
            }
        }, {
            key: 'showPaddingItems',
            get: function get$$1() {
                return this._showPaddingItems
            },
            set: function set$$1(a) {
                var b = this._showPaddingItems;
                this._showPaddingItems = a;
                this.onPropertyChanged('showPaddingItems', b, a)
            }
        }, {
            key: 'showPaddingDays',
            get: function get$$1() {
                return this._showPaddingDays
            },
            set: function set$$1(a) {
                var b = this._showPaddingDays;
                this._showPaddingDays = a;
                this.onPropertyChanged('showPaddingDays', b, a)
            }
        }, {
            key: 'hideTrailingWeeks',
            get: function get$$1() {
                return this._hideTrailingWeeks
            },
            set: function set$$1(a) {
                var b = this._hideTrailingWeeks;
                this._hideTrailingWeeks = a;
                this.onPropertyChanged('hideTrailingWeeks', b, a)
            }
        }, {
            key: 'leadingWeekCount',
            get: function get$$1() {
                return this._leadingWeekCount
            },
            set: function set$$1(a) {
                var b = this._leadingWeekCount;
                this._leadingWeekCount = a;
                this.onPropertyChanged('leadingWeekCount', b, a)
            }
        }, {
            key: 'trailingWeekCount',
            get: function get$$1() {
                return this._trailingWeekCount
            },
            set: function set$$1(a) {
                var b = this._trailingWeekCount;
                this._trailingWeekCount = a;
                this.onPropertyChanged('trailingWeekCount', b, a)
            }
        }, {
            key: 'maxItems',
            get: function get$$1() {
                return this._maxItems
            },
            set: function set$$1(a) {
                var b = this._maxItems;
                this._maxItems = a;
                this.onPropertyChanged('maxItems', b, a)
            }
        }, {
            key: 'generalFormat',
            get: function get$$1() {
                return this._generalFormat
            },
            set: function set$$1(a) {
                var b = this._generalFormat;
                this._generalFormat = a;
                this.onPropertyChanged('generalFormat', b, a)
            }
        }, {
            key: 'firstDayOfMonthFormat',
            get: function get$$1() {
                return this._firstDayOfMonthFormat
            },
            set: function set$$1(a) {
                var b = this._firstDayOfMonthFormat;
                this._firstDayOfMonthFormat = a;
                this.onPropertyChanged('firstDayOfMonthFormat', b, a)
            }
        }, {
            key: 'firstDayOfYearFormat',
            get: function get$$1() {
                return this._firstDayOfYearFormat
            },
            set: function set$$1(a) {
                var b = this._firstDayOfYearFormat;
                this._firstDayOfYearFormat = a;
                this.onPropertyChanged('firstDayOfYearFormat', b, a)
            }
        }]);
        return cN
    }();
    var cO = function() {
        function cO(a) {
            br(this, cO);
            this.calendar = a;
            this._numberOfMonths = 4;
            this._monthsPerRow = 2;
            this._visibleRows = 2;
            this._headerStyle = T.Title | T.Buttons;
            this._titleFormat = "MMMM, yyyy";
            this._titleSeparator = " - ";
            this._propertyChanged = new bK()
        }
        bs(cO, [{
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                if (a.numberOfMonths !== undefined) this.numberOfMonths = a.numberOfMonths;
                if (a.monthsPerRow !== undefined) this.monthsPerRow = a.monthsPerRow;
                if (a.visibleRows !== undefined) this.visibleRows = a.visibleRows;
                if (a.headerStyle !== undefined) this.headerStyle = a.headerStyle;
                if (a.titleFormat !== undefined) this.titleFormat = a.titleFormat;
                if (a.titleSeparator !== undefined) this.titleSeparator = a.titleSeparator
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                this._propertyChanged.raiseEvent(this, new bJ(a, b, c))
            }
        }, {
            key: 'headerStyle',
            get: function get$$1() {
                return this._headerStyle
            },
            set: function set$$1(a) {
                var b = this._headerStyle;
                this._headerStyle = a;
                this.onPropertyChanged('headerStyle', b, a)
            }
        }, {
            key: 'titleFormat',
            get: function get$$1() {
                return this._titleFormat
            },
            set: function set$$1(a) {
                var b = this._titleFormat;
                this._titleFormat = a;
                this.onPropertyChanged('titleFormat', b, a)
            }
        }, {
            key: 'titleSeparator',
            get: function get$$1() {
                return this._titleSeparator
            },
            set: function set$$1(a) {
                var b = this._titleSeparator;
                this._titleSeparator = a;
                this.onPropertyChanged('titleSeparator', b, a)
            }
        }, {
            key: 'visibleRows',
            get: function get$$1() {
                return this._visibleRows
            },
            set: function set$$1(a) {
                var b = this._visibleRows;
                this._visibleRows = a;
                this.onPropertyChanged('visibleRows', b, a)
            }
        }, {
            key: 'monthsPerRow',
            get: function get$$1() {
                return this._monthsPerRow
            },
            set: function set$$1(a) {
                var b = this._monthsPerRow;
                this._monthsPerRow = a;
                this.onPropertyChanged('monthsPerRow', b, a)
            }
        }, {
            key: 'numberOfMonths',
            get: function get$$1() {
                return this._numberOfMonths
            },
            set: function set$$1(a) {
                var b = this._numberOfMonths;
                this._numberOfMonths = a;
                this.onPropertyChanged('numberOfMonths', b, a)
            }
        }]);
        return cO
    }();
    var cP = function() {
        function cP(a) {
            br(this, cP);
            this.calendar = a;
            this._viewStyle = bm.WeekPerRow;
            this._visibleRows = 4;
            this._headerStyle = T.Title;
            this._titleFormat = "dd MMMM";
            this._titleSeparator = " - ";
            this._dayNamesHeaderStyle = V.Top;
            this._dayOfWeekFormat = S.Abbreviated;
            this._generalFormat = "d ";
            this._firstDayOfMonthFormat = "d MMM";
            this._firstDayOfYearFormat = "d ";
            this._propertyChanged = new bK()
        }
        bs(cP, [{
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                if (a.viewStyle !== undefined) this.viewStyle = a.viewStyle;
                if (a.visibleRows !== undefined) this.visibleRows = a.visibleRows;
                if (a.headerStyle !== undefined) this.headerStyle = a.headerStyle;
                if (a.titleFormat !== undefined) this.titleFormat = a.titleFormat;
                if (a.titleSeparator !== undefined) this.titleSeparator = a.titleSeparator;
                if (a.dayNamesHeaderStyle !== undefined) this.dayNamesHeaderStyle = a.dayNamesHeaderStyle;
                if (a.dayOfWeekFormat !== undefined) this.dayOfWeekFormat = a.dayOfWeekFormat;
                if (a.generalFormat !== undefined) this.generalFormat = a.generalFormat;
                if (a.firstDayOfMonthFormat !== undefined) this.firstDayOfMonthFormat = a.firstDayOfMonthFormat;
                if (a.firstDayOfYearFormat !== undefined) this.firstDayOfYearFormat = a.firstDayOfYearFormat;
                if (a.maxItems !== undefined) this.maxItems = a.maxItems
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                this._propertyChanged.raiseEvent(this, new bJ(a, b, c))
            }
        }, {
            key: 'visibleRows',
            get: function get$$1() {
                return this._visibleRows
            },
            set: function set$$1(a) {
                var b = this._visibleRows;
                this._visibleRows = a;
                this.onPropertyChanged('visibleRows', b, a)
            }
        }, {
            key: 'viewStyle',
            get: function get$$1() {
                return this._viewStyle
            },
            set: function set$$1(a) {
                var b = this._viewStyle;
                this._viewStyle = a;
                this.onPropertyChanged('viewStyle', b, a)
            }
        }, {
            key: 'headerStyle',
            get: function get$$1() {
                return this._headerStyle
            },
            set: function set$$1(a) {
                var b = this._headerStyle;
                this._headerStyle = a;
                this.onPropertyChanged('headerStyle', b, a)
            }
        }, {
            key: 'dayNamesHeaderStyle',
            get: function get$$1() {
                return this._dayNamesHeaderStyle
            },
            set: function set$$1(a) {
                var b = this._dayNamesHeaderStyle;
                this._dayNamesHeaderStyle = a;
                this.onPropertyChanged('dayNamesHeaderStyle', b, a)
            }
        }, {
            key: 'dayOfWeekFormat',
            get: function get$$1() {
                return this._dayOfWeekFormat
            },
            set: function set$$1(a) {
                var b = this._dayOfWeekFormat;
                this._dayOfWeekFormat = a;
                this.onPropertyChanged('dayOfWeekFormat', b, a)
            }
        }, {
            key: 'titleFormat',
            get: function get$$1() {
                return this._titleFormat
            },
            set: function set$$1(a) {
                var b = this._titleFormat;
                this._titleFormat = a;
                this.onPropertyChanged('titleFormat', b, a)
            }
        }, {
            key: 'titleSeparator',
            get: function get$$1() {
                return this._titleSeparator
            },
            set: function set$$1(a) {
                var b = this._titleSeparator;
                this._titleSeparator = a;
                this.onPropertyChanged('titleSeparator', b, a)
            }
        }, {
            key: 'generalFormat',
            get: function get$$1() {
                return this._generalFormat
            },
            set: function set$$1(a) {
                var b = this._generalFormat;
                this._generalFormat = a;
                this.onPropertyChanged('generalFormat', b, a)
            }
        }, {
            key: 'firstDayOfMonthFormat',
            get: function get$$1() {
                return this._firstDayOfMonthFormat
            },
            set: function set$$1(a) {
                var b = this._firstDayOfMonthFormat;
                this._firstDayOfMonthFormat = a;
                this.onPropertyChanged('firstDayOfMonthFormat', b, a)
            }
        }, {
            key: 'firstDayOfYearFormat',
            get: function get$$1() {
                return this._firstDayOfYearFormat
            },
            set: function set$$1(a) {
                var b = this._firstDayOfYearFormat;
                this._firstDayOfYearFormat = a;
                this.onPropertyChanged('firstDayOfYearFormat', b, a)
            }
        }, {
            key: 'maxItems',
            get: function get$$1() {
                return this._maxItems
            },
            set: function set$$1(a) {
                var b = this._maxItems;
                this._maxItems = a;
                this.onPropertyChanged('maxItems', b, a)
            }
        }]);
        return cP
    }();
    var cQ = function() {
        function cQ(b) {
            var c = this;
            br(this, cQ);
            this.calendar = b;
            this._dates = new bO();
            this._dates.collectionChanged.addEventListener(function(s, a) {
                c.onDatesChanged(s, a)
            });
            this._orientation = W.Vertical;
            this._startTime = 0;
            this._endTime = 1440;
            this._cellSize = 25;
            this._cellTime = new bw(bx.TicksPerHour / 2);
            this._reverseGrouping = false;
            this._headerStyle = T.Title | T.Buttons;
            this._titleFormat = b.formatInfo.dateFormats.shortDate;
            this._showDayHeader = true;
            this._generalFormat = "HH:mm tt";
            this._groupHours = true;
            this._twelveHourFormat = false;
            this._showMinutes = true;
            this._showAM = true;
            this._scrollStep = 1;
            this._maxItems = 3;
            this._propertyChanged = new bK()
        }
        bs(cQ, [{
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                this._dates.clear();
                if (a.dates !== undefined) {
                    for (var i = 0; i < a.dates.count(); i++) {
                        this._dates.add(a.dates.items()[i])
                    }
                }
                if (a.orientation !== undefined) this._orientation = a.orientation;
                if (a.startTime !== undefined) this.startTime = a.startTime;
                if (a.endTime !== undefined) this.endTime = a.endTime;
                if (a.cellSize !== undefined) this.cellSize = a.cellSize;
                if (a.cellTime !== undefined) this.cellTime = a.cellTime;
                if (a.reverseGrouping !== undefined) this.reverseGrouping = a.reverseGrouping;
                if (a.headerStyle !== undefined) this.headerStyle = a.headerStyle;
                if (a.titleFormat !== undefined) this.titleFormat = a.titleFormat;
                if (a.showDayHeader !== undefined) this.showDayHeader = a.showDayHeader;
                if (a.groupHours !== undefined) this.groupHours = a.groupHours;
                if (a.twelveHourFormat !== undefined) this.twelveHourFormat = a.twelveHourFormat;
                if (a.showMinutes !== undefined) this.showMinutes = a.showMinutes;
                if (a.showAM !== undefined) this.showAM = a.showAM;
                if (a.scrollStep !== undefined) this.scrollStep = a.scrollStep;
                if (a.maxItems !== undefined) this.maxItems = a.maxItems
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                this._propertyChanged.raiseEvent(this, new bJ(a, b, c))
            }
        }, {
            key: 'onDatesChanged',
            value: function onDatesChanged(a, b) {
                if (b.action === bC.Add) {
                    this.dates.items()[this.dates.count() - 1] = this.dates.items()[this.dates.count() - 1].date
                }
                this.onPropertyChanged('dates', null, this.dates)
            }
        }, {
            key: 'dates',
            get: function get$$1() {
                return this._dates
            }
        }, {
            key: 'orientation',
            get: function get$$1() {
                return this._orientation
            },
            set: function set$$1(a) {
                var b = this._orientation;
                this._orientation = a;
                this.onPropertyChanged('orientation', b, a)
            }
        }, {
            key: 'showDayHeader',
            get: function get$$1() {
                return this._showDayHeader
            },
            set: function set$$1(a) {
                var b = this._showDayHeader;
                this._showDayHeader = a;
                this.onPropertyChanged('showDayHeader', b, a)
            }
        }, {
            key: 'reverseGrouping',
            get: function get$$1() {
                return this._reverseGrouping
            },
            set: function set$$1(a) {
                var b = this._reverseGrouping;
                this._reverseGrouping = a;
                this.onPropertyChanged('reverseGrouping', b, a)
            }
        }, {
            key: 'cellSize',
            get: function get$$1() {
                return this._cellSize
            },
            set: function set$$1(a) {
                var b = this._cellSize;
                this._cellSize = a;
                this.onPropertyChanged('cellSize', b, a)
            }
        }, {
            key: 'cellTime',
            get: function get$$1() {
                return this._cellTime
            },
            set: function set$$1(a) {
                var b = this._cellTime;
                this._cellTime = a;
                this.onPropertyChanged('cellTime', b, a)
            }
        }, {
            key: 'startTime',
            get: function get$$1() {
                return this._startTime
            },
            set: function set$$1(a) {
                var b = this._startTime;
                this._startTime = a;
                this.onPropertyChanged('startTime', b, a)
            }
        }, {
            key: 'endTime',
            get: function get$$1() {
                return this._endTime
            },
            set: function set$$1(a) {
                var b = this._endTime;
                this._endTime = a;
                this.onPropertyChanged('endTime', b, a)
            }
        }, {
            key: 'realEndTime',
            get: function get$$1() {
                var a = this.startTime;
                var b = this.endTime;
                if (b > a) return b;
                return b + 24 * 60
            }
        }, {
            key: 'generalFormat',
            get: function get$$1() {
                return this._generalFormat
            },
            set: function set$$1(a) {
                var b = this._generalFormat;
                this._generalFormat = a;
                this.onPropertyChanged('generalFormat', b, a)
            }
        }, {
            key: 'groupHours',
            get: function get$$1() {
                return this._groupHours
            },
            set: function set$$1(a) {
                var b = this._groupHours;
                this._groupHours = a;
                this.onPropertyChanged('groupHours', b, a)
            }
        }, {
            key: 'twelveHourFormat',
            get: function get$$1() {
                return this._twelveHourFormat
            },
            set: function set$$1(a) {
                var b = this._twelveHourFormat;
                this._twelveHourFormat = a;
                this.onPropertyChanged('twelveHourFormat', b, a)
            }
        }, {
            key: 'showMinutes',
            get: function get$$1() {
                return this._showMinutes
            },
            set: function set$$1(a) {
                var b = this._showMinutes;
                this._showMinutes = a;
                this.onPropertyChanged('showMinutes', b, a)
            }
        }, {
            key: 'showAM',
            get: function get$$1() {
                return this._showAM
            },
            set: function set$$1(a) {
                var b = this._showAM;
                this._showAM = a;
                this.onPropertyChanged('showAM', b, a)
            }
        }, {
            key: 'headerStyle',
            get: function get$$1() {
                return this._headerStyle
            },
            set: function set$$1(a) {
                var b = this._headerStyle;
                this._headerStyle = a;
                this.onPropertyChanged('headerStyle', b, a)
            }
        }, {
            key: 'titleFormat',
            get: function get$$1() {
                return this._titleFormat
            },
            set: function set$$1(a) {
                var b = this._titleFormat;
                this._titleFormat = a;
                this.onPropertyChanged('titleFormat', b, a)
            }
        }, {
            key: 'scrollStep',
            get: function get$$1() {
                return this._scrollStep
            },
            set: function set$$1(a) {
                var b = this._scrollStep;
                this._scrollStep = a;
                this.onPropertyChanged('scrollStep', b, a)
            }
        }, {
            key: 'maxItems',
            get: function get$$1() {
                return this._maxItems
            },
            set: function set$$1(a) {
                var b = this._maxItems;
                this._maxItems = a;
                this.onPropertyChanged('maxItems', b, a)
            }
        }]);
        return cQ
    }();
    var cR = function() {
        function cR(a) {
            br(this, cR);
            this.calendar = a;
            this._orientation = W.Horizontal;
            this._cellUnits = R.Day;
            this._numberOfCells = 14;
            this._visibleCells = 7;
            this._headerStyle = T.Title | T.Buttons;
            this._titleFormat = a.formatInfo.dateFormats.dayMonth;
            this._generalFormat = "d ";
            this._firstDayOfMonthFormat = "d MMM";
            this._firstDayOfYearFormat = "d ";
            this._propertyChanged = new bK()
        }
        bs(cR, [{
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                if (a.orientation !== undefined) this.orientation = a.orientation;
                if (a.cellUnits !== undefined) this.cellUnits = a.cellUnits;
                if (a.numberOfCells !== undefined) this.numberOfCells = a.numberOfCells;
                if (a.visibleCells !== undefined) this.visibleCells = a.visibleCells;
                if (a.headerStyle !== undefined) this.headerStyle = a.headerStyle;
                if (a.titleFormat !== undefined) this.titleFormat = a.titleFormat;
                if (a.generalFormat !== undefined) this.generalFormat = a.generalFormat;
                if (a.firstDayOfMonthFormat !== undefined) this.firstDayOfMonthFormat = a.firstDayOfMonthFormat;
                if (a.firstDayOfYearFormat !== undefined) this.firstDayOfYearFormat = a.firstDayOfYearFormat
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                this._propertyChanged.raiseEvent(this, new bJ(a, b, c))
            }
        }, {
            key: 'orientation',
            get: function get$$1() {
                return this._orientation
            },
            set: function set$$1(a) {
                var b = this._orientation;
                this._orientation = a;
                this.onPropertyChanged('orientation', b, a)
            }
        }, {
            key: 'cellUnits',
            get: function get$$1() {
                return this._cellUnits
            },
            set: function set$$1(a) {
                var b = this._cellUnits;
                this._cellUnits = a;
                this.onPropertyChanged('cellUnits', b, a)
            }
        }, {
            key: 'numberOfCells',
            get: function get$$1() {
                return this._numberOfCells
            },
            set: function set$$1(a) {
                var b = this._numberOfCells;
                this._numberOfCells = a;
                this.onPropertyChanged('numberOfCells', b, a)
            }
        }, {
            key: 'visibleCells',
            get: function get$$1() {
                return this._visibleCells
            },
            set: function set$$1(a) {
                var b = this._visibleCells;
                this._visibleCells = a;
                this.onPropertyChanged('visibleCells', b, a)
            }
        }, {
            key: 'headerStyle',
            get: function get$$1() {
                return this._headerStyle
            },
            set: function set$$1(a) {
                var b = this._headerStyle;
                this._headerStyle = a;
                this.onPropertyChanged('headerStyle', b, a)
            }
        }, {
            key: 'titleFormat',
            get: function get$$1() {
                return this._titleFormat
            },
            set: function set$$1(a) {
                var b = this._titleFormat;
                this._titleFormat = a;
                this.onPropertyChanged('titleFormat', b, a)
            }
        }, {
            key: 'generalFormat',
            get: function get$$1() {
                return this._generalFormat
            },
            set: function set$$1(a) {
                var b = this._generalFormat;
                this._generalFormat = a;
                this.onPropertyChanged('generalFormat', b, a)
            }
        }, {
            key: 'firstDayOfMonthFormat',
            get: function get$$1() {
                return this._firstDayOfMonthFormat
            },
            set: function set$$1(a) {
                var b = this._firstDayOfMonthFormat;
                this._firstDayOfMonthFormat = a;
                this.onPropertyChanged('firstDayOfMonthFormat', b, a)
            }
        }, {
            key: 'firstDayOfYearFormat',
            get: function get$$1() {
                return this._firstDayOfYearFormat
            },
            set: function set$$1(a) {
                var b = this._firstDayOfYearFormat;
                this._firstDayOfYearFormat = a;
                this.onPropertyChanged('firstDayOfYearFormat', b, a)
            }
        }, {
            key: 'maxItems',
            get: function get$$1() {
                return this._maxItems
            },
            set: function set$$1(a) {
                var b = this._maxItems;
                this._maxItems = a;
                this.onPropertyChanged('maxItems', b, a)
            }
        }]);
        return cR
    }();
    var cS = function() {
        function cS(a, b) {
            br(this, cS);
            this.calendar = a;
            this._timeline = b;
            this._unit = R.Day;
            this._unitCount = 1;
            this._format = "d ";
            this._propertyChanged = new bK()
        }
        bs(cS, [{
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                if (a.unit !== undefined) this.unit = a.unit;
                if (a.unitCount !== undefined) this.unitCount = a.unitCount;
                if (a.format !== undefined) this.format = a.format
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                this._propertyChanged.raiseEvent(this, new bJ(a, b, c))
            }
        }, {
            key: 'unit',
            get: function get$$1() {
                return this._unit
            },
            set: function set$$1(a) {
                var b = this._unit;
                this._unit = a;
                this.onPropertyChanged('unit', b, a)
            }
        }, {
            key: 'unitCount',
            get: function get$$1() {
                return this._unitCount
            },
            set: function set$$1(a) {
                var b = this._unitCount;
                this._unitCount = a;
                this.onPropertyChanged('unitCount', b, a)
            }
        }, {
            key: 'format',
            get: function get$$1() {
                return this._format
            },
            set: function set$$1(a) {
                var b = this._format;
                this._format = a;
                this.onPropertyChanged('format', b, a)
            }
        }]);
        return cS
    }();
    var cT = function() {
        function cT(a) {
            br(this, cT);
            this.calendar = a;
            this._timelines = 3;
            this.topTimelineSettings._unit = R.Year;
            this.topTimelineSettings._format = "yyyy";
            this.middleTimelineSettings._unit = R.Month;
            this.middleTimelineSettings._format = "MMMM";
            this.bottomTimelineSettings._unit = R.Day;
            this._visibleCells = 14;
            this._propertyChanged = new bK()
        }
        bs(cT, [{
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                if (a.timelines != undefined) this.timelines = a.timelines;
                if (a.topTimelineSettings !== undefined) this.topTimelineSettings.copyFrom(a.topTimelineSettings);
                if (a.middleTimelineSettings !== undefined) this.middleTimelineSettings.copyFrom(a.middleTimelineSettings);
                if (a.bottomTimelineSettings !== undefined) this.bottomTimelineSettings.copyFrom(a.bottomTimelineSettings);
                if (a.visibleCells !== undefined) this.visibleCells = a.visibleCells
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                this._propertyChanged.raiseEvent(new bJ(a, b, c))
            }
        }, {
            key: 'visibleCells',
            get: function get$$1() {
                return this._visibleCells
            },
            set: function set$$1(a) {
                var b = this._visibleCells;
                this._visibleCells = a;
                this.onPropertyChanged('visibleCells', b, a)
            }
        }, {
            key: 'timelines',
            get: function get$$1() {
                return this._timelines
            },
            set: function set$$1(a) {
                var b = this._timelines;
                this._timelines = a;
                this.onPropertyChanged('timelines', b, a)
            }
        }, {
            key: 'topTimelineSettings',
            get: function get$$1() {
                var c = this;
                if (!this._topTimelineSettings) {
                    this._topTimelineSettings = new cS(this);
                    this._topTimelineSettings._propertyChanged.addEventListener(function(a, b) {
                        c.calendar.onViewSettingsChanged(a, b)
                    })
                }
                return this._topTimelineSettings
            }
        }, {
            key: 'middleTimelineSettings',
            get: function get$$1() {
                var c = this;
                if (!this._middleTimelineSettings) {
                    this._middleTimelineSettings = new cS(this);
                    this._middleTimelineSettings._propertyChanged.addEventListener(function(a, b) {
                        c.calendar.onViewSettingsChanged(a, b)
                    })
                }
                return this._middleTimelineSettings
            }
        }, {
            key: 'bottomTimelineSettings',
            get: function get$$1() {
                var c = this;
                if (!this._bottomTimelineSettings) {
                    this._bottomTimelineSettings = new cS(this);
                    this._bottomTimelineSettings._propertyChanged.addEventListener(function(a, b) {
                        c.calendar.onViewSettingsChanged(a, b)
                    })
                }
                return this._bottomTimelineSettings
            }
        }]);
        return cT
    }();
    var cU = function() {
        function cU(a) {
            br(this, cU);
            this.calendar = a;
            this._cssClass = "";
            this._size = 17;
            this._spacing = 2;
            this._showItems = true;
            this._showContinuationArrows = true;
            this._showCues = true;
            this._titleFormat = "%h";
            this._tooltipFormat = "%s[d MMM] %s[hh:mm] - %e[d MMM] %e[hh:mm] %h %d";
            this._propertyChanged = new bK()
        }
        bs(cU, [{
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                if (a.cssClass !== undefined) this.cssClass = a.cssClass;
                if (a.size !== undefined) this.size = a.size;
                if (a.spacing !== undefined) this.spacing = a.spacing;
                if (a.showItems !== undefined) this.showItems = a.showItems;
                if (a.showContinuationArrows !== undefined) this.showContinuationArrows = a.showContinuationArrows;
                if (a.showCues !== undefined) this.showCues = a.showCues;
                if (a.tooltipFormat !== undefined) this.tooltipFormat = a.tooltipFormat;
                if (a.titleFormat !== undefined) this.titleFormat = a.titleFormat
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                this._propertyChanged.raiseEvent(new bJ(a, b, c))
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return this._cssClass
            },
            set: function set$$1(a) {
                var b = this._cssClass;
                this._cssClass = a;
                this.onPropertyChanged('cssClass', b, a)
            }
        }, {
            key: 'size',
            get: function get$$1() {
                return this._size
            },
            set: function set$$1(a) {
                var b = this._size;
                this._size = a;
                this.onPropertyChanged('size', b, a)
            }
        }, {
            key: 'spacing',
            get: function get$$1() {
                return this._spacing
            },
            set: function set$$1(a) {
                var b = this._spacing;
                this._spacing = a;
                this.onPropertyChanged('spacing', b, a)
            }
        }, {
            key: 'showItems',
            get: function get$$1() {
                return this._showItems
            },
            set: function set$$1(a) {
                var b = this._showItems;
                this._showItems = a;
                this.onPropertyChanged('showItems', b, a)
            }
        }, {
            key: 'showContinuationArrows',
            get: function get$$1() {
                return this._showContinuationArrows
            },
            set: function set$$1(a) {
                var b = this._showContinuationArrows;
                this._showContinuationArrows = a;
                this.onPropertyChanged('showContinuationArrows', b, a)
            }
        }, {
            key: 'showCues',
            get: function get$$1() {
                return this._showCues
            },
            set: function set$$1(a) {
                var b = this._showCues;
                this._showCues = a;
                this.onPropertyChanged('showCues', b, a)
            }
        }, {
            key: 'tooltipFormat',
            get: function get$$1() {
                return this._tooltipFormat
            },
            set: function set$$1(a) {
                this._tooltipFormat = a
            }
        }, {
            key: 'titleFormat',
            get: function get$$1() {
                return this._titleFormat
            },
            set: function set$$1(a) {
                this._titleFormat = a
            }
        }]);
        return cU
    }();
    var cV = function() {
        function cV(a, b) {
            br(this, cV);
            this._schedule = a;
            this._document = b
        }
        bs(cV, [{
            key: 'saveResource',
            value: function saveResource(a, b, c) {
                var d = this.document.createElement(c);
                b.appendChild(d);
                var e = a.constructor.xmlInfo;
                if (e != null) {
                    d.setAttribute("class", e.classId);
                    d.setAttribute("version", e.classVersion.toString());
                    a.saveToXml(d, this)
                } else {
                    throw new Error("Resource cannot be serialized because it does not implement getXmlInfo().");
                }
            }
        }, {
            key: 'loadResource',
            value: function loadResource(a) {
                var b = a.getAttribute("class");
                var c = this.instantiateResource(b);
                c.loadFromXml(a, this);
                return c
            }
        }, {
            key: 'instantiateResource',
            value: function instantiateResource(a) {
                var b = cW.xmlClassMap[a];
                if (!b) throw new Error("Resource classId [" + a + "] is not registered.");
                var c = new b();
                return c
            }
        }, {
            key: 'saveItem',
            value: function saveItem(a, b, c) {
                var d = false;
                var e;
                if (c) {
                    d = true;
                    e = this.document.createElement(c);
                    b.appendChild(e)
                } else {
                    e = b
                }
                var f = a.constructor.xmlInfo;
                if (f != null) {
                    if (d) {
                        e.setAttribute("class", f.classId);
                        e.setAttribute("version", f.classVersion)
                    } else {
                        this.writeString(f.classId, "class", e);
                        this.writeInt(f.classVersion, "version", e)
                    }
                    a.saveToXml(e, this)
                } else {
                    throw new Error("Item cannot be serialized because it does not implement getXmlInfo().");
                }
            }
        }, {
            key: 'loadItem',
            value: function loadItem(a) {
                var b = "";
                if (a.hasAttribute("class")) b = a.getAttribute("class");
                else if (a.hasAttribute("classId")) b = a.getAttribute("classId");
                if (b === "") b = this.readString("class", a);
                if (b === "") b = this.readString("classId", a);
                var c = this.instantiateResource(b);
                c.loadFromXml(a, this);
                return c
            }
        }, {
            key: 'instantiateItem',
            value: function instantiateItem(a) {
                var b = cW.xmlClassMap[a];
                if (!b) throw new Error("Item classId [" + a + "] is not registered.");
                var c = new b();
                return c
            }
        }, {
            key: 'selectSingleNode',
            value: function selectSingleNode(a, b) {
                var c = b.getElementsByTagName(a);
                if (c.length < 1) return null;
                if (c[0].parentNode != b) return null;
                return c[0]
            }
        }, {
            key: 'innerText',
            value: function innerText(a) {
                if (a.childNodes.length == 0) return "";
                return a.childNodes[0].nodeValue
            }
        }, {
            key: 'isEmpty',
            value: function isEmpty(a) {
                return a.childNodes.length == 0
            }
        }, {
            key: 'hasValue',
            value: function hasValue(a) {
                return typeof a != "undefined" && a !== null
            }
        }, {
            key: 'isFloat',
            value: function isFloat(a) {
                return !/^-?\d+$/.test(String(a))
            }
        }, {
            key: 'addChildElement',
            value: function addChildElement(a, b, c) {
                var d = this.document.createElement(a);
                b.appendChild(d);
                if (this.hasValue(c)) {
                    d.appendChild(this.document.createTextNode(c))
                }
                return d
            }
        }, {
            key: 'writeString',
            value: function writeString(a, b, c) {
                return this.addChildElement(b, c, a)
            }
        }, {
            key: 'readString',
            value: function readString(a, b, c) {
                if (c === undefined) c = "";
                var d = this.selectSingleNode(a, b);
                if (!d) return c;
                return this.innerText(d)
            }
        }, {
            key: 'writeFloat',
            value: function writeFloat(a, b, c) {
                return this.addChildElement(b, c, a.toString())
            }
        }, {
            key: 'readFloat',
            value: function readFloat(a, b, c) {
                if (c === undefined) c = 0;
                var d = this.selectSingleNode(a, b);
                if (!d) return c;
                return parseFloat(this.innerText(d))
            }
        }, {
            key: 'writeBool',
            value: function writeBool(a, b, c) {
                if (typeof a === "undefined" || a === null) a = false;
                return this.addChildElement(b, c, a.toString())
            }
        }, {
            key: 'readBool',
            value: function readBool(a, b, c) {
                if (c === undefined) c = false;
                var d = this.selectSingleNode(a, b);
                if (!d) return c;
                return this.innerText(d).toLowerCase() == "true"
            }
        }, {
            key: 'writeInt',
            value: function writeInt(a, b, c) {
                var d = a.toString();
                if (d.indexOf('.') != -1) d = Math.round(a).toString();
                return this.addChildElement(b, c, d)
            }
        }, {
            key: 'readInt',
            value: function readInt(a, b, c) {
                if (c === undefined) c = 0;
                var d = this.selectSingleNode(a, b);
                if (!d) return c;
                return parseInt(this.innerText(d))
            }
        }, {
            key: 'writeDateTime',
            value: function writeDateTime(a, b, c) {
                var d = this.addChildElement(b, c);
                this.writeInt(a.year, "year", d);
                this.writeInt(a.month + 1, "month", d);
                this.writeInt(a.day, "day", d);
                this.writeInt(a.hour, "hour", d);
                this.writeInt(a.minute, "minute", d);
                this.writeInt(a.second, "second", d);
                this.writeInt(a.millisecond, "millisecond", d);
                return d
            }
        }, {
            key: 'readDateTime',
            value: function readDateTime(a, b, c) {
                if (c === undefined) c = bx.minValue();
                var d = this.selectSingleNode(a, b);
                if (!d) return c;
                return bx.fromDateParts(this.readInt("year", d), this.readInt("month", d) - 1, this.readInt("day", d), this.readInt("hour", d), this.readInt("minute", d), this.readInt("second", d), this.readInt("millisecond", d))
            }
        }, {
            key: 'writeTag',
            value: function writeTag(a, b, c, d) {
                if (b == null) return null;
                var e = this.addChildElement(c, d);
                this.writeObject(b, c, d, false);
                return e
            }
        }, {
            key: 'readTag',
            value: function readTag(a, b, c) {
                var d = this.selectSingleNode(b, c);
                if (!d) return null;
                if (this.isEmpty(d)) return null;
                return this.readObject(b, c)
            }
        }, {
            key: 'writeObject',
            value: function writeObject(a, b, c, d) {
                if (a == null) return null;
                var e = 0,
                    element = null;
                if (typeof a === "string") {
                    if (a.length === 1) e = 4;
                    else e = 1;
                    this.writeString(a, b, c)
                } else if (typeof a === "boolean") {
                    e = 2;
                    this.writeBool(a, b, c)
                } else if (typeof a === "number") {
                    if (this.isFloat(a)) {
                        e = 6;
                        this.writeFloat(a, b, c)
                    } else {
                        e = 9;
                        this.writeInt(a, b, c)
                    }
                }
                if (element != null) element.setAttribute("type", e);
                return element
            }
        }, {
            key: 'readObject',
            value: function readObject(a, b) {
                var c = this.selectSingleNode(a, b);
                if (!c) return null;
                var d = parseInt(c.getAttribute("Type"));
                if (d == 1) return this.readString(a, b);
                if (d == 2) return this.readBool(a, b);
                if (d == 3) return this.readInt(a, b);
                if (d == 4) return this.readString(a, b);
                if (d == 5) return this.readInt(a, b);
                if (d == 6) return this.readFloat(a, b);
                if (d == 7) return this.readInt(a, b);
                if (d == 8) return this.readInt(a, b);
                if (d == 9) return this.readInt(a, b);
                if (d == 10) return this.readInt(a, b);
                if (d == 11) return this.readFloat(a, b);
                if (d == 12) return this.readInt(a, b);
                if (d == 13) return this.readInt(a, b);
                if (d == 14) return this.readInt(a, b);
                return null
            }
        }, {
            key: 'writeReminder',
            value: function writeReminder(a, b, c) {
                if (!a) return null;
                var d = this.addChildElement(b, c);
                a.saveToXml(d, this)
            }
        }, {
            key: 'readReminder',
            value: function readReminder(a, b) {
                var c = this.selectSingleNode(a, b);
                if (!c) return null;
                if (this.isEmpty(c)) return null;
                var d = new bS();
                d.loadFromXml(c, this);
                return d
            }
        }, {
            key: 'writeRecurrence',
            value: function writeRecurrence(a, b, c) {
                if (!a) return null;
                var d = this.addChildElement(b, c);
                a.saveToXml(d, this)
            }
        }, {
            key: 'readRecurrence',
            value: function readRecurrence(a, b) {
                var c = this.selectSingleNode(a, b);
                if (!c) return null;
                if (this.isEmpty(c)) return null;
                var d = new bW();
                d.loadFromXml(c, this);
                return d
            }
        }, {
            key: 'schedule',
            get: function get$$1() {
                return this._schedule
            }
        }, {
            key: 'document',
            get: function get$$1() {
                return this._document
            }
        }]);
        return cV
    }();
    var cW = function() {
        function cW() {
            var c = this;
            br(this, cW);
            this.registerXmlTypes();
            this._items = new bO();
            this._items.collectionChanged.addEventListener(function() {
                c.onItemsChanged()
            });
            this._tasks = new bO();
            this._tasks.collectionChanged.addEventListener(function() {
                c.onTasksChanged()
            });
            this._contacts = new bO();
            this._contacts.collectionChanged.addEventListener(function() {
                c.onContactsChanged()
            });
            this._resources = new bO();
            this._resources.collectionChanged.addEventListener(function() {
                c.onResourcesChanged()
            });
            this._locations = new bO();
            this._locations.collectionChanged.addEventListener(function() {
                c.onLocationsChanged()
            });
            this._changed = new bK();
            this._itemChanged = new bK();
            this.itemChangedHandler = function(a, b) {
                c.onItemChanged(a, b)
            }
        }
        bs(cW, [{
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                this._contacts.clear();
                if (a.contacts !== undefined) a.contacts.copyTo(this._contacts);
                this._locations.clear();
                if (a.locations !== undefined) a.locations.copyTo(this._locations);
                this._tasks.clear();
                if (a.tasks !== undefined) a.tasks.copyTo(this._tasks);
                this._resources.clear();
                if (a.resources !== undefined) a.resources.copyTo(this._resources);
                this._items.clear();
                if (a.items !== undefined) a.items.copyTo(this._items)
            }
        }, {
            key: 'getItemById',
            value: function getItemById(a, b) {
                if (b === undefined) b = -1;
                for (var i = 0, l = this.items.count(); i < l; i++) {
                    if (this.items.items()[i].id === a && this.items.items()[i].occurrenceIndex === b) return this.items.items()[i]
                }
                return null
            }
        }, {
            key: 'getMasterById',
            value: function getMasterById(a) {
                for (var i = 0, l = this.items.count(); i < l; i++) {
                    if (this.items.items()[i].id === a && this.items.items()[i].recurrenceState === ba.Master) {
                        return this.items.items()[i]
                    }
                }
                return null
            }
        }, {
            key: 'getResourceById',
            value: function getResourceById(c) {
                var d = function d(a, b) {
                    for (var i = 0, l = a.count(); i < l; i++) {
                        if (a.items()[i].id === b) {
                            return a.items()[i]
                        }
                    }
                    return null
                };
                var e = null;
                if (typeof c === "undefined" || c === null) {
                    return e
                }
                if (c.substr(0, 3) === 'CNT') {
                    return d(this.contacts, c)
                }
                if (c.substr(0, 3) === 'LOC') {
                    return d(this.locations, c)
                }
                if (c.substr(0, 3) === 'TSK') {
                    return d(this.tasks, c)
                }
                if (c.substr(0, 3) === 'RSC') {
                    return d(this.resources, c)
                }
                return e
            }
        }, {
            key: 'onItemsChanged',
            value: function onItemsChanged() {
                for (var i = 0, l = this._items.count(); i < l; i++) {
                    this._items.items()[i].propertyChanged.removeEventListener(this.itemChangedHandler);
                    this._items.items()[i].propertyChanged.addEventListener(this.itemChangedHandler)
                }
                this.onChanged()
            }
        }, {
            key: 'onItemChanged',
            value: function onItemChanged(a, b) {
                this._itemChanged.raiseEvent(a, b)
            }
        }, {
            key: 'onTasksChanged',
            value: function onTasksChanged(a) {
                this.onChanged()
            }
        }, {
            key: 'onContactsChanged',
            value: function onContactsChanged(a) {
                this.onChanged()
            }
        }, {
            key: 'onResourcesChanged',
            value: function onResourcesChanged(a) {
                this.onChanged()
            }
        }, {
            key: 'onLocationsChanged',
            value: function onLocationsChanged(a) {
                this.onChanged()
            }
        }, {
            key: 'onChanged',
            value: function onChanged() {
                this._changed.raiseEvent(this, bD.Empty)
            }
        }, {
            key: 'registerXmlTypes',
            value: function registerXmlTypes() {
                cW.registerItemClass(bX, "std:appointment", 1);
                cW.registerItemClass(bP, "std:resource", 1);
                cW.registerItemClass(bQ, "std:contact", 1);
                cW.registerItemClass(bR, "std:location", 1);
                cW.registerItemClass(bT, "std:task", 1)
            }
        }, {
            key: 'saveToXml',
            value: function saveToXml(a) {
                var b = new XMLHttpRequest();
                b.open("POST", a, true);
                b.setRequestHeader('Content-Type', 'text/xml');
                var c = new XMLSerializer();
                b.send(c.serializeToString(this.toXmlDocument()))
            }
        }, {
            key: 'toXmlDocument',
            value: function toXmlDocument() {
                var a = document.implementation.createDocument("", "", null);
                var b = a.createElement("schedule");
                b.setAttribute("version", "6");
                a.appendChild(b);
                var c = new cV(this, a);
                var d = c.addChildElement("contacts", b);
                for (var i = 0; i < this.contacts.count(); i++) {
                    c.saveResource(this.contacts.items()[i], d, "contact")
                }
                var e = c.addChildElement("resources", b);
                for (var i = 0; i < this.resources.count(); i++) {
                    c.saveResource(this.resources.items()[i], e, "resource")
                }
                var f = c.addChildElement("locations", b);
                for (var i = 0; i < this.locations.count(); i++) {
                    c.saveResource(this.locations.items()[i], f, "location")
                }
                var g = c.addChildElement("tasks", b);
                for (var i = 0; i < this.tasks.count(); i++) {
                    c.saveResource(this.tasks.items()[i], g, "task")
                }
                var h = c.addChildElement("items", b);
                for (var i = 0; i < this.items.count(); i++) {
                    c.saveItem(this.items.items()[i], h, "item")
                }
                return a
            }
        }, {
            key: 'loadFromXml',
            value: function loadFromXml(a, b, c) {
                var d = this;
                var e = new XMLHttpRequest();
                e.onload = function() {
                    d.fromXmlDocument(e.responseXML);
                    if (b) b(d)
                };
                e.onerror = function() {
                    console.log("Error while getting XML.");
                    if (c) c(d)
                };
                e.open("GET", a);
                e.responseType = "document";
                e.send()
            }
        }, {
            key: 'fromXmlDocument',
            value: function fromXmlDocument(a) {
                var b = a.documentElement;
                var c = new cV(this, a);
                this.contacts.clear();
                var d = b.getElementsByTagName("contacts")[0];
                var e = d.firstElementChild;
                while (e != null) {
                    var f = c.loadResource(e);
                    this.contacts.add(f);
                    e = e.nextElementSibling
                }
                this.locations.clear();
                d = b.getElementsByTagName("locations")[0];
                e = d.firstElementChild;
                while (e != null) {
                    var g = c.loadResource(e);
                    this.locations.add(g);
                    e = e.nextElementSibling
                }
                this.resources.clear();
                d = b.getElementsByTagName("resources")[0];
                e = d.firstElementChild;
                while (e != null) {
                    var h = c.loadResource(e);
                    this.resources.add(h);
                    e = e.nextElementSibling
                }
                this.tasks.clear();
                d = b.getElementsByTagName("tasks")[0];
                e = d.firstElementChild;
                while (e != null) {
                    var i = c.loadResource(e);
                    this.tasks.add(i);
                    e = e.nextElementSibling
                }
                this.items.clear();
                d = b.getElementsByTagName("items")[0];
                e = d.firstElementChild;
                while (e != null) {
                    var j = c.loadItem(e);
                    this.items.add(j);
                    e = e.nextElementSibling
                }
                this.onChanged()
            }
        }, {
            key: 'toJson',
            value: function toJson() {
                var a = [];
                for (var i = 0, l = this.contacts.count(); i < l; i++) {
                    a.push(this.contacts.items()[i].toJson())
                }
                var b = [];
                for (var i = 0, l = this.resources.count(); i < l; i++) {
                    b.push(this.resources.items()[i].toJson())
                }
                var c = [];
                for (var i = 0, l = this.locations.count(); i < l; i++) {
                    c.push(this.locations.items()[i].toJson())
                }
                var d = [];
                for (var i = 0, l = this.tasks.count(); i < l; i++) {
                    d.push(this.tasks.items()[i].toJson())
                }
                var e = [];
                for (var i = 0, l = this.items.count(); i < l; i++) {
                    e.push(this.items.items()[i].toJson())
                }
                var f = {
                    contacts: a,
                    resources: b,
                    locations: c,
                    tasks: d,
                    items: e
                };
                return JSON.stringify(f)
            }
        }, {
            key: 'fromJson',
            value: function fromJson(a) {
                if (a > '') {
                    var b = JSON.parse(a);
                    this._contacts.clear();
                    if (b.contacts) {
                        for (var i = 0, l = b.contacts.length; i < l; i++) {
                            var c = new bQ();
                            c.fromJson(b.contacts[i]);
                            this.contacts.add(c)
                        }
                    }
                    this._resources.clear();
                    if (b.resources) {
                        for (var i = 0, l = b.resources.length; i < l; i++) {
                            var d = new bP();
                            d.fromJson(b.resources[i]);
                            this.resources.add(d)
                        }
                    }
                    this._locations.clear();
                    if (b.locations) {
                        for (var i = 0, l = b.locations.length; i < l; i++) {
                            var e = new bR();
                            e.fromJson(b.locations[i]);
                            this.locations.add(e)
                        }
                    }
                    this._tasks.clear();
                    if (b.tasks) {
                        for (var i = 0, l = b.tasks.length; i < l; i++) {
                            var f = new bT();
                            f.fromJson(b.tasks[i]);
                            this.tasks.add(f)
                        }
                    }
                    this._items.clear();
                    if (b.items) {
                        for (var i = 0, l = b.items.length; i < l; i++) {
                            var g = new bX();
                            g.fromJson(b.items[i], this);
                            this.items.add(g)
                        }
                    }
                    this.onChanged()
                }
            }
        }, {
            key: 'items',
            get: function get$$1() {
                return this._items
            }
        }, {
            key: 'itemChanged',
            get: function get$$1() {
                return this._itemChanged
            }
        }, {
            key: 'tasks',
            get: function get$$1() {
                return this._tasks
            }
        }, {
            key: 'contacts',
            get: function get$$1() {
                return this._contacts
            }
        }, {
            key: 'resources',
            get: function get$$1() {
                return this._resources
            }
        }, {
            key: 'locations',
            get: function get$$1() {
                return this._locations
            }
        }, {
            key: 'changed',
            get: function get$$1() {
                return this._changed
            }
        }]);
        return cW
    }();
    cW.registerItemClass = function(a, b, c) {
        cW.xmlClassMap[b] = a;
        a.xmlInfo = {
            classId: b,
            classVersion: c
        }
    };
    cW.xmlClassMap = new bV();
    var cX = bz.addCssClass;
    var cY = bz.removeCssClass;
    var cZ = function() {
        function cZ(a) {
            br(this, cZ);
            this.calendar = a;
            this.enabled = true;
            this.allowMultiple = true;
            this.ranges = [];
            this._cells = [];
            this._cache = []
        }
        bs(cZ, [{
            key: 'getRange',
            value: function getRange() {
                if (this.ranges.length > 0) {
                    return this.ranges[0]
                }
                return null
            }
        }, {
            key: 'setRange',
            value: function setRange(a, b, c) {
                if (this.calendar._loaded) {
                    if (a.valueOf() > this.calendar.view.endTime.valueOf()) return;
                    if (b && b.valueOf() < this.calendar.view.startTime.valueOf()) return;
                    if (c == null && this.calendar.view.grouped) {
                        return null
                    }
                    var d = 0;
                    var e = 0;
                    var f = this.calendar.getTimeCell(a, false, c);
                    if (f) {
                        d = f.globalIndex || f.index
                    } else {
                        f = this.calendar.getTimeCell(this.calendar.view.startTime, false, c);
                        if (f != null) {
                            d = f.globalIndex || f.index
                        }
                    }
                    if (b) {
                        var g = this.calendar.getTimeCell(b, true, c);
                        if (g != null) {
                            e = g.globalIndex || g.index
                        } else {
                            g = this.calendar.getTimeCell(this.calendar.view.endTime, true, c);
                            if (g != null) {
                                e = g.globalIndex || g.index
                            }
                        }
                    } else {
                        e = d
                    }
                    if (this.calendar.view.grouped && this.calendar.currentView != P.Timetable) {
                        if (f) d = f.cellIndex;
                        if (g) e = g.cellIndex
                    }
                    var m = this.calendar.selectManager;
                    if (c) {
                        var r = m.resource;
                        m.resource = c;
                        m.doSelect(d, e);
                        m.resource = r
                    } else {
                        m.doSelect(d, e)
                    }
                }
            }
        }, {
            key: 'addItems',
            value: function addItems(a) {
                for (var i = 0, l = a.length; i < l; i++) {
                    if (this._cells.indexOf(a[i]) > -1) {
                        continue
                    }
                    if (!this.allowMultiple) {
                        if (i < l - 1) {
                            continue
                        }
                    }
                    this._cells.push(a[i]);
                    cX(a[i].bgCell, "mfp-selection")
                }
                this.updateRanges(true)
            }
        }, {
            key: 'clear',
            value: function clear(a) {
                for (var i = 0, l = this._cells.length; i < l; i++) {
                    cY(this._cells[i].bgCell, "mfp-selection")
                }
                this._cells = [];
                this.updateRanges(a)
            }
        }, {
            key: 'isEmpty',
            value: function isEmpty() {
                return this._cells.length === 0
            }
        }, {
            key: 'updateRanges',
            value: function updateRanges(a) {
                this.ranges = [];
                if (this._cells.length > 0) {
                    if (this._cells.length === 1) {
                        this.ranges.push(new cq(this._cells[0].startTime, this._cells[0].endTime))
                    } else {
                        this._cells.sort(this.sortItems);
                        this.ranges.push(new cq(this._cells[0].startTime, this._cells[this._cells.length - 1].endTime))
                    }
                    this.resource = this._cells[0].resource
                }
                if (a !== false) {
                    var b = false;
                    if (this._cache.length !== this.ranges.length) {
                        b = true
                    } else {
                        for (var i = 0, l = this.ranges.length; i < l; i++) {
                            if (!this._cache[i].equals(this.ranges[i])) {
                                b = true
                            }
                        }
                    }
                    if (b) {
                        if (this.ranges.length > 0) this.calendar.onSelectionChanged(new cc(this.ranges[0].start, this.ranges[0].end, this.resource));
                        this._cache = [];
                        for (var i = 0, l = this.ranges.length; i < l; i++) {
                            this._cache.push(this.ranges[i])
                        }
                    }
                }
            }
        }, {
            key: 'sortItems',
            value: function sortItems(a, b) {
                if (a.globalIndex !== undefined && b.globalIndex !== undefined) return a.globalIndex - b.globalIndex;
                return a.startTime._date.valueOf() - b.startTime._date.valueOf()
            }
        }]);
        return cZ
    }();
    var da = function() {
        function da(a, b) {
            var c = this;
            br(this, da);
            this.calendar = a;
            this.view = a.view;
            this.element = this.view.getContainer();
            this.cells = this.view.cells;
            this.mouseUpHandler = function(e) {
                return c.onMouseUp(e)
            };
            this.mouseDownHandler = function(e) {
                return c.onMouseDown(e)
            };
            this.element.addEventListener('mousedown', this.mouseDownHandler);
            this.mouseMoveHandler = function(e) {
                return c.onMouseMove(e)
            };
            this.element.addEventListener('mousemove', this.mouseMoveHandler);
            this.clickHandler = function(e) {
                return c.onClick(e)
            };
            this.element.addEventListener('click', this.clickHandler);
            this.doubleClickHandler = function(e) {
                return c.onDoubleClick(e)
            };
            this.element.addEventListener('dblclick', this.doubleClickHandler);
            this.start = null;
            this.end = null
        }
        bs(da, [{
            key: 'dispose',
            value: function dispose() {
                if (this.mouseUpHandler) {
                    document.removeEventListener('mouseup', this.mouseUpHandler);
                    delete this.mouseUpHandler
                }
                if (this.mouseDownHandler) {
                    this.element.removeEventListener('mousedown', this.mouseDownHandler);
                    delete this.mouseUpHandler
                }
                if (this.mouseMoveHandler) {
                    this.element.removeEventListener('mousemove', this.mouseMoveHandler);
                    delete this.mouseMoveHandler
                }
                if (this.clickHandler) {
                    this.element.removeEventListener('click', this.clickHandler);
                    delete this.clickHandler
                }
                if (this.doubleClickHandler) {
                    this.element.removeEventListener('dblclick', this.doubleClickHandler);
                    delete this.doubleClickHandler
                }
            }
        }, {
            key: 'onMouseDown',
            value: function onMouseDown(e) {
                if (!this.calendar.enabled || this.view._selectionPaused) return;
                if (bz.hasCssClass(e.target, 'mfp-cue') || bz.getParent(e.target, 'mfp-cue')) return;
                if (this.calendar.popups.get('ItemsCueForm')) {
                    this.calendar.popups.get('ItemsCueForm').closeForm()
                }
                document.addEventListener('mouseup', this.mouseUpHandler);
                this.startSelect(e)
            }
        }, {
            key: 'onMouseMove',
            value: function onMouseMove(e) {
                if (!this.calendar.enabled) return;
                if (this.calendar.currentView == P.Timetable) {
                    if (this.view._dragging) {
                        this.resource = this.calendar.checkResource(e, this.resource)
                    }
                    if (!this.view._dragging && !this.view._selecting) {
                        this.view.doSelect(e);
                        this.doSelect(this.start, this.end)
                    }
                    return
                }
                var a = this.view.firstVisibleCell;
                var b = this.view.lastVisibleCell;
                if (this.view._dragging) {
                    this.start = this.view.getCellIndexAt(e.clientX, e.clientY, this.resource);
                    if (this.start != null) {
                        this.resource = this.calendar.checkResource(e, this.resource);
                        if (this.view.grouped) this.end = this.view.getEndCell(this.start + this.view.itemData.appointment.cellsLength - 1, this.view.cells.items()[this.start].resource);
                        else this.end = this.start + this.view.itemData.appointment.cellsLength - 1;
                        this.doSelect(this.start, this.end, true)
                    }
                }
                if (!this.view._dragging && !this.view._selecting) {
                    if (this.start != null) {
                        var c = this.view.getCellIndexAt(e.clientX, e.clientY, this.resource);
                        if (c != null) {
                            if (!this.calendar.selection.allowMultiple) {
                                this.start = c
                            }
                            if (a && c < a) {
                                this.end = a
                            } else if (b && c > b) {
                                this.end = b
                            } else {
                                this.end = c
                            }
                            this.doSelect(this.start, this.end)
                        }
                    }
                }
                e.preventDefault();
                return false
            }
        }, {
            key: 'onMouseUp',
            value: function onMouseUp(e) {
                if (!this.calendar.enabled) return;
                document.removeEventListener('mouseup', this.mouseUpHandler);
                var a = bz.getCursorPosition(e, this._element, this._scroller);
                if (this.end == null) {
                    var b = this.view.getCellIndexAt(e.clientX, e.clientY, this.resource);
                    if (b != null) {
                        this.end = b
                    }
                }
                this.endSelect(e)
            }
        }, {
            key: 'onClick',
            value: function onClick(e) {
                var a = this.view.getCellAt(e.clientX, e.clientY);
                if (a) {
                    if (this.view.getCellHeaderAt(a, e.clientX, e.clientY)) {
                        this.calendar.onHeaderClick(new cb(bo.Cell))
                    } else {
                        this.calendar.onCellClick(new ca(a))
                    }
                }
            }
        }, {
            key: 'onDoubleClick',
            value: function onDoubleClick(e) {
                var a = this.view.getCellAt(e.clientX, e.clientY);
                if (a) {
                    if (this.view.getCellHeaderAt(a, e.clientX, e.clientY)) {
                        this.calendar.onHeaderDoubleClick(new cb(bo.Cell))
                    } else {
                        this.calendar.onCellDoubleClick(new ca(a))
                    }
                }
            }
        }, {
            key: 'clear',
            value: function clear() {
                for (var i = 0, l = this.cells.count(); i < l; i++) {
                    if (this.cells.items()[i].bgCell) {
                        bz.removeCssClass(this.cells.items()[i].bgCell, "mfp-drag-indicator")
                    }
                }
            }
        }, {
            key: 'startSelect',
            value: function startSelect(e) {
                var a = bz.getCursorPosition(e, this._element, this._scroller);
                if (this.calendar.currentView == P.Timetable) {
                    var c = this.view.getCellAt(e.clientX, e.clientY);
                    if (c) {
                        this.resource = c.resource;
                        if (!this.view._dragging && !this.view._selecting) {
                            if (this.calendar._itemSelection.count() > 0) {
                                this.calendar._itemSelection.clear()
                            }
                            this.view.startSelect(e);
                            if (this.start != null) {
                                if (this.calendar.selection.enabled) {
                                    if (e.button == 0) {
                                        if (this.calendar.onSelectionStart(new cc(this.view.cells.items()[this.start].startTime, this.view.cells.items()[this.start].endTime, this.resource))) {
                                            this.doSelect(this.start, this.end)
                                        } else {
                                            this.start = null
                                        }
                                    }
                                } else {
                                    this.start = null;
                                    this.end = null
                                }
                            } else {
                                this.start = null;
                                this.end = null
                            }
                        }
                    }
                    return
                }
                var c = this.view.getCellIndexAt(e.clientX, e.clientY);
                if (!this.view.isValidCell(c)) {
                    return
                }
                this.resource = this.view.cells.items()[c].resource;
                if (this.view._dragging || this.view._selecting) {
                    this.start = this.view.itemData.startCellIndex;
                    this.end = this.view.itemData.lastCellIndex
                }
                if (!this.view._dragging && !this.view._selecting) {
                    if (this.calendar._itemSelection.count() > 0) {
                        this.calendar._itemSelection.clear()
                    }
                    this.start = this.view.getCellIndexAt(e.clientX, e.clientY, this.resource);
                    this.end = this.start;
                    if (this.start != null) {
                        if (this.calendar.selection.enabled) {
                            if (e.button == 0) {
                                if (this.calendar.onSelectionStart(new cc(this.view.cells.items()[this.start].startTime, this.view.cells.items()[this.start].endTime, this.resource))) {
                                    this.doSelect(this.start, this.end)
                                } else {
                                    this.start = null
                                }
                            }
                        } else {
                            this.start = null;
                            this.end = null
                        }
                    } else {
                        this.start = null;
                        this.end = null
                    }
                }
            }
        }, {
            key: 'doSelect',
            value: function doSelect(a, b, c) {
                if (a == null || b == null) return;
                if (a > b) {
                    var p = a;
                    a = b;
                    b = p
                }
                var d = this.view.firstVisibleCell;
                var f = this.view.lastVisibleCell;
                if (this.calendar._currentView == 0) {
                    var d = this.view.firstVisibleCellOfMonth(a);
                    var f = this.view.lastVisibleCellOfMonth(b)
                }
                if (c) {
                    this.clear()
                } else {
                    if (!this.calendar.selection.isEmpty()) {
                        this.calendar.selection.clear(false)
                    }
                }
                if (a == -1) a = 0;
                if (b == -1) b = this.cells.length;
                var s = Math.min(a, b);
                var e = Math.max(a, b);
                if (d && s < d) {
                    s = d
                }
                if (f && e > f) {
                    e = f
                }
                if (this.calendar._currentView == 0) {
                    if (c) {
                        s = this.view.getIndexCell(s, s);
                        e = this.view.getIndexCell(s + this.view.itemData.appointment.cellsLength - 1, s)
                    }
                } else {
                    if (f && e > f) {
                        e = f
                    }
                }
                var g = [];
                for (var i = s; i <= e; i++) {
                    if (this.cells.items()[i]) {
                        if (c) {
                            if (this.cells.items()[i].bgCell.className.indexOf("empty") == -1) bz.addCssClass(this.cells.items()[i].bgCell, "mfp-drag-indicator")
                        } else {
                            if (this.resource && this.view.cells.items()[i].resource != this.resource) continue;
                            g.push(this.view.cells.items()[i])
                        }
                    }
                }
                if (g.length > 0) {
                    this.calendar.selection.addItems(g)
                }
            }
        }, {
            key: 'endSelect',
            value: function endSelect(e) {
                var a = bz.getCursorPosition(e, this._element, this._scroller);
                if (e.button == 0) {
                    if (!this.view._dragging && !this.view._selecting) {
                        if (this.start != null && this.end != null) {
                            var b = this.view.firstVisibleCell;
                            var c = this.view.lastVisibleCell;
                            if (this.calendar.currentView == 0) {
                                var d = Math.min(this.start, this.end);
                                var f = Math.max(this.start, this.end);
                                if (d < 0) d = 0;
                                var b = this.view.firstVisibleCellOfMonth(d);
                                var c = this.view.lastVisibleCellOfMonth(f);
                                var g = this.view.firstVisibleCellOfMonth(f);
                                if (f < g) c = this.view.lastMonthVisibleCell(f);
                                this.start = d;
                                this.end = f
                            }
                            if (b && this.end < b) {
                                this.end = b
                            }
                            if (c && this.end > c) {
                                this.end = c
                            }
                            var h = this.view.cells.items()[Math.min(this.start, this.end)].startTime;
                            var i = this.view.cells.items()[Math.max(this.start, this.end)].endTime;
                            if (this.calendar.onSelectionEnd(new cc(h, i, this.resource))) this.view.endSelection(e, Math.min(this.start, this.end), Math.max(this.start, this.end), this.resource)
                        }
                    } else {
                        this.view._selecting = false
                    }
                    this.stopSelect();
                    return
                } else {
                    this.stopSelect()
                }
            }
        }, {
            key: 'stopSelect',
            value: function stopSelect() {
                this.start = null;
                this.end = null;
                this.resource = null;
                this.clear()
            }
        }]);
        return da
    }();
    var db = function() {
        function db(a) {
            br(this, db);
            this.calendar = a;
            this.minDate = new Date(1970, 1, 1, 0, 0, 0);
            this.lastCheckStart = this.minDate;
            this.lastCheckEnd = this.minDate;
            this.checkInterval = 6;
            this.start()
        }
        bs(db, [{
            key: 'getItems',
            value: function getItems(a, b) {
                var c = [];
                for (var i = 0, l = this.calendar.view.items.length; i < l; i++) {
                    var d = this.calendar.view.items[i].item;
                    var e = d.reminder;
                    if (e == null) continue;
                    var f;
                    if (e.type === Z.Exact) {
                        if (d.recurrence !== null && d.recurrence !== undefined) {
                            continue
                        }
                        f = e.time;
                        if (f.valueOf() >= a.valueOf() && f.valueOf() < b.valueOf()) c.push(d)
                    }
                    if (e.type === Z.Leading) {
                        f = d.startTime._date.valueOf() - e.timeInterval.milliseconds;
                        if (f >= a.valueOf() && f < b.valueOf()) c.push(d)
                    }
                }
                return c
            }
        }, {
            key: 'getTasks',
            value: function getTasks(a, b) {
                var c = [];
                for (var i = 0, l = this.calendar.schedule.tasks.length; i < l; i++) {
                    var d = this.calendar.schedule.tasks[i];
                    var e = d.reminder;
                    if (e === null) {
                        continue
                    }
                    if (e.type === Z.Exact) {
                        var f = e.time;
                        if (f.valueOf() >= a.valueOf() && f.valueOf() < b.valueOf()) {
                            c.push(d)
                        }
                    }
                }
                return c
            }
        }, {
            key: 'trigger',
            value: function trigger() {
                var a;
                var b;
                if (this.lastCheckStart.valueOf() === this.minDate.valueOf()) {
                    a = new Date(new Date().valueOf() - this.checkInterval);
                    b = new Date()
                } else {
                    a = this.lastCheckEnd;
                    b = new Date()
                }
                var c = this.getItems(a, b);
                if (c.length > 0) {
                    for (var i = 0, l = c.length; i < l; i++) {
                        this.calendar.onItemReminderTriggered(new cd(c[i]))
                    }
                }
                var d = this.getTasks(a, b);
                if (d.length > 0) {
                    for (var j = 0, m = d.length; j < m; j++) {
                        this.calendar.onTaskReminderTriggered(new cg(d[j]))
                    }
                }
                this.lastCheckStart = a;
                this.lastCheckEnd = b
            }
        }, {
            key: 'start',
            value: function start() {
                var a = this;
                this.id = setInterval(function() {
                    a.trigger()
                }, this.checkInterval)
            }
        }]);
        return db
    }();
    var dc = {
        "locale": "en-US",
        "date": {
            "dateFormats": {
                "shortDate": "d/MM/yyyy",
                "shortTime": "h:mm tt",
                "longDate": "dddd, MMMM dd, yyyy",
                "longTime": "h:mm:ss tt",
                "dayMonth": "d/MM",
                "yearMonth": "MMMM, yyyy",
                "full": "dddd, MMMM dd, yyyy h:mm:ss tt"
            },
            "months": {
                "narrow": ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
                "short": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
                "long": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
            },
            "days": {
                "narrow": ["S", "M", "T", "W", "T", "F", "S"],
                "short": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                "long": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
            },
            "dayPeriods": {
                "am": "AM",
                "pm": "PM"
            },
            "firstDayOfWeek": 0
        },
        "strings": {
            "newFormHeader": "New Appointment",
            "editFormHeader": "Edit Appointment",
            "newRecurrenceFormHeader": "New Recurrence",
            "editRecurrenceFormHeader": "Edit Recurrence",
            "cueFormHeader": "Cue items",
            "dateCaption": "Date",
            "datesCaption": "Dates",
            "subjectCaption": "Subject",
            "startTimeCaption": "Start time",
            "endTimeCaption": "End time",
            "allDayEventCaption": "All day event",
            "reminderCaption": "Reminder",
            "detailsCaption": "Details",
            "contactsCaption": "Contacts",
            "todayCaption": "Today",
            "locationCaption": "Location",
            "patternCaption": "Pattern",
            "rangeCaption": "Range of recurrence",
            "everyCaption": "Every",
            "ofEveryCaption": "of every",
            "startCaption": "Start",
            "noEndCaption": "No end date",
            "endAfterCaption": "End after",
            "endDateCaption": "End by",
            "saveButtonCaption": "Save",
            "optionsButtonCaption": "Options",
            "cancelButtonCaption": "Cancel",
            "recurrenceButtonCaption": "Recurrence",
            "deleteButtonCaption": "Delete",
            "secondsValue": "seconds",
            "minuteValue": "minute",
            "minutesValue": "minutes",
            "hourValue": "hour",
            "hoursValue": "hours",
            "dayValue": "day",
            "daysValue": "days",
            "weeksValue": "weeks",
            "monthValue": "month",
            "dailyValue": "Daily",
            "weeklyValue": "Weekly",
            "monthlyValue": "Monthly",
            "yearlyValue": "Yearly",
            "intervalValue": "By time interval",
            "firstValue": "first",
            "secondValue": "second",
            "thirdValue": "third",
            "fourthValue": "fourth",
            "lastValue": "last",
            "weekendValue": "weekend",
            "weekdayValue": "weekday",
            "recurrenceDailyOnePattern": "Occurs every day",
            "recurrenceDailyTwoPattern": "Occurs every [Days] days",
            "recurrenceDailyThreePattern": "Occurs every weekday",
            "recurrenceDailyFourPattern": "Occurs every weekend day",
            "recurrenceWeeklyOnePattern": "Occurs every [DaysOfWeek]",
            "recurrenceWeeklyTwoPattern": "Occurs every [Weeks] weeks on [DaysOfWeek]",
            "recurrenceMonthlyOnePattern": "Occurs day [DayOfMonth] of every [Months] month(s)",
            "recurrenceMonthlyTwoPattern": "Occurs the [Occurrence] [Day] of every [Months] month(s)",
            "recurrenceYearlyOnePattern": "Occurs every [MonthOfYear] [DayOfMonth]",
            "recurrenceYearlyTwoPattern": "Occurs the [Occurrence] [Day] of [MonthOfYear]",
            "recurrenceIntervalPattern": "Occurs every [Interval.Days] days [Interval.Hours] hours [Interval.Minutes] minutes [Interval.Seconds] seconds",
            "recurrenceStartDatePattern": "effective [StartDate]",
            "recurrenceEndDatePattern": "until [EndDate]",
            "recurrenceTimeOnePattern": "from [StartTime] to [EndTime]",
            "recurrenceTimeTwoPattern": "at [StartTime]"
        }
    };
    __$styleInject(".mfp-planner\r\n{\r\n    width:100%;\r\n    height:100%;\r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;\r\n}\r\n.mfp-planner div\r\n{\r\n    box-sizing: border-box;\r\n}\r\n.mfp-planner table\r\n{\r\n    border-collapse: collapse; \r\n}\r\n.mfp-planner table td, \r\n.mfp-planner table th\r\n{\r\n    padding: 0; \r\n}\r\n.mfp-cue\r\n{\r\n    cursor: pointer;\r\n    width:20%;\r\n    float: right;\r\n    margin-right: 4px;\r\n    text-align: right;\r\n\r\n}\r\n.mfp-cue > i\r\n{\r\n    border: solid black;\r\n    border-width: 0 1px 1px 0;\r\n    display: inline-block;\r\n    padding: 2px;\r\n    transform: rotate(45deg);\r\n    -webkit-transform: rotate(45deg);\r\n}\r\n.mfp-planner .mfp-selection\r\n{\r\n     background-color: rgba(0, 0, 0, 0.3);\r\n}\r\n\r\nhtml.mfp-cursor-move,\r\nhtml.mfp-cursor-move .mfp-planner *,\r\nhtml.mfp-cursor-move .mfp-planner .mfp-item-container,\r\nhtml.mfp-cursor-move .mfp-planner .mfp-item-container .mfp-resize-start,\r\nhtml.mfp-cursor-move .mfp-planner .mfp-item-container .mfp-resize-end\r\n{\r\n    cursor: move !important;\r\n}\r\n\r\nhtml.mfp-cursor-n-resize,\r\nhtml.mfp-cursor-n-resize .mfp-planner *,\r\nhtml.mfp-cursor-n-resize .mfp-planner .mfp-item-container,\r\nhtml.mfp-cursor-n-resize .mfp-planner .mfp-item-container .mfp-resize-start,\r\nhtml.mfp-cursor-n-resize .mfp-planner .mfp-item-container .mfp-resize-end\r\n{\r\n    cursor: n-resize !important;\r\n}\r\n\r\nhtml.mfp-cursor-w-resize,\r\nhtml.mfp-cursor-w-resize .mfp-planner *,\r\nhtml.mfp-cursor-w-resize .mfp-planner .mfp-item-container,\r\nhtml.mfp-cursor-w-resize .mfp-planner .mfp-item-container .mfp-resize-start,\r\nhtml.mfp-cursor-w-resize .mfp-planner .mfp-item-container .mfp-resize-end\r\n{\r\n    cursor: w-resize !important;\r\n}\r\n\r\nhtml.mfp-cursor-not-allowed,\r\nhtml.mfp-cursor-not-allowed .mfp-planner *,\r\nhtml.mfp-cursor-not-allowed .mfp-planner .mfp-item-container,\r\nhtml.mfp-cursor-not-allowed .mfp-planner .mfp-item-container .mfp-resize-start,\r\nhtml.mfp-cursor-not-allowed .mfp-planner .mfp-item-container .mfp-resize-end\r\n{\r\n    cursor: not-allowed !important;\r\n}", undefined);
    __$styleInject(".mfp-month-view,\r\n.mfp-month-range-view \r\n{\r\n    border: 1px solid;\r\n    background-color:#fff;\r\n}\r\n.mfp-month-view .mfp-header-weeknumbers\r\n{\r\n    border-right: 1px solid;\r\n}\r\n.mfp-month-view .mfp-header-weekdays,\r\n.mfp-month-view .mfp-bg-cell-header,\r\n.mfp-month-view .mfp-item-table .mfp-cell-header\r\n{\r\n    border-top: 1px solid;\r\n}\r\n.mfp-month-view .mfp-bg-cell-header,\r\n.mfp-month-view .mfp-item-table .mfp-cell-header\r\n{\r\n     border-bottom: 1px solid;\r\n}\r\n.mfp-month-view .mfp-item-table .mfp-cell-header\r\n{\r\n    border-color: transparent;\r\n}\r\n.mfp-month-view .mfp-bg-cell:not(:last-child)\r\n{\r\n    border-right:1px solid;\r\n}\r\n\r\n.mfp-month-view > div,\r\n.mfp-month-range-view > div\r\n{\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\theight: 100%;\r\n}\r\n\r\n.mfp-month-view .mfp-header,\r\n.mfp-month-range-view .mfp-header\r\n{\r\n    flex: 0 0 auto;\r\n    flex-direction: column;\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-title,\r\n.mfp-month-range-view .mfp-header .mfp-title\r\n{\r\n    text-align: center;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-title .mfp-link,\r\n.mfp-month-range-view .mfp-header .mfp-title .mfp-link\r\n{\r\n    order:0;\r\n    display: inline-block;\r\n    width:100%;\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-button,\r\n.mfp-month-range-view .mfp-header .mfp-button\r\n{\r\n    font-size: xx-small;\r\n    padding:4px;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-title .mfp-button-prev\r\n{\r\n    order:-1;\r\n}\r\n.mfp-month-view .mfp-header .mfp-title .mfp-button-prev-2,\r\n.mfp-month-range-view .mfp-header .mfp-title .mfp-button-prev-2\r\n{\r\n    order:-2;\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-title .mfp-button-next\r\n{\r\n    order:2;\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-title .mfp-button-next-2,\r\n.mfp-month-range-view .mfp-header .mfp-title .mfp-button-next-2\r\n{\r\n    order:3;\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-button-prev > span::before\r\n{\r\n     content: '\\25c4';\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-button-next > span::before\r\n{\r\n    content: '\\25ba';\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-button-prev-2 > span::before,\r\n.mfp-month-range-view .mfp-header .mfp-button-prev-2 > span::before\r\n{\r\n    content: '\\25c4\\25c4';\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-button-next-2 > span::before,\r\n.mfp-month-range-view .mfp-header .mfp-button-next-2 > span::before\r\n{\r\n    content: '\\25ba\\25ba';\r\n}\r\n\r\n\r\n.mfp-month-view .mfp-header .mfp-header-weekdays\r\n{\r\n    position:relative;\r\n    z-index:0;\r\n    width:100%;\r\n  /*  height:100%;*/\r\n    display:flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.mfp-month-view .mfp-header-weeknumbers\r\n{\r\n    flex: 0 0 30px;\r\n}\r\n\r\n.mfp-month-view .mfp-header-weeknumbers .mfp-weeknumbers\r\n{\r\n    width:100%;\r\n    height:100%;\r\n    table-layout: fixed;\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-header-weekdays .mfp-weekdays-wrap\r\n{\r\n    width:100%;\r\n  /*  height:100%;*/\r\n    display:flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    text-align: center;\r\n}\r\n\r\n.mfp-month-view .mfp-header .mfp-header-weekdays .mfp-weekdays-wrap > div\r\n{\r\n    flex:1 1 0%;\r\n}\r\n\r\n.mfp-month-view .mfp-content,\r\n.mfp-month-range-view .mfp-content\r\n{\r\n    flex: 1 1 100%;\r\n    position: relative;\r\n    display: flex;\r\n}\r\n\r\n.mfp-month-view .mfp-content .mfp-wrap\r\n{\r\n    height:100%;\r\n    width:100%;\r\n   /* display: flex;*/\r\n    flex-direction: column;\r\n    flex: 1 1 100%;\r\n}\r\n.mfp-month-view .mfp-content .mfp-wrap .mfp-week\r\n{\r\n    position:relative;\r\n    flex:1;\r\n}\r\n\r\n.mfp-month-view .mfp-content .mfp-wrap .mfp-bg-row\r\n{\r\n    position:relative;\r\n    z-index:0;\r\n    width:100%;\r\n    height:100%;\r\n    table-layout: fixed;\r\n    display:flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    text-align: center;\r\n}\r\n\r\n.mfp-month-view .mfp-content .mfp-wrap .mfp-bg-row .mfp-bg-cell\r\n{\r\n    vertical-align: top;\r\n    flex:1;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-month-view .mfp-content .mfp-wrap .mfp-bg-row .mfp-bg-cell .mfp-bg-cell-header\r\n{\r\n    white-space: nowrap;\r\n}\r\n\r\n.mfp-month-view .mfp-content .mfp-wrap .mfp-item-table\r\n{\r\n    left: 0;\r\n    position: absolute;\r\n    table-layout: fixed;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 1;\r\n}\r\n\r\n.mfp-month-view .mfp-content .mfp-wrap .mfp-item-table td\r\n{\r\n    vertical-align: top;\r\n}\r\n\r\n/*Month range*/\r\n.mfp-month-range-view .mfp-content-wrap\r\n{\r\n    position:relative;\r\n    overflow-y: auto;\r\n    overflow-x:hidden;\r\n    flex:1 1 100%;\r\n}\r\n.mfp-month-range-view .mfp-content-wrap .mfp-wrap\r\n{\r\n    position:relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    height:100%;\r\n}\r\n.mfp-month-range-view .mfp-content-wrap .mfp-wrap > div\r\n{\r\n    display: flex;\r\n   /* flex:1 1 100%;*/\r\n}\r\n.mfp-month-range-view .mfp-content-wrap .mfp-month-view\r\n{\r\n    width:100%;\r\n    height:100%;\r\n}", undefined);
    __$styleInject(".mfp-timetable-view\r\n{\r\n    border:1px solid;\r\n    background-color:#fff; \r\n}\r\n\r\n.mfp-timetable-view .mfp-cell\r\n{\r\n    border-top:1px solid;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header-timeline,\r\n.mfp-timetable-view .mfp-column\r\n{\r\n    border-right: 1px solid;\r\n}\r\n\r\n.mfp-timetable-view\r\n{\r\n    overflow: visible;\r\n}\r\n\r\n.mfp-timetable-view > div\r\n{\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\theight: 100%;\r\n}\r\n\r\n/*main header*/\r\n.mfp-timetable-view .mfp-header\r\n{\r\n    width: 100%;\r\n    display: flex;\r\n    flex: 1 0 auto;\r\n    justify-content: space-between;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-corner\r\n{\r\n    flex: 0 0 40px;\r\n}\r\n.mfp-timetable-view .mfp-header .mfp-title\r\n{\r\n    position: relative;\r\n    width: 100%;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-title .mfp-title-table\r\n{\r\n    position: relative;\r\n    width: 100%;\r\n    height:100%;\r\n    table-layout: fixed;\r\n    text-align: center;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-title .mfp-button-wrap\r\n{\r\n    position: absolute;\r\n    width: 100%;\r\n    top: 0;\r\n    z-index: 1;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-button\r\n{\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    font-size: xx-small;\r\n    padding:4px;\r\n   /* margin-top:10px;*/\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-title .mfp-button-wrap a:last-child\r\n{\r\n    float:right;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-title .mfp-button-prev\r\n{\r\n    order:-1;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-title .mfp-button-next\r\n{\r\n    order:2;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-button-prev > span::before\r\n{\r\n     content: '\\25c4';\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-button-next > span::before\r\n{\r\n    content: '\\25ba';\r\n}\r\n\r\n\r\n.mfp-timetable-view .mfp-header .mfp-title-table tr.mfp-item-row > td\r\n{\r\n    vertical-align: top;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-title-table tr.mfp-empty-row > td:empty:after\r\n{\r\n    content: \"\\00a0\";\r\n}\r\n\r\n.mfp-timetable-view .mfp-header .mfp-scrollfix\r\n{\r\n    width:17px;\r\n}\r\n.mfp-timetable-view .mfp-scroll-container\r\n{\r\n   position: relative;\r\n   height:100%; \r\n   overflow-y: scroll;\r\n}\r\n\r\n.mfp-timetable-view .mfp-content-wrap\r\n{\r\n    position: relative;\r\n    display: flex;\r\n}\r\n\r\n.mfp-timetable-view .mfp-content-wrap .mfp-header-timeline\r\n{\r\n    flex: 0 0 40px;\r\n    overflow-x: hidden;\r\n}\r\n\r\n.mfp-timetable-view .mfp-content-wrap .mfp-header-timeline\r\n{\r\n    display:flex;\r\n    flex-direction: column;\r\n}\r\n.mfp-timetable-view .mfp-header-timeline .mfp-group-time\r\n{\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    float: right;\r\n}\r\n.mfp-timetable-view .mfp-header-timeline .mfp-group-time > div\r\n{\r\n    flex: 1 1 0%;\r\n}\r\n.mfp-timetable-view .mfp-header-timeline .mfp-hour,\r\n.mfp-timetable-view .mfp-header-timeline .mfp-time\r\n{\r\n    flex: 1 1 0%;\r\n    float: left;\r\n    text-align: center;\r\n    font-size: small;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-timetable-view .mfp-header-timeline .mfp-hour span\r\n{\r\n  clear :both;\r\n}\r\n.mfp-timetable-view .mfp-header-timeline .mfp-minute,\r\n.mfp-timetable-view .mfp-header-timeline .mfp-AMPM\r\n{\r\n    text-align: center;\r\n    font-size: x-small;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-timetable-view .mfp-content\r\n{\r\n    display: flex;\r\n    flex: 1 1 100%;\r\n    position: relative;\r\n}\r\n\r\n.mfp-timetable-view .mfp-content .mfp-column\r\n{\r\n    flex: 1 1 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.mfp-timetable-view .mfp-content .mfp-column .mfp-cell-wrap\r\n{\r\n    position: relative;\r\n    /*flex: 1 1 0;*/\r\n    overflow: visible;\r\n    padding-right:10px;\r\n    box-sizing: border-box;\r\n}\r\n\r\n.mfp-timetable-view .mfp-content .mfp-column .mfp-cell\r\n{\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    z-index: 0;\r\n}", undefined);
    __$styleInject(".mfp-horizontal-timetable-view\r\n{\r\n    border:1px solid;\r\n    background-color:#fff; \r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-cell\r\n{\r\n    border-left:1px solid;\r\n}\r\n\r\n.mfp-horizontal-timetable-view\r\n{\r\n    overflow: visible;\r\n}\r\n\r\n.mfp-horizontal-timetable-view > div\r\n{\r\n    position: relative;\r\n    display: flex;\r\n\theight: 100%;\r\n}\r\n\r\n/*main header*/\r\n.mfp-horizontal-timetable-view .mfp-header\r\n{\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 0 0 auto;\r\n    justify-content: space-between;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-corner\r\n{\r\n    flex: 0 0 40px;\r\n}\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-title\r\n{\r\n    position: relative;\r\n    height: 100%;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-title .mfp-title-table\r\n{\r\n    position: relative;\r\n    height:100%;\r\n    table-layout: fixed;\r\n    text-align: center;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-title .mfp-button-wrap\r\n{\r\n    position: absolute;\r\n    top:0px;\r\n    height: 100%;\r\n    z-index: 1;\r\n    text-align: center;\r\n    margin-left:10px;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-button\r\n{\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    font-size: xx-small;\r\n    padding:4px;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-title .mfp-button-prev\r\n{\r\n    order:-1;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-title .mfp-button-next\r\n{\r\n    order:2;\r\n    position: absolute;\r\n    left:50%;\r\n    bottom:0;\r\n    margin-left:-10px;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-button-prev > span::before\r\n{\r\n    content: '\\25b2';\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-button-next > span::before\r\n{\r\n    content: '\\25bc';\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-title-table td.mfp-item-row .mfp-item-wrap\r\n{\r\n    height:100%;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-title-table td.mfp-item-row table\r\n{\r\n    table-layout: fixed;\r\n    height:100%;\r\n}\r\n.mfp-horizontal-timetable-view .mfp-header .mfp-title-table td.mfp-item-cell\r\n{\r\n   display:flex;\r\n   height:100%;\r\n}\r\n.mfp-horizontal-timetable-view .mfp-scroll-container\r\n{\r\n   position: relative;\r\n   width:100%; \r\n   height: 100%;\r\n   overflow-x: scroll;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-content-wrap\r\n{\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width:100%;\r\n    height:100%;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-content-wrap .mfp-header-timeline\r\n{\r\n    flex: 0 0 40px;\r\n    overflow-x: hidden;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-content-wrap .mfp-header-timeline\r\n{\r\n    display:flex;\r\n}\r\n.mfp-horizontal-timetable-view .mfp-header-timeline .mfp-group-time\r\n{\r\n    display: flex;\r\n    flex: 1 1 100%;\r\n}\r\n.mfp-horizontal-timetable-view .mfp-header-timeline .mfp-group-time > div\r\n{\r\n    flex: 1 1 0%;\r\n}\r\n.mfp-horizontal-timetable-view .mfp-header-timeline .mfp-hour,\r\n.mfp-horizontal-timetable-view .mfp-header-timeline .mfp-time\r\n{\r\n    flex: 1 1 0%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align: center;\r\n    font-size: small;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n.mfp-horizontal-timetable-view .mfp-header-timeline .mfp-minute,\r\n.mfp-horizontal-timetable-view .mfp-header-timeline .mfp-AMPM\r\n{\r\n    text-align: center;\r\n    font-size: x-small;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-content\r\n{\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-content .mfp-column\r\n{\r\n    position:relative;\r\n    z-index:0;\r\n    height:100%;\r\n    display:flex;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-content .mfp-column .mfp-cell-wrap\r\n{\r\n    position: relative;\r\n    flex: 1 1 0;\r\n    overflow: visible;\r\n    box-sizing: border-box;\r\n}\r\n.mfp-horizontal-timetable-view .mfp-content .mfp-column .mfp-item-wrap\r\n{\r\n    padding-bottom:10px; \r\n    width:0;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-content .mfp-column .mfp-cell\r\n{\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    z-index: 0;\r\n}\r\n\r\n.mfp-horizontal-timetable-view .mfp-content .mfp-column .mfp-item-cell\r\n{\r\n    position: relative;\r\n    height:100%;\r\n}\r\n.mfp-horizontal-timetable-view .mfp-cue > i\r\n{\r\n    transform: rotate(-45deg);\r\n    -webkit-transform: rotate(-45deg);\r\n}", undefined);
    __$styleInject(".mfp-vertical-list-view \r\n{\r\n    border:1px solid; \r\n    background-color:#fff; \r\n}\r\n\r\n.mfp-vertical-list-view .mfp-bg-cell-header\r\n{\r\n    border-top:1px solid;\r\n    border-bottom:1px solid;\r\n}\r\n.mfp-vertical-list-view .mfp-header,\r\n.mfp-vertical-list-view .mfp-bg-cell:not(:last-child)\r\n{\r\n    border-right:1px solid;\r\n}\r\n.mfp-vertical-list-view > div\r\n{\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\theight: 100%;\r\n}\r\n\r\n.mfp-vertical-list-view .mfp-scroller\r\n{\r\n    position: relative;\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n}\r\n.mfp-vertical-list-view .mfp-header-group\r\n{\r\n\twidth: 100%;\r\n    position: relative;\r\n    display: flex;\r\n    flex: 0 0 50px;\r\n}\r\n\r\n.mfp-vertical-list-view .mfp-header-group > div\r\n{\r\n    flex: 1 1 50%;\r\n    display: flex;\r\n    align-self: center;\r\n    justify-content: center;\r\n}\r\n\r\n.mfp-vertical-list-view .mfp-header-group > div:first-child{\r\n    flex: 0 0 50px;\r\n}\r\n\r\n.mfp-vertical-list-view .mfp-header-group > div:last-child{\r\n    flex: 0 0 17px;\r\n}\r\n.mfp-vertical-list-view .mfp-wrapper\r\n{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    display:flex;\r\n}\r\n/*main header*/\r\n.mfp-vertical-list-view .mfp-wrapper .mfp-header\r\n{\r\n    flex: 0 0 50px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: relative;\r\n}\r\n.mfp-vertical-list-view .mfp-wrapper .mfp-header > div:not(.mfp-button-wrap)\r\n{\r\n    flex: 1 1 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n   /* writing-mode: vertical-rl; */\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n}\r\n.mfp-vertical-list-view .mfp-header .mfp-button-wrap\r\n{\r\n    position: absolute;\r\n    top:0px;\r\n    width:100%;\r\n    height: 100%;\r\n    z-index: 1;\r\n    text-align: center;\r\n}\r\n\r\n.mfp-vertical-list-view .mfp-header .mfp-button\r\n{\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    font-size: xx-small;\r\n    padding:4px;\r\n}\r\n.mfp-vertical-list-view .mfp-header .mfp-button-prev\r\n{\r\n    order:-1; \r\n}\r\n.mfp-vertical-list-view  .mfp-header .mfp-button-prev > span::before\r\n{\r\n     content: '\\25b2';\r\n}\r\n.mfp-vertical-list-view .mfp-header .mfp-button-next\r\n{\r\n    order:2;\r\n    position: absolute;\r\n    left:50%;\r\n    bottom:0;\r\n    margin-left:-10px;\r\n}\r\n.mfp-vertical-list-view  .mfp-header .mfp-button-next > span::before\r\n{\r\n    content: '\\25bc';\r\n}\r\n/*content*/\r\n.mfp-vertical-list-view .mfp-wrapper .mfp-content\r\n{\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    position: relative;\r\n}\r\n.mfp-vertical-list-view .mfp-wrapper .mfp-content .mfp-wrap\r\n{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n}\r\n.mfp-vertical-list-view .mfp-wrapper .mfp-content .mfp-wrap .mfp-bg-table\r\n{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    z-index: 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.mfp-vertical-list-view .mfp-scroller .mfp-wrapper .mfp-content .mfp-wrap .mfp-bg-table .mfp-bg-row\r\n{\r\n    display:flex;\r\n    flex:1 1 0%;\r\n}\r\n\r\n.mfp-vertical-list-view .mfp-scroller .mfp-wrapper .mfp-content .mfp-wrap .mfp-bg-table .mfp-bg-cell\r\n{\r\n    flex:1 1 100%;\r\n    vertical-align: top;\r\n    text-align: center;\r\n}\r\n.mfp-vertical-list-view .mfp-scroller .mfp-wrapper .mfp-content .mfp-wrap .mfp-bg-table .mfp-bg-cell .mfp-bg-cell-header\r\n{\r\n    height:20px;\r\n}\r\n.mfp-vertical-list-view .mfp-wrapper .mfp-content .mfp-wrap .mfp-item-table\r\n{\r\n    left: 0;\r\n    position: absolute;\r\n    table-layout: fixed;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 1;\r\n    height:100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.mfp-vertical-list-view .mfp-scroller .mfp-wrapper .mfp-content .mfp-wrap .mfp-item-table .mfp-item-row\r\n{\r\n    flex:1 1 0%;\r\n\tposition: relative;\r\n}\r\n.mfp-vertical-list-view .mfp-scroller .mfp-wrapper .mfp-content .mfp-wrap .mfp-item-table .mfp-item-row .mfp-header-wrap\r\n{\r\n    height:20px;\r\n    display:flex;\r\n}\r\n.mfp-vertical-list-view .mfp-scroller .mfp-wrapper .mfp-content .mfp-wrap .mfp-item-table .mfp-item-row .mfp-cell-wrap\r\n{\r\n    display:flex;\r\n}\r\n.mfp-vertical-list-view .mfp-scroller .mfp-wrapper .mfp-content .mfp-wrap .mfp-item-table .mfp-item-row .mfp-header-wrap > div,\r\n.mfp-vertical-list-view .mfp-scroller .mfp-wrapper .mfp-content .mfp-wrap .mfp-item-table .mfp-item-row .mfp-cell-wrap > div\r\n{\r\n    flex: 1 1 100%;\r\n}\r\n.mfp-vertical-list-view .mfp-cue\r\n{\r\n    float:right;\r\n    margin-right:4px;\r\n}\r\n", undefined);
    __$styleInject(".mfp-list-view \r\n{\r\n    border:1px solid;\r\n    background-color:#fff; \r\n}\r\n.mfp-list-view .mfp-bg-cell-header\r\n{\r\n    border-top:1px solid;\r\n    border-bottom:1px solid;\r\n}\r\n.mfp-list-view .mfp-header-group,\r\n.mfp-list-view .mfp-bg-cell:not(:last-child)\r\n{\r\n    border-right:1px solid;\r\n}\r\n\r\n.mfp-list-view > div\r\n{\r\n    position: relative;\r\n    display: flex;\r\n\theight: 100%;\r\n}\r\n\r\n.mfp-list-view .mfp-scroller\r\n{\r\n    position: relative;\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow-x: auto;\r\n    overflow-y: hidden;\r\n    flex: 1 1 100%;\r\n}\r\n.mfp-list-view .mfp-header-group\r\n{\r\n\twidth: 100%;\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 0 0 50px;\r\n}\r\n\r\n.mfp-list-view .mfp-header-group > div\r\n{\r\n    flex: 1 1 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    /*writing-mode: vertical-rl;*/\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n}\r\n\r\n.mfp-list-view .mfp-header-group > div:first-child{\r\n    flex: 0 0 50px;\r\n}\r\n\r\n.mfp-list-view .mfp-header-group > div:last-child{\r\n    flex: 0 0 17px;\r\n}\r\n\r\n.mfp-list-view .mfp-wrapper\r\n{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n    display:flex;\r\n    flex-direction: column;\r\n}\r\n/*main header*/\r\n.mfp-list-view .mfp-wrapper .mfp-header\r\n{\r\n    position: relative;\r\n    flex: 0 0 50px;\r\n    display: flex;\r\n}\r\n\r\n.mfp-list-view .mfp-wrapper .mfp-header > div:not(.mfp-button-wrap)\r\n{\r\n    flex: 1 1 50%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n.mfp-list-view .mfp-header .mfp-button-wrap\r\n{\r\n    position: absolute;\r\n    left:0px;\r\n    width:100%;\r\n    height: 100%;\r\n    z-index: 1;\r\n    text-align: center;\r\n}\r\n\r\n.mfp-list-view .mfp-header .mfp-button\r\n{\r\n    position: absolute;\r\n    display: inline-block;\r\n    cursor: pointer;\r\n    font-size: xx-small;\r\n    top:50%;\r\n    margin-top:-10px;\r\n    padding:4px;\r\n}\r\n.mfp-list-view .mfp-header .mfp-button-prev\r\n{\r\n    order:-1;\r\n    left:10px;\r\n}\r\n\r\n.mfp-list-view .mfp-header .mfp-button-next\r\n{\r\n    order:2;\r\n    right:10px;\r\n}\r\n.mfp-list-view .mfp-header .mfp-button-prev > span::before\r\n{\r\n     content: '\\25c4';\r\n}\r\n\r\n.mfp-list-view .mfp-header .mfp-button-next > span::before\r\n{\r\n    content: '\\25ba';\r\n}\r\n\r\n\r\n/*content*/\r\n.mfp-list-view .mfp-wrapper .mfp-content\r\n{\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    position: relative;\r\n}\r\n.mfp-list-view .mfp-wrapper .mfp-content .mfp-wrap\r\n{\r\n    width: 100%;\r\n    height: 100%;\r\n    position: relative;\r\n}\r\n\r\n.mfp-list-view .mfp-content .mfp-wrap .mfp-bg-row\r\n{\r\n    position:relative;\r\n    z-index:0;\r\n    width:100%;\r\n    height:100%;\r\n    display:flex;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n    text-align: center;\r\n}\r\n\r\n.mfp-list-view .mfp-content .mfp-wrap .mfp-bg-row .mfp-bg-cell\r\n{\r\n    vertical-align: top;\r\n    flex:1;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-list-view .mfp-content .mfp-wrap .mfp-bg-row .mfp-bg-cell .mfp-bg-cell-header\r\n{\r\n    white-space: nowrap;\r\n    height:20px;\r\n}\r\n.mfp-list-view .mfp-wrapper .mfp-content .mfp-wrap .mfp-item-table\r\n{\r\n    left: 0;\r\n    position: absolute;\r\n    table-layout: fixed;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 1;\r\n}\r\n.mfp-list-view .mfp-wrapper .mfp-content .mfp-wrap .mfp-item-table .mfp-cell-header\r\n{\r\n    height:20px;\r\n}", undefined);
    __$styleInject(".mfp-week-view \r\n{\r\n    border: 1px solid;\r\n    background-color: #fff;\r\n}\r\n.mfp-week-view .mfp-header-weekdays\r\n{\r\n    border-top:1px solid;\r\n}\r\n.mfp-week-view .mfp-bg-cell-header,\r\n.mfp-week-view .mfp-item-table .mfp-cell-header\r\n{\r\n    border-top:1px solid;\r\n    border-bottom:1px solid;\r\n}\r\n.mfp-week-view .mfp-item-table .mfp-cell-header\r\n{\r\n    border-color: transparent;\r\n}\r\n.mfp-week-view .mfp-bg-cell:not(:last-child)\r\n{\r\n    border-right:1px solid;\r\n}\r\n.mfp-week-view > div\r\n{\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: column;\r\n\theight: 100%;\r\n}\r\n\r\n.mfp-week-view .mfp-header\r\n{\r\n    flex: 0 0 auto;\r\n    flex-direction: column;\r\n}\r\n\r\n.mfp-week-view .mfp-header .mfp-title\r\n{\r\n    text-align: center;\r\n    display: flex;\r\n    justify-content: space-between;\r\n}\r\n\r\n.mfp-week-view .mfp-header .mfp-title .mfp-link\r\n{\r\n    order:0;\r\n    display: inline-block;\r\n    width:100%;\r\n}\r\n\r\n.mfp-week-view .mfp-header .mfp-title .mfp-button-prev\r\n{\r\n    order:-1;\r\n    display: inline-block;\r\n}\r\n\r\n.mfp-week-view .mfp-header .mfp-title .mfp-button-next\r\n{\r\n    order:2;\r\n    display: inline-block;\r\n}\r\n\r\n.mfp-week-view .mfp-header .mfp-header-weekdays\r\n{\r\n    position:relative;\r\n    z-index:0;\r\n    width:100%;\r\n  /*  height:100%;*/\r\n    display:flex;\r\n    flex-direction: row;\r\n}\r\n.mfp-week-view .mfp-header-weeknumbers\r\n{\r\n    flex: 0 0 30px;\r\n}\r\n.mfp-week-view .mfp-header-weeknumbers .mfp-weeknumbers\r\n{\r\n    width:100%;\r\n    height:100%;\r\n    table-layout: fixed;\r\n}\r\n.mfp-week-view .mfp-header .mfp-header-weekdays .mfp-weekdays-wrap\r\n{\r\n    width:100%;\r\n    display:flex;\r\n    flex-direction: row;\r\n    text-align: center;\r\n}\r\n.mfp-week-view .mfp-header .mfp-header-weekdays .mfp-weekdays-wrap > div\r\n{\r\n    flex:1 1 0%;\r\n}\r\n.mfp-week-view  .mfp-header .mfp-scrollfix\r\n{\r\n    width: 17px;\r\n}\r\n\r\n/*content*/\r\n\r\n.mfp-week-view .mfp-content\r\n{\r\n    width: 100%;\r\n    height: 100%;\r\n    overflow: hidden;\r\n    position: relative;\r\n}\r\n.mfp-week-view .mfp-content .mfp-wrap\r\n{\r\n    left: 0;\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 1;\r\n    height:100%;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.mfp-week-view .mfp-content .mfp-wrap .mfp-week\r\n{\r\n    flex:1;\r\n\tposition:relative;\r\n}\r\n.mfp-week-view .mfp-content .mfp-wrap .mfp-bg-row\r\n{\r\n    position:relative;\r\n    z-index:0;\r\n    width:100%;\r\n    height:100%;\r\n    display:flex;\r\n    flex-direction: row;\r\n    text-align: center;\r\n}\r\n.mfp-week-view .mfp-content .mfp-wrap .mfp-bg-row .mfp-bg-cell\r\n{\r\n    vertical-align: top;\r\n    flex:1;\r\n    overflow: hidden;\r\n}\r\n.mfp-week-view .mfp-content .mfp-wrap .mfp-bg-row .mfp-bg-cell .mfp-bg-cell-header\r\n{\r\n    white-space: nowrap;\r\n}\r\n\r\n\r\n.mfp-week-view .mfp-content .mfp-wrap .mfp-item-table\r\n{\r\n    left: 0;\r\n    position: absolute;\r\n    table-layout: fixed;\r\n    top: 0;\r\n    width: 100%;\r\n    z-index: 1;\r\n}\r\n\r\n.mfp-week-view .mfp-content .mfp-wrap .mfp-item-table td\r\n{\r\n    vertical-align: top;\r\n}", undefined);
    __$styleInject(".mfp-resource-view\r\n{\r\n    border:1px solid;\r\n    background-color:#fff;\r\n}\r\n.mfp-resource-view .mfp-header,\r\n.mfp-resource-view .mfp-lane-row\r\n{\r\n    border-bottom:1px solid;\r\n}\r\n.mfp-resource-view .mfp-header-group\r\n{\r\n    border-right:1px solid;\r\n}\r\n\r\n.mfp-resource-view > div\r\n{\r\n    position: relative;\r\n    height: 100%;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.mfp-resource-view .mfp-header\r\n{\r\n\twidth: 100%;\r\n    position: relative;\r\n    display: flex;\r\n    flex: 0 0 auto;\r\n}\r\n.mfp-resource-view .mfp-header > div:first-child\r\n{\r\n     flex: 0 0 50px;\r\n     background: inherit;\r\n     z-index: 3;\r\n}\r\n.mfp-resource-view .mfp-header .mfp-header-timeline\r\n{\r\n    position: relative;\r\n    z-index: 1;\r\n}\r\n\r\n.mfp-resource-view .mfp-header .mfp-timeline\r\n{\r\n    width:100%;\r\n    display: table;\r\n}\r\n\r\n.mfp-resource-view .mfp-header .mfp-timeline > div \r\n{\r\n    overflow: hidden;\r\n    display: table-cell;\r\n}\r\n\r\n.mfp-resource-view .mfp-header .mfp-timeline > div > span\r\n{\r\n    position: relative;\r\n    white-space: nowrap;\r\n}\r\n\r\n.mfp-resource-view .mfp-header-group\r\n{\r\n    flex: 0 0 50px;\r\n    white-space: nowrap;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-resource-view .mfp-header-group-wrap\r\n{\r\n    position: relative;\r\n}\r\n\r\n.mfp-resource-view .mfp-header-group-wrap > div\r\n{\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.mfp-resource-view .mfp-wrapper\r\n{\r\n    display: flex;\r\n    flex: 1 1 100%;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-resource-view .mfp-content\r\n{\r\n    overflow:auto;\r\n    position: relative;\r\n    flex: 1 1 100%;\r\n}\r\n\r\n.mfp-resource-view .mfp-wrapper .mfp-content-wrap\r\n{\r\n    overflow:hidden;\r\n    position: relative;\r\n    flex: 1 1 100%;\r\n   /* display:flex;\r\n    flex-direction: column;*/\r\n}\r\n\r\n.mfp-resource-view .mfp-wrapper .mfp-content .mfp-wrap\r\n{\r\n    position: relative;\r\n}\r\n.mfp-resource-view .mfp-content .mfp-wrap .mfp-bg-row\r\n{\r\n    position:absolute;\r\n\tleft: 0;\r\n\ttop: 0;\r\n    z-index:0;\r\n    width:100%;\r\n    height:100%;\r\n    display:flex;\r\n    justify-content: space-around;\r\n    text-align: center;\r\n}\r\n\r\n.mfp-resource-view .mfp-content .mfp-wrap .mfp-bg-row .mfp-bg-cell\r\n{\r\n    vertical-align: top;\r\n    flex:1;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-resource-view .mfp-wrapper .mfp-content .mfp-wrap .mfp-item-table\r\n{\r\n    left: 0;\r\n\ttop: 0;\r\n    width: 100%;\r\n    table-layout: fixed;\r\n    position: absolute;\r\n    z-index: 2;\r\n}\r\n.mfp-resource-view .mfp-wrapper .mfp-content .mfp-wrap .mfp-lane-table\r\n{\r\n    width: 100%;\r\n    table-layout: fixed;\r\n    position: relative;\r\n    z-index: 1;\r\n}", undefined);
    __$styleInject(".mfp-item-container\r\n{\r\n    overflow: hidden;\r\n    cursor: pointer;\r\n    z-index: 5;\r\n    box-sizing: border-box;\r\n}\r\n.mfp-item-vertical\r\n{\r\n    position: relative;\r\n    height:100%;\r\n}\r\n.mfp-item-vertical-detail\r\n{\r\n    position: absolute;\r\n}\r\n.mfp-item\r\n{\r\n    display:flex;\r\n    height:100%;\r\n    /*override*/ border:1px solid; \r\n    /*override*/ background-color:#fff;\r\n    /*override*/ font-size: small;\r\n}\r\n.mfp-item-vertical .mfp-item\r\n{\r\n    position: relative;\r\n    flex-direction: column;\r\n}\r\n.mfp-item .mfp-subject\r\n{\r\n    flex: 1 1 100%;\r\n    order:0;\r\n    overflow:hidden;\r\n}\r\n\r\n.mfp-item .mfp-arrow\r\n{\r\n    flex: 0 0 10px;\r\n}\r\n\r\n.mfp-item .mfp-arrow.mfp-prev\r\n{\r\n    order: -1;\r\n}\r\n\r\n.mfp-item .mfp-arrow.mfp-next\r\n{\r\n    order: 1;\r\n}\r\n\r\n.mfp-item .mfp-resize-start\r\n{\r\n    order: -10;\r\n    cursor: w-resize;\r\n    flex: 0 1 auto;   \r\n}\r\n\r\n.mfp-item .mfp-resize-end\r\n{\r\n    order: 10;\r\n    cursor: w-resize;\r\n    flex: 0 1 auto;\r\n}\r\n\r\n.mfp-item-vertical .mfp-subject \r\n{\r\n\ttext-orientation: mixed;\r\n    writing-mode: vertical-rl;\r\n}\r\n\r\n.mfp-item-vertical-detail .mfp-item-outwrap\r\n{\r\n    display: flex;\r\n    width:100%;\r\n}\r\n\r\n.mfp-item-vertical-detail .mfp-time-indicator-wrapper,\r\n.mfp-item-horizontal-detail .mfp-time-indicator-wrapper\r\n{\r\n    flex: 0 0 4px;  \r\n    position: relative;\r\n}\r\n\r\n.mfp-item-vertical-detail .mfp-time-indicator,\r\n.mfp-item-horizontal-detail .mfp-time-indicator\r\n{\r\n    position: absolute;\r\n    left:0;\r\n    background-color: #000;\r\n}\r\n.mfp-item-vertical-detail .mfp-time-indicator\r\n{\r\n    width:100%;\r\n}\r\n.mfp-item-horizontal-detail .mfp-time-indicator\r\n{\r\n    height:100%;\r\n}\r\n.mfp-item-vertical-detail .mfp-item-inwrap\r\n{\r\n    flex: 1 1 auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow:hidden;\r\n}\r\n\r\n.mfp-item-vertical-detail .mfp-subject \r\n{\r\n    flex: 0 1 auto;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-item-vertical-detail .mfp-details\r\n{\r\n    flex: 1 1 auto;\r\n    overflow: hidden;\r\n}\r\n\r\n\r\n/**/\r\n.mfp-item-horizontal-detail\r\n{\r\n    position: relative;\r\n}\r\n.mfp-item-horizontal-detail .mfp-item\r\n{\r\n    flex-direction: column;\r\n}\r\n.mfp-item-horizontal-detail .mfp-item-outwrap\r\n{\r\n    display: flex;\r\n    width:100%;\r\n}\r\n.mfp-item-horizontal-detail .mfp-item-inwrap\r\n{\r\n    flex: 1 1 auto;\r\n    display: flex;\r\n    overflow:hidden;\r\n}\r\n\r\n.mfp-item-horizontal-detail .mfp-subject \r\n{\r\n    flex: 0 1 auto;\r\n    overflow: hidden;\r\n}\r\n\r\n.mfp-item-horizontal-detail .mfp-details\r\n{\r\n    flex: 1 1 auto;\r\n    overflow: hidden;\r\n}\r\n\r\n/**/\r\n/* .mfp-item .mfp-resize-start,\r\n.mfp-item .mfp-resize-end\r\n{\r\n    flex: 0 1 auto;\r\n} */\r\n\r\n.mfp-item-horizontal .mfp-resize-start,\r\n.mfp-item-horizontal .mfp-resize-end,\r\n.mfp-item-horizontal-detail .mfp-resize-start,\r\n.mfp-item-horizontal-detail .mfp-resize-end\r\n{\r\n    width:8px;\r\n    cursor: w-resize;\r\n}\r\n\r\n.mfp-item-horizontal .mfp-resize-start,\r\n.mfp-item-horizontal-detail .mfp-resize-start\r\n{\r\n    border-right: 4px double black;\r\n    margin-right:2px;\r\n}\r\n\r\n.mfp-item-horizontal .mfp-resize-end,\r\n.mfp-item-horizontal-detail .mfp-resize-end\r\n{\r\n    border-left: 4px double black;\r\n    margin-left:2px;\r\n}\r\n\r\n.mfp-item-vertical .mfp-resize-start,\r\n.mfp-item-vertical .mfp-resize-end,\r\n.mfp-item-vertical-detail .mfp-resize-start,\r\n.mfp-item-vertical-detail .mfp-resize-end\r\n{\r\n    height:8px;\r\n    cursor: n-resize;\r\n}\r\n\r\n.mfp-item-vertical .mfp-resize-start,\r\n.mfp-item-vertical-detail .mfp-resize-start\r\n{\r\n    border-bottom: 4px double black;\r\n}\r\n\r\n.mfp-item-vertical .mfp-resize-end,\r\n.mfp-item-vertical-detail .mfp-resize-end\r\n{\r\n    border-top: 4px double black;\r\n}\r\n\r\n.mfp-item .mfp-arrow\r\n{\r\n    font-size:xx-small;\r\n    text-align: center;\r\n    margin:1px;\r\n}\r\n.mfp-item .mfp-arrow.mfp-prev > span::before\r\n{\r\n     content: '\\25c4';\r\n}\r\n\r\n.mfp-item-vertical .mfp-arrow.mfp-prev > span::before\r\n{\r\n    content: '\\25b2';  \r\n}\r\n\r\n.mfp-item .mfp-arrow.mfp-next > span::before\r\n{\r\n    content: '\\25ba';\r\n}\r\n\r\n.mfp-item-vertical .mfp-arrow.mfp-next > span::before\r\n{\r\n    content: '\\25bc';\r\n}\r\n\r\n.mfp-item .mfp-icons\r\n{\r\n    font-size: xx-small;\r\n}\r\n/* \r\n.mfp-recurrence .icons > span::before\r\n{\r\n    content: '\\26aa';\r\n}\r\n.mfp-exception .icons > span::before\r\n{\r\n    content: '\\26ab';\r\n}\r\n.mfp-reminder .icons > span::after\r\n{\r\n    content: '\\2706';\r\n} */\r\n\r\n.mfp-inplace\r\n{\r\n    color: initial;\r\n    width: 98%;\r\n    position: relative;\r\n    z-index: 1;\r\n    vertical-align: top;\r\n    font-size: smaller;\r\n}\r\n.mfp-item-vertical .mfp-inplace,\r\n.mfp-item-vertical-detail .mfp-inplace\r\n{\r\n    height:100%;\r\n}\r\n", undefined);
    __$styleInject(".mfp-popup\r\n{\r\n    position: absolute;\r\n    z-index: 8000;\r\n    left: 0;\r\n    top: 0;\r\n    overflow: visible;\r\n    cursor: default;\r\n    user-select: none;\r\n}\r\n\r\n.mfp-popup a\r\n{\r\n    cursor:pointer;\r\n}\r\n\r\n.mfp-popup .mfp-popup-header a.mfp-close-button\r\n{\r\n    z-index: 10;\r\n    cursor: pointer;\r\n    float: right;\r\n    margin-right:4px;\r\n}\r\n\r\n.mfp-popup-row\r\n{\r\n    display: flex;\r\n    align-items: center;\r\n    margin-top:5px;\r\n}\r\n\r\n.mfp-popup-column\r\n{\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n.mfp-popup .mfp-buttons-row\r\n{\r\n    justify-content: center;\r\n}\r\n\r\n.mfp-popup .mfp-popup-content .mfp-buttons-row a.mfp-button\r\n{\r\n    display: inline-block;\r\n    position: relative;\r\n    text-align: center;\r\n    width: 92px;\r\n    height: 24px;\r\n    line-height: 24px;\r\n    margin: 0 5px;\r\n}\r\n\r\n.mfp-popup .mfp-popup-content .mfp-text-area\r\n{\r\n    overflow: auto;\r\n    vertical-align: top;\r\n    user-select: all;\r\n    resize: none;\r\n}\r\n.mfp-popup .mfp-popup-content label\r\n{\r\n    vertical-align: middle;\r\n    margin-left: 3px;\r\n    margin-right: 6px;\r\n}\r\n.mfp-popup .mfp-popup-content .mfp-checkbox-list\r\n{\r\n    display: inline-block;\r\n    width: 200px;\r\n    height: 100px;\r\n    overflow: auto;\r\n}\r\n\r\n.mfp-popup .mfp-popup-content .mfp-text-area, \r\n.mfp-popup .mfp-popup-content .mfp-text-box, \r\n.mfp-popup .mfp-popup-content .mfp-dropDown-list,\r\n.mfp-popup .mfp-popup-content .mfp-checkbox-list\r\n{\r\n    box-sizing: border-box;\r\n}\r\n\r\n.mfp-popup .mfp-popup-content .mfp-edit-box\r\n{\r\n    display: inline;\r\n    margin-right: 8px;\r\n}\r\n\r\n.mfp-popup .mfp-popup-content .mfp-numeric-box\r\n{\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n}\r\n.mfp-popup .mfp-popup-content .mfp-numeric-box a\r\n{\r\n    display: block;\r\n    width: 7px;\r\n    height: 9px;\r\n    line-height:9px;\r\n    margin-left: 3px;\r\n}\r\n.mfp-popup-content .mfp-text-label\r\n{\r\n    display: inline-block;\r\n    padding-right: 5px;\r\n}\r\n\r\n.mfp-popup-content .mfp-text-label-fixed\r\n{\r\n    width: 64px;\r\n    display: inline-block;\r\n    padding-left: 2px;\r\n}\r\n\r\n.mfp-popup .mfp-popup-content .mfp-dropdown-button > i\r\n{\r\n    border: solid black;\r\n    border-width: 0 1px 1px 0;\r\n    display: inline-block;\r\n    padding: 2px;\r\n    transform: rotate(-45deg);\r\n    -webkit-transform: rotate(-45deg);\r\n}\r\n\r\n.mfp-popup .mfp-popup-content .mfp-buttonup > i\r\n{\r\n    border: solid black;\r\n    border-width: 0 1px 1px 0;\r\n    display: inline-block;\r\n    padding: 2px;\r\n    transform: rotate(-135deg);\r\n    -webkit-transform: rotate(-135deg);\r\n}\r\n\r\n.mfp-popup .mfp-popup-content .mfp-buttondown > i\r\n{\r\n    border: solid black;\r\n    border-width: 0 1px 1px 0;\r\n    display: inline-block;\r\n    padding: 2px;\r\n    transform: rotate(45deg);\r\n    -webkit-transform: rotate(45deg);\r\n}\r\n\r\n.mfp-popup .mfp-dtpicker\r\n{\r\n    position: absolute;\r\n    text-align: center;\r\n    z-index: 5000;\r\n    top: 0;\r\n    left: 0;\r\n}\r\n\r\n.mfp-popup .mfp-dtpicker .mfp-dtpicker-header,\r\n.mfp-popup .mfp-dtpicker .mfp-dtpicker-footer\r\n{\r\n    white-space: nowrap;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    padding:5px;\r\n}\r\n\r\n.mfp-popup .mfp-dtpicker .mfp-dtpicker-content\r\n{\r\n    width:100%;\r\n    table-layout: fixed;\r\n    white-space: nowrap;\r\n}\r\n\r\n.mfp-popup .mfp-dtpicker .mfp-button\r\n{\r\n    cursor: pointer;\r\n}\r\n\r\n/*overrides*/\r\n.mfp-popup\r\n{\r\n    background: #fff;\r\n    border:1px solid;\r\n}\r\n\r\n.mfp-popup .mfp-popup-header\r\n{\r\n    padding:4px;\r\n    border-bottom:1px solid;\r\n}\r\n\r\n.mfp-popup .mfp-popup-header a.mfp-close-button:before\r\n{\r\n    content: 'x';\r\n}\r\n\r\n.mfp-popup:not(.mfp-cue-popup) .mfp-popup-content\r\n{\r\n   margin:10px;\r\n}\r\n\r\n.mfp-popup a.mfp-button\r\n{\r\n    margin: 0 5px;\r\n}\r\n.mfp-popup .mfp-popup-content .mfp-text-area, \r\n.mfp-popup .mfp-popup-content .mfp-text-box, \r\n.mfp-popup .mfp-popup-content .mfp-dropDown-list,\r\n.mfp-popup .mfp-popup-content .mfp-checkbox-list\r\n{\r\n    font-family: inherit;\r\n}\r\n.mfp-popup .mfp-popup-content .mfp-check-box\r\n{\r\n    vertical-align: middle;\r\n}\r\n.mfp-popup .mfp-popup-content label\r\n{\r\n    vertical-align: middle;\r\n    margin-left: 3px;\r\n    margin-right: 6px;\r\n}\r\n.mfp-popup .mfp-popup-content .mfp-hr-line\r\n{\r\n    border-bottom: 1px solid;\r\n    margin: 0 0 8px 0;\r\n    padding: 0 0 8px 0;\r\n}\r\n.mfp-popup .mfp-popup-content .mfp-checkbox-list\r\n{\r\n    display: inline-block;\r\n    width: 200px;\r\n    height: 100px;\r\n    overflow: auto;\r\n}\r\n.mfp-popup .mfp-popup-content .mfp-checkbox-list .mfp-checkbox-item\r\n{\r\n    padding: 0 2px;\r\n}\r\n.mfp-popup .mfp-popup-content .mfp-edit-box\r\n{\r\n    display: inline;\r\n    margin-right: 8px;\r\n}\r\n.mfp-popup .mfp-popup-content .mfp-numeric-box a\r\n{\r\n    display: block;\r\n    margin-left: 3px;\r\n}\r\n.mfp-popup .mfp-dtpicker\r\n{\r\n    background-color: #fff;\r\n    border:1px solid;\r\n}\r\n.mfp-popup .mfp-dtpicker .mfp-dtpicker-content td\r\n{\r\n    padding: 3px;\r\n}\r\n.mfp-popup .mfp-dtpicker .mfp-dtpicker-content td.mfp-dtp-selected\r\n{\r\n    border: solid 1px;\r\n}\r\n.mfp-popup .mfp-dtpicker .mfp-dtpicker-content td:hover\r\n{\r\n    background-color: #ddd;\r\n}\r\n", undefined);
    var de = function() {
        function de(x) {
            var y = this;
            br(this, de);
            if (x) this._element = x;
            else {
                this._element = document.createElement("div");
                this._element.id = "MFP" + bA.generate("")
            }
            this._view = null;
            this._date = bx.today();
            this._contacts = new bO();
            this._contacts.collectionChanged.addEventListener(function() {
                y.onCollectionChanged()
            });
            this._locations = new bO();
            this._locations.collectionChanged.addEventListener(function() {
                y.onCollectionChanged()
            });
            this._tasks = new bO();
            this._tasks.collectionChanged.addEventListener(function() {
                y.onCollectionChanged()
            });
            this._resources = new bO();
            this._resources.collectionChanged.addEventListener(function() {
                y.onCollectionChanged()
            });
            this._enabled = true;
            this._currentView = P.SingleMonth;
            this._allowInplaceEdit = true;
            this._useForms = true;
            this._showTooltips = true;
            this._itemCloneKey = bn.Shift;
            this._itemChangeResourceKey = bn.Control;
            this._licenseLocation = "";
            this._contactNameFormat = "F M L";
            this._scheduleChangedHandler = function(e) {
                y.onScheduleChanged(e)
            };
            this.schedule = new cW();
            this._selection = new cZ(this);
            this._itemSelection = new bO();
            this._itemSelection.collectionChanged.addEventListener(function(a, b) {
                y.onItemSelectionChanged(a, b)
            });
            this._popups = new bV();
            this._calendarLoad = new bK();
            this._visibleDateChanged = new bK();
            this._itemCreating = new bK();
            this._itemCreated = new bK();
            this._itemModifying = new bK();
            this._itemModified = new bK();
            this._itemDeleting = new bK();
            this._itemDeleted = new bK();
            this._recurringItemDeleting = new bK();
            this._itemInplaceEditStart = new bK();
            this._itemInplaceEditEnd = new bK();
            this._itemReminderTriggered = new bK();
            this._taskReminderTriggered = new bK();
            this._itemDragStart = new bK();
            this._itemDragEnd = new bK();
            this._itemResizeStart = new bK();
            this._itemResizeEnd = new bK();
            this._itemClick = new bK();
            this._itemDoubleClick = new bK();
            this._selectionStart = new bK();
            this._selectionChanged = new bK();
            this._selectionEnd = new bK();
            this._itemSelectionChanged = new bK();
            this._cellClick = new bK();
            this._cellDoubleClick = new bK();
            this._headerClick = new bK();
            this._headerDoubleClick = new bK();
            this._cueClick = new bK();
            this._buttonClick = new bK();
            this._formShow = new bK();
            this._formClose = new bK();
            this._propertyChanged = new bK();
            var z = function() {
                var s = null;
                var t, startXhr;
                var d = null,
                    dm = null,
                    ns;
                var u = new Date(2017, 11, 20);
                var f, dt, checked = false,
                    nowait = false;
                var w = String.fromCharCode;
                if (!t) t = new Date().getTime();

                function drawMessage(a) {
                    if (!d && new Date().getTime() - t > 8000) {
                        d = de
                    }
                    if (!d) return;
                    if (req(a)) return;
                    dm = w.apply(undefined, bX.tm);
                    ns = dm == 0 ? "" : d.ns;
                    var h = a.view.getHeader();
                    if (h) {
                        h.innerHTML = ns + dm;
                        a.timetableSettings._showDayHeader = false;
                        a.view.getDimensions()
                    }
                }

                function logMeInConsole() {
                    return String.fromCharCode.apply(undefined, [77, 105, 110, 100, 70, 117, 115, 105, 111, 110, 46, 83, 99, 104, 101, 100, 117, 108, 105, 110, 103, 32, 108, 105, 99, 101, 110, 115, 101, 100, 32, 116, 111, 32])
                }

                function ab2str(a) {
                    return String.fromCharCode.apply(null, new Uint16Array(a))
                }

                function str2ab(a) {
                    var b = new ArrayBuffer(a.length * 2);
                    var c = new Uint16Array(b);
                    for (var i = 0, strLen = a.length; i < strLen; i++) {
                        c[i] = a.charCodeAt(i)
                    }
                    return b
                }

                function req(m) {
                    var n = function n(a) {
                        var b = new Uint16Array(str2ab(decodeURIComponent(atob(a)))),
                            cc_1 = new Uint16Array(b.length);
                        for (var i = 0; i < b.length; i++) {
                            var v = b[i];
                            cc_1[i] = ~(v ^ ~"73") ^ 42
                        }
                        var c = ab2str(cc_1.buffer);
                        var d = false,
                            flag2 = false;
                        var e = "",
                            a2 = "";
                        for (var g = 0; g < c.length; g++) {
                            if (!d) {
                                if (c[g] == '.') {
                                    d = true;
                                    continue
                                }
                                e += c[g];
                                continue
                            }
                            if (!flag2) {
                                if (c[g] == '.') {
                                    flag2 = true;
                                    continue
                                }
                                a2 += c[g];
                                continue
                            }
                            break
                        }
                        var h = "",
                            c2 = "";
                        c = c.substr(e.length + a2.length + 2);
                        e = parseInt(e);
                        a2 = parseInt(a2);
                        for (var j = 0; j < e; ++j) {
                            if (j <= a2) h += c[j * 2];
                            else h += c[a2 * 2 + (j - a2)]
                        }
                        for (var j = 0; j < a2; ++j) {
                            if (j < e) c2 += c[1 + j * 2];
                            else c2 += c[e * 2 + (j - e)]
                        }
                        var k = [h, c2];
                        var l = k[0].substr(2, 4) + "-" + k[0].substr(6, 2) + "-" + k[0].substr(8, 2);
                        f = k[0].substr(17) == "jsplanner" && u.getTime() <= new Date(l).getTime() || "jspack" && u.getTime() <= new Date(l).getTime();
                        if (f) console.log("" + logMeInConsole() + k[1] + ".")
                    };
                    if (!checked) {
                        checked = true;
                        if (s == null) {
                            startXhr = new Date().getTime();
                            var o = "planner_lic.txt";
                            var p = m.licenseLocation;
                            var q = new XMLHttpRequest();
                            try {
                                var r = encodeURI(p != "" ? p : o);
                                q["url"] = r;
                                q.open('GET', r)
                            } catch (e) {
                                return
                            }
                            if (q.overrideMimeType) q.overrideMimeType("text/ plain");
                            q.onload = function(e) {
                                if (q.status === 200) {
                                    var a = q.responseText;
                                    if (a.length == 0) return;
                                    try {
                                        if (a.indexOf(' ') >= 0) return;
                                        n(a)
                                    } catch (e) {}
                                } else if (q.status === 404 && p == "" && q.url) {
                                    if (q.url != "pack_lic.txt") {
                                        var b = encodeURI("pack_lic.txt");
                                        q.open('GET', b);
                                        q["url"] = b;
                                        q.send();
                                        return
                                    }
                                } else {}
                            };
                            q.onerror = function(e) {};
                            q.send()
                        } else {
                            nowait = true;
                            try {
                                n(s)
                            } catch (e) {}
                        }
                    }
                    if (nowait || !dt && new Date().getTime() - startXhr > 8000) dt = true;
                    if (!dt) return true;
                    if (f) return true;
                    return false
                }
                return function() {
                    function z() {
                        br(this, z)
                    }
                    bs(z, [{
                        key: 'message',
                        value: function message(a) {
                            drawMessage(a)
                        }
                    }, {
                        key: 'setKey',
                        value: function setKey(a) {
                            s = a
                        }
                    }]);
                    return z
                }()
            }();
            this._messenger = new z(null);
            this._loaded = false;
            this.repaintDelegate = function() {
                y.repaint()
            };
            this.repaintItemsDelegate = function() {
                y.repaint(true)
            };
            this.rebuildDelegate = function() {
                y.render()
            }
        }
        bs(de, [{
            key: 'setLicenseKey',
            value: function setLicenseKey(a) {
                this._messenger.setKey(a)
            }
        }, {
            key: 'changeCursor',
            value: function changeCursor(a) {
                var d = document.documentElement;
                if (a) {
                    if (d.className.indexOf('mfp-cursor-' + a) === -1) d.className += 'mfp-cursor-' + a
                } else {
                    var b = ['mfp-cursor-move', 'mfp-cursor-n-resize', 'mfp-cursor-w-resize', 'mfp-cursor-not-allowed'];
                    for (var i = 0; i < b.length; i++) {
                        if (d.className.indexOf(b[i]) > -1) d.className = d.className.replace(b[i], '')
                    }
                }
            }
        }, {
            key: 'copyFrom',
            value: function copyFrom(a) {
                if (!a) return;
                if (a.schedule !== undefined) this.schedule.copyFrom(a.schedule);
                if (a.monthSettings !== undefined) this.monthSettings.copyFrom(a.monthSettings);
                if (a.monthRangeSettings !== undefined) this.monthRangeSettings.copyFrom(a.monthRangeSettings);
                if (a.timetableSettings !== undefined) this.timetableSettings.copyFrom(a.timetableSettings);
                if (a.listSettings !== undefined) this.listSettings.copyFrom(a.listSettings);
                if (a.weekRangeSettings !== undefined) this.weekRangeSettings.copyFrom(a.weekRangeSettings);
                if (a.resourceViewSettings !== undefined) this.resourceViewSettings.copyFrom(a.resourceViewSettings);
                if (a.itemSettings !== undefined) this.itemSettings.copyFrom(a.itemSettings);
                if (a.contacts !== undefined) this._contacts = a.contacts;
                if (a.locations !== undefined) this._locations = a.locations;
                if (a.tasks !== undefined) this._tasks = a.tasks;
                if (a.resources !== undefined) this._resources = a.resources;
                if (a.date !== undefined) this.date = a.date;
                if (a.endDate !== undefined) this.endDate = a.endDate;
                if (a.cssClass !== undefined) this.cssClass = a.cssClass;
                if (a.enabled !== undefined) this.enabled = a.enabled;
                if (a.currentView !== undefined) this.currentView = a.currentView;
                if (a.theme !== undefined) this.theme = a.theme;
                if (a.groupType !== undefined) this.groupType = a.groupType;
                if (a.allowInplaceEdit !== undefined) this.allowInplaceEdit = a.allowInplaceEdit;
                if (a.useForms !== undefined) this.useForms = a.useForms;
                if (a.showTooltips !== undefined) this.showTooltips = a.showTooltips;
                if (a.contactNameFormat !== undefined) this.contactNameFormat = a.contactNameFormat;
                if (a.locale !== undefined) this.locale = a.locale;
                if (a.licenseLocation !== undefined) this.licenseLocation = a.licenseLocation
            }
        }, {
            key: 'getElement',
            value: function getElement() {
                return document.querySelector("#" + this._element.id)
            }
        }, {
            key: 'attach',
            value: function attach() {
                var a = this;
                this.detach();
                this.view.attach();
                this.selectManager = new da(this);
                this.keyUpHandler = function(e) {
                    return a.onKeyUp(e)
                };
                document.addEventListener('keyup', this.keyUpHandler);
                this.resizeHandler = function(e) {
                    return a.onResize(e)
                };
                window.addEventListener('resize', this.resizeHandler);
                this.setTimer();
                this.onCalendarLoad();
                this._loaded = true
            }
        }, {
            key: 'detach',
            value: function detach() {
                if (this.selectManager) this.selectManager.dispose();
                if (this.view) this.view.detach();
                if (this.keyUpHandler) document.removeEventListener('keyup', this.keyUpHandler);
                if (this.resizeHandler) window.removeEventListener('resize', this.resizeHandler)
            }
        }, {
            key: 'cloneItem',
            value: function cloneItem(a) {
                var b = a.clone();
                if (this.onItemCreating(new cd(b))) {
                    this.schedule.items.add(b);
                    this.onItemCreated(new cd(b))
                }
            }
        }, {
            key: 'createItem',
            value: function createItem(a) {
                var b = new bX();
                b.extend(a);
                if (a.recurrence) {
                    b.recurrence = a.recurrence;
                    a.recurrence.associateWith(b)
                }
                if (this.onItemCreating(new cd(b))) {
                    this.schedule.items.add(b);
                    this.onItemCreated(new cd(b))
                }
            }
        }, {
            key: 'editItem',
            value: function editItem(a, b, c) {
                var d = a;
                var e = c ? bk.InplaceEdit : bk.Edit;
                if (this.onItemModifying(new ce(a, b, e))) {
                    if (b.recurrence) {
                        if (b.recurrenceChanged) {
                            a.recurrence.extend(b.recurrence)
                        } else {
                            a.recurrence = b.recurrence;
                            b.recurrence.associateWith(a)
                        }
                    }
                    a.extend(b);
                    if (a.recurrence != null && b.recurrenceChanged != true) a.recurrence.markException(a, false);
                    if (a.recurrence != null && b.recurrence === null) {
                        var f = this.schedule.getMasterById(a.id);
                        d = f.clone();
                        f.extend(a);
                        a = f;
                        a.recurrenceState = 0;
                        a.recurrence = null
                    }
                    b.item = a;
                    this.onItemModified(new cf(a, d, e));
                    var g = this.view.getItemElements(a);
                    for (var i = 0, l = g.length; i < l; i++) {
                        this.view.removeAppointment(g[i])
                    }
                    this.invalidate(bp.ViewContent)
                }
            }
        }, {
            key: 'modifyItem',
            value: function modifyItem(a, b, c) {
                var d = {
                    startTime: b.startTime,
                    endTime: b.endTime,
                    allDayEvent: a.allDayEvent
                };
                if (this.onItemModifying(new ce(a, d, c))) {
                    var e = a;
                    if (b.resource) {
                        if (b.resource instanceof bR) {
                            d.location = b.resource
                        } else if (b.resource instanceof bQ) {
                            d.contacts = [];
                            d.contacts.push(b.resource)
                        } else if (b.resource instanceof bT) {
                            d.task = b.resource
                        } else if (b.resource instanceof bP) {
                            d.resources = [];
                            d.resources.push(b.resource)
                        }
                    }
                    a.extend(d);
                    if (a.recurrence != null) a.recurrence.markException(a, false);
                    d.item = a;
                    this.onItemModified(new cf(a, e, c))
                }
                var f = this.view.getItemElements(a);
                for (var i = 0, l = f.length; i < l; i++) {
                    this.view.items.splice(this.view.items.indexOf(f[i]), 1)
                }
                this.invalidate(bp.ViewContent)
            }
        }, {
            key: 'deleteItem',
            value: function deleteItem(a) {
                var b = false;
                if (this.onItemDeleting(new cd(a))) {
                    if (a.recurrence) {
                        if (this.onRecurringItemDeleting(new cd(a))) {
                            b = true
                        }
                    } else b = true
                }
                if (b) {
                    if (a.recurrence != null) a.recurrence.markException(a, true);
                    var c = this.view.getItemElements(a);
                    for (var i = 0, l = c.length; i < l; i++) {
                        this.view.removeAppointment(c[i])
                    }
                    this.schedule.items.remove(a);
                    this.onItemDeleted(new cd(a))
                }
            }
        }, {
            key: 'onItemSelectionChanged',
            value: function onItemSelectionChanged(a, b) {
                switch (b.action) {
                    case bC.Reset:
                        for (var i = 0, l = this.view.items.length; i < l; i++) {
                            bz.removeCssClass(this.view.items[i].element, "mfp-selected")
                        }
                        break;
                    case bC.Remove:
                        for (var i = 0, l = b.oldItems.length; i < l; i++) {
                            var c = b.oldItems[i]; {
                                var d = this.view.getItemElements(c);
                                for (var k = 0, m = d.length; k < m; k++) {
                                    bz.removeCssClass(d[k].element, "mfp-selected")
                                }
                            }
                        }
                        break;
                    case bC.Add:
                    default:
                        for (var i = 0, l = b.newItems.length; i < l; i++) {
                            var c = b.newItems[i]; {
                                var d = this.view.getItemElements(c);
                                for (var k = 0, m = d.length; k < m; k++) {
                                    bz.addCssClass(d[k].element, "mfp-selected")
                                }
                            }
                        }
                        break
                }
                this._itemSelectionChanged.raiseEvent(a, b)
            }
        }, {
            key: 'getAppointmentById',
            value: function getAppointmentById(a, b) {
                for (var i = 0, l = this.view.items.length; i < l; i++) {
                    if (this.view.items[i].item.id == a && this.view.items[i].item.occurrenceIndex == b) {
                        return this.view.items[i]
                    }
                }
                return null
            }
        }, {
            key: 'checkResource',
            value: function checkResource(e, a) {
                var b = this.currentView === P.Timetable || this.currentView === P.List || this.currentView === P.ResourceView;
                if (!b) return null;
                if (this.view.grouped === true) {
                    if (this._itemChangeResourceKey === bn.None || this._itemChangeResourceKey === bn.Shift && e.shiftKey || this._itemChangeResourceKey === bn.Control && e.ctrlKey || this._itemChangeResourceKey === bn.Alt && e.altKey) {
                        return null
                    } else return a
                }
                return null
            }
        }, {
            key: 'applyFilter',
            value: function applyFilter(a) {
                if (this._groupType >= 1) {
                    var b = [];
                    var c = this._currentView === P.Timetable || this._currentView === P.List || this._currentView === P.ResourceView;
                    var d = a;
                    for (var i = 0, l = d.length; i < l; i++) {
                        var e = d[i];
                        var f = true;
                        switch (this._groupType) {
                            case 1:
                            case 5:
                                if (this._groupType === bl.GroupByContacts && !c) break;
                                if (this._contacts.count() > 0) {
                                    f = false;
                                    if (e.contacts === undefined) {
                                        break
                                    }
                                    for (var j = 0, m = e.contacts.count(); j < m; j++) {
                                        var g = this._contacts.indexOfItem(e.contacts.items()[j]);
                                        if (g > -1) {
                                            f = true;
                                            break
                                        }
                                    }
                                }
                                break;
                            case 3:
                            case 6:
                                if (this._groupType === bl.GroupByLocations && !c) break;
                                if (this._locations.count() > 0) {
                                    f = false;
                                    var g = this._locations.indexOfItem(e.location);
                                    if (g > -1) {
                                        f = true;
                                        break
                                    }
                                }
                                break;
                            case 4:
                            case 7:
                                if (this._groupType === bl.GroupByTasks && !c) break;
                                if (this._tasks.count() > 0) {
                                    f = false;
                                    if (e.task === undefined) {
                                        break
                                    }
                                    var g = this._tasks.indexOfItem(e.task);
                                    if (g > -1) {
                                        f = true;
                                        break
                                    }
                                }
                                break;
                            case 2:
                            case 8:
                                if (this._groupType === bl.GroupByResources && !c) break;
                                if (this._resources.count() > 0) {
                                    f = false;
                                    if (e.resources === undefined) {
                                        break
                                    }
                                    for (var j = 0, m = e.resources.count(); j < m; j++) {
                                        var g = this._resources.indexOfItem(e.resources.items()[j]);
                                        if (g > -1) {
                                            f = true;
                                            break
                                        }
                                    }
                                }
                                break;
                            default:
                                break
                        }
                        if (f === false) {
                            b.push(d[i])
                        }
                        f = false
                    }
                    if (b.length > 0) {
                        var h;
                        for (var k = 0, l2 = b.length; k < l2; k++) {
                            h = 0;
                            while (h < d.length) {
                                if (d[h] === b[k]) {
                                    d.splice(h, 1)
                                } else {
                                    h++
                                }
                            }
                        }
                    }
                }
            }
        }, {
            key: 'draw',
            value: function draw() {
                if (this.view) bz.removeCssClass(this._element, this.view.cssClass);
                if (this.theme) bz.removeCssClass(this._element, this.theme);
                if (this.cssClass) bz.removeCssClass(this._element, this.cssClass);
                this.updateView();
                bz.addCssClass(this._element, "mfp-planner");
                bz.addCssClass(this._element, this.view.cssClass);
                if (this.theme) bz.addCssClass(this._element, this.theme);
                if (this.cssClass) bz.addCssClass(this._element, this.cssClass);
                this._element.innerHTML = "";
                this._element.appendChild(this.view.draw());
                return this._element
            }
        }, {
            key: 'render',
            value: function render() {
                this.draw();
                this.attach();
                if (this.rebuildId) {
                    clearTimeout(this.rebuildId);
                    this.rebuildId = null
                }
            }
        }, {
            key: 'repaint',
            value: function repaint(a) {
                if (!this._loaded) return;
                if (a) this.view.clearAppointments();
                this.view.clear();
                this.view.init();
                this._messenger.message(this);
                if (this.repaintId) {
                    clearTimeout(this.repaintId);
                    this.repaintId = null
                }
            }
        }, {
            key: 'invalidate',
            value: function invalidate(a) {
                switch (a) {
                    case bp.Full:
                    default:
                        if (!this.rebuildId) {
                            if (this.repaintId) {
                                clearTimeout(this.repaintId);
                                this.repaintId = null
                            }
                            this.rebuildId = setTimeout(this.rebuildDelegate, 20)
                        }
                        break;
                    case bp.ViewItems:
                        if (!this.repaintId) this.repaintId = setTimeout(this.repaintItemsDelegate, 10);
                        break;
                    case bp.ViewContent:
                        if (!this.repaintId) this.repaintId = setTimeout(this.repaintDelegate, 10);
                        break
                }
            }
        }, {
            key: 'updateView',
            value: function updateView() {
                switch (this.currentView) {
                    default:
                    case P.MonthRange:
                        this._view = new cD(this);
                        break;
                    case P.SingleMonth:
                        this._view = new cC(this);
                        break;
                    case P.WeekRange:
                        this._view = new cG(this);
                        break;
                    case P.List: {
                        if (this.listSettings.orientation == W.Vertical) this._view = new cL(this);
                        else this._view = new cK(this)
                    }
                    break;
                case P.Timetable: {
                    if (this.timetableSettings.orientation == W.Vertical) this._view = new cI(this);
                    else this._view = new cJ(this)
                }
                break;
                case P.ResourceView:
                    this._view = new cM(this, null, this.date);
                    break
                }
            }
        }, {
            key: 'processButtonClick',
            value: function processButtonClick(a) {
                var b = new bZ(a);
                this.onButtonClick(b);
                if (b.cancel) return;
                var t = a;
                var c = this._date.clone();
                if (Math.abs(t) === 1) {
                    switch (this.currentView) {
                        case P.Timetable:
                            var d = this.timetableSettings.scrollStep;
                            for (var i = 0; i < this.timetableSettings.dates.count(); i++) {
                                c = this.timetableSettings.dates.items()[i].clone();
                                this.timetableSettings.dates.items()[i] = bx.addDays(c, d * t)
                            }
                            this.raiseVisibleDateChanged(c, this.timetableSettings.dates.items()[0]);
                            return;
                        case P.SingleMonth:
                            this._date = this.advance(this.getMonthFirstDate(this._date), t, R.Month);
                            break;
                        case P.List:
                            this._date = this.advance(this._date, t, this.listSettings.cellUnits);
                            break
                    }
                } else {
                    if (this.currentView === P.SingleMonth) {
                        this._date = this.advance(this.getMonthFirstDate(this._date), t / 2, R.Year)
                    } else if (this.currentView === P.MonthRange) {
                        this._date = this.advance(this.getMonthFirstDate(this._date), this.monthRangeSettings.numberOfMonths * (t / 2), R.Month)
                    }
                }
                this.raiseVisibleDateChanged(c, this._date)
            }
        }, {
            key: 'raiseVisibleDateChanged',
            value: function raiseVisibleDateChanged(a, b) {
                if (de.autoRepaint && this._loaded) {
                    this.invalidate(bp.Full)
                }
                this.onVisibleDateChanged(new ch(b, a))
            }
        }, {
            key: 'onScheduleChanged',
            value: function onScheduleChanged(e) {
                if (this._loaded) {
                    this.invalidate(bp.ViewItems)
                }
            }
        }, {
            key: 'onCollectionChanged',
            value: function onCollectionChanged() {
                if (de.autoRepaint && this._loaded) {
                    this.invalidate(bp.Full)
                }
            }
        }, {
            key: 'onPropertyChanged',
            value: function onPropertyChanged(a, b, c) {
                if (a === "theme") {
                    bz.removeCssClass(this._element, b);
                    bz.addCssClass(this._element, c);
                    if (this.view) this.view.onThemeChanged(b, c);
                    return
                }
                if (de.autoRepaint && this._loaded) {
                    this.invalidate(bp.Full)
                }
            }
        }, {
            key: 'onViewSettingsChanged',
            value: function onViewSettingsChanged(a) {
                if (de.autoRepaint && this._loaded) {
                    this.invalidate(bp.Full)
                }
            }
        }, {
            key: 'onItemSettingsChanged',
            value: function onItemSettingsChanged(a) {
                if (de.autoRepaint && this._loaded) {
                    this.invalidate(bp.Full)
                }
            }
        }, {
            key: 'onCalendarLoad',
            value: function onCalendarLoad() {
                this._calendarLoad.raiseEvent(this, new bE())
            }
        }, {
            key: 'onVisibleDateChanged',
            value: function onVisibleDateChanged(a) {
                this._visibleDateChanged.raiseEvent(this, a)
            }
        }, {
            key: 'onSelectionStart',
            value: function onSelectionStart(a) {
                this._selectionStart.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onSelectionChanged',
            value: function onSelectionChanged(a) {
                this._selectionChanged.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onSelectionEnd',
            value: function onSelectionEnd(a) {
                this._selectionEnd.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemCreating',
            value: function onItemCreating(a) {
                this._itemCreating.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemCreated',
            value: function onItemCreated(a) {
                this._itemCreated.raiseEvent(this, a)
            }
        }, {
            key: 'onItemModifying',
            value: function onItemModifying(a) {
                this._itemModifying.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemModified',
            value: function onItemModified(a) {
                this._itemModified.raiseEvent(this, a)
            }
        }, {
            key: 'onItemDeleting',
            value: function onItemDeleting(a) {
                this._itemDeleting.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemDeleted',
            value: function onItemDeleted(a) {
                this._itemDeleted.raiseEvent(this, a)
            }
        }, {
            key: 'onRecurringItemDeleting',
            value: function onRecurringItemDeleting(a) {
                this._recurringItemDeleting.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemInplaceEditStart',
            value: function onItemInplaceEditStart(a) {
                this._itemInplaceEditStart.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemInplaceEditEnd',
            value: function onItemInplaceEditEnd(a) {
                this._itemInplaceEditEnd.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemReminderTriggered',
            value: function onItemReminderTriggered(a) {
                this._itemReminderTriggered.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onTaskReminderTriggered',
            value: function onTaskReminderTriggered(a) {
                this._taskReminderTriggered.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemDragStart',
            value: function onItemDragStart(a) {
                this._itemDragStart.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemDragEnd',
            value: function onItemDragEnd(a) {
                this._itemDragEnd.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemResizeStart',
            value: function onItemResizeStart(a) {
                this._itemResizeStart.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemResizeEnd',
            value: function onItemResizeEnd(a) {
                this._itemResizeEnd.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemClick',
            value: function onItemClick(a) {
                this._itemClick.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onItemDoubleClick',
            value: function onItemDoubleClick(a) {
                this._itemDoubleClick.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onFormShow',
            value: function onFormShow(a) {
                this._formShow.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onFormClose',
            value: function onFormClose(a) {
                this._formClose.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onButtonClick',
            value: function onButtonClick(a) {
                this._buttonClick.raiseEvent(this, a);
                return !a.cancel
            }
        }, {
            key: 'onCellClick',
            value: function onCellClick(a) {
                this._cellClick.raiseEvent(this, a)
            }
        }, {
            key: 'onCellDoubleClick',
            value: function onCellDoubleClick(a) {
                this._cellDoubleClick.raiseEvent(this, a)
            }
        }, {
            key: 'onHeaderClick',
            value: function onHeaderClick(a) {
                this._headerClick.raiseEvent(this, a)
            }
        }, {
            key: 'onHeaderDoubleClick',
            value: function onHeaderDoubleClick(a) {
                this._headerDoubleClick.raiseEvent(this, a)
            }
        }, {
            key: 'onCueClick',
            value: function onCueClick(a) {
                this._cueClick.raiseEvent(this, a)
            }
        }, {
            key: 'advance',
            value: function advance(a, b, c) {
                switch (c) {
                    case R.Second:
                        a = a.addSeconds(b);
                        break;
                    case R.Minute:
                        a = a.addMinutes(b);
                        break;
                    case R.Hour:
                        a = a.addHours(b);
                        break;
                    case R.Day:
                        a = a.addDays(b);
                        break;
                    case R.Week:
                        a = a.addWeeks(b);
                        break;
                    case R.Month:
                        a = a.addMonths(b);
                        break;
                    case R.Year:
                        a = a.addYears(b);
                        break;
                    default:
                        break
                }
                return a
            }
        }, {
            key: 'getMonthFirstVisibleDate',
            value: function getMonthFirstVisibleDate(a) {
                var t = a.clone();
                t = this.getMonthFirstDate(a);
                while (t.dayOfWeek !== +this.formatInfo.firstDayOfWeek) {
                    t = t.addDays(-1)
                }
                return t
            }
        }, {
            key: 'getMonthFirstDate',
            value: function getMonthFirstDate(a) {
                var t = a.clone();
                var b = t.day;
                return t.addDays(-b + 1)
            }
        }, {
            key: 'getWeekFirstDate',
            value: function getWeekFirstDate(a) {
                var t = a.clone();
                while (t.dayOfWeek !== +this.formatInfo.firstDayOfWeek) {
                    t = t.addDays(-1)
                }
                return t
            }
        }, {
            key: 'getWeekOfYear',
            value: function getWeekOfYear(a) {
                var t = a.clone();
                var d = t._date;
                d.setUTCDate(d.getUTCDate() + 4 - (d.getUTCDay() || 7));
                var b = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));
                return Math.ceil(((d - b) / 86400000 + 1) / 7)
            }
        }, {
            key: 'getDayName',
            value: function getDayName(a, b) {
                var c = a % 7;
                switch (b) {
                    case S.SingleLetter:
                        return this.formatInfo.days.narrow[c];
                    case S.Abbreviated:
                        return this.formatInfo.days.short[c];
                    case S.Full:
                        return this.formatInfo.days.long[c];
                    default:
                        break
                }
                return ""
            }
        }, {
            key: 'setTimer',
            value: function setTimer() {
                if (this.timer) {
                    if (!this.hasItemsToRemind() && !this.hasTasksToRemind()) {
                        clearInterval(this.timer.id);
                        this.timer = null
                    }
                } else {
                    if (this.hasItemsToRemind() || this.hasTasksToRemind()) {
                        this.timer = new db(this)
                    }
                }
            }
        }, {
            key: 'hasItemsToRemind',
            value: function hasItemsToRemind() {
                for (var i = 0, l = this.view.items.length; i < l; i++) {
                    var a = this.view.items[i].item;
                    if (a.reminder != null && !this.isReminderOutdated(a.reminder, a.startTime._date.valueOf())) {
                        return true
                    }
                }
                return false
            }
        }, {
            key: 'hasTasksToRemind',
            value: function hasTasksToRemind() {
                for (var i = 0, l = this.schedule.tasks.items().length; i < l; i++) {
                    var t = this._schedule.tasks.items()[i];
                    if (t.reminder != null && !this.isReminderOutdated(t.reminder)) {
                        return true
                    }
                }
                return false
            }
        }, {
            key: 'isReminderOutdated',
            value: function isReminderOutdated(a, b) {
                if (a.type === undefined) {
                    throw new Error('reminder is not valid');
                }
                var c = new bx(new Date());
                switch (a.type) {
                    case 0:
                        if (a.time.valueOf() < c._date.valueOf()) {
                            return true
                        }
                        return false;
                    case 1:
                        if (b === undefined) {
                            return true
                        }
                        if (b - a.timeInterval < c._date.valueOf()) {
                            return true
                        }
                        return false
                }
            }
        }, {
            key: 'getTimeCell',
            value: function getTimeCell(a, b, c) {
                if (c == null && this.view.grouped) {
                    return null
                }
                var d = this.view.resources;
                var e = 0;
                if (c != null) {
                    e = d.indexOf(c);
                    if (e == -1 && !this.view.grouped) e = 0
                }
                if (e == -1) return null;
                return this.view.getTimeCell(a, b, e)
            }
        }, {
            key: 'getTimeCells',
            value: function getTimeCells(a, b, c, d) {
                if (a === null || typeof a === "undefined" || typeof a._date === "undefined") {
                    return []
                }
                if (d == null && this.view.grouped) {
                    return []
                }
                var e = this.view.resources;
                var f = 0;
                if (d != null) {
                    f = e.indexOf(d);
                    if (f == -1 && !this.view.grouped) f = 0
                }
                if (f == -1) return null;
                return this.view.getTimeCells(a, b, c, f)
            }
        }, {
            key: 'getCellAt',
            value: function getCellAt(x, y) {
                if (this.view) return this.view.getCellAt(x, y);
                return null
            }
        }, {
            key: 'getResourceName',
            value: function getResourceName(a) {
                var b = "";
                switch (this.realGroupType) {
                    case bl.GroupByContacts: {
                        if (a instanceof bQ) {
                            b = this.formatName(a, this.contactNameFormat)
                        }
                    }
                    break;
                case bl.GroupByResources: {
                    if (a) b = a.name
                }
                break;
                case bl.GroupByLocations: {
                    if (a instanceof bR) b = a.name
                }
                break;
                case bl.GroupByTasks: {
                    if (a instanceof bT) b = a.subject
                }
                break
                }
                return b
            }
        }, {
            key: 'formatName',
            value: function formatName(a, b) {
                var s = "";
                for (var c in b) {
                    switch (b[c]) {
                        case 'F':
                            s += a.firstName;
                            break;
                        case 'M':
                            s += a.middleName;
                            break;
                        case 'L':
                            s += a.lastName;
                            break;
                        default:
                            s += b[c];
                            break
                    }
                }
                return s.replace(/^[\s\uFEFF\xA0,.]+|[\s\uFEFF\xA0,.]+$/g, '')
            }
        }, {
            key: 'formatTooltip',
            value: function formatTooltip(a, b) {
                var d = [];
                var e = false;
                var f = false;
                var g = false;
                var h = false;
                var j = "";
                for (var i = 0, l = b.length; i < l; i++) {
                    var c = b[i];
                    if (f || g) {
                        if (h) {
                            if (c === ']') {
                                if (f) {
                                    d.push(a.startTime.toString(j, this.formatInfo))
                                } else if (g) {
                                    d.push(a.endTime.toString(j, this.formatInfo))
                                }
                                f = false;
                                g = false;
                                h = false;
                                j = "";
                                continue
                            }
                            j += c;
                            continue
                        }
                        if (c === '[') {
                            h = true;
                            j = "";
                            continue
                        }
                        continue
                    }
                    if (c === '%') {
                        if (e) {
                            d.push('%');
                            e = false;
                            continue
                        }
                        e = true;
                        continue
                    }
                    if (e) {
                        switch (c) {
                            case 'h':
                                d.push(a.subject);
                                break;
                            case 'd':
                                d.push(a.details);
                                break;
                            case 's':
                                f = true;
                                break;
                            case 'e':
                                g = true;
                                break;
                            default:
                                break
                        }
                        e = false;
                        continue
                    }
                    d.push(c)
                }
                var k = d.join('').trim();
                return k
            }
        }, {
            key: 'sortAppointments',
            value: function sortAppointments(a, b) {
                if (a.item.priority != b.item.priority) {
                    return b.item.priority - a.item.priority
                }
                if (a.item.startTime._date.getTime() != b.item.startTime._date.getTime()) {
                    return a.item.startTime._date.getTime() - b.item.startTime._date.getTime()
                }
                if (a.length != b.length) {
                    return b.length - a.length
                }
                if (a.isPartial && !b.isPartial) {
                    return -1
                }
                if (b.isPartial && !a.isPartial) {
                    return 1
                }
                if (a.item.headerText != '' && b.item.headerText === '') {
                    return -1
                }
                if (a.item.headerText === '' && b.item.headerText != '') {
                    return 1
                }
                if (a.item.headerText != '' && b.item.headerText != '' && a.item.headerText != b.item.headerText) {
                    return a.item.headerText.charCodeAt(0) - b.item.headerText.charCodeAt(0)
                }
                return 0
            }
        }, {
            key: 'itemCloneKeyPressed',
            value: function itemCloneKeyPressed(e) {
                if (this._itemCloneKey === 0) {
                    return false
                }
                if (this._itemCloneKey === bn.Shift && e.shiftKey) {
                    return true
                }
                if (this._itemCloneKey === bn.Control && e.ctrlKey) {
                    return true
                }
                if (this._itemCloneKey === bn.Alt && e.altKey) {
                    return true
                }
                return false
            }
        }, {
            key: 'allowDelete',
            value: function allowDelete() {
                if (this.popups.get('ItemsCueForm')) return false;
                if (this.view.inplaceEditing === true || this.view._dragging === true || this.view._resizing === true) {
                    return false
                }
                if (this._itemSelection.count() === 0) {
                    return false
                }
                return true
            }
        }, {
            key: 'onKeyUp',
            value: function onKeyUp(e) {
                if (e.keyCode === 46 || e.keyCode === 127) {
                    if (this.allowDelete()) {
                        var a = this._itemSelection.items();
                        var b = new cd(c);
                        for (var i = 0, l = a.length; i < l; i++) {
                            var c = a[i];
                            if (c.recurrence) {
                                if (this.onItemDeleting(b)) {
                                    if (this.onRecurringItemDeleting(b)) {
                                        this.deleteItem(c)
                                    }
                                }
                            } else {
                                if (this.onItemDeleting(b)) {
                                    this.deleteItem(c)
                                }
                            }
                        }
                    }
                }
                var d = this.popups._keys.items()[this.popups.count - 1];
                var f = this.popups.get(d);
                if (f) f.onKeyUp(e)
            }
        }, {
            key: 'onResize',
            value: function onResize(e) {
                if (this.view) {
                    this.view.getDimensions();
                    this.invalidate(bp.ViewContent)
                }
            }
        }, {
            key: 'element',
            get: function get$$1() {
                return this.getElement()
            }
        }, {
            key: 'header',
            get: function get$$1() {
                if (this.view) return this.view.getHeader();
                return null
            }
        }, {
            key: 'cells',
            get: function get$$1() {
                if (this.view) return this.view.cells;
                return null
            }
        }, {
            key: 'view',
            get: function get$$1() {
                return this._view
            }
        }, {
            key: 'groupResources',
            get: function get$$1() {
                switch (this.realGroupType) {
                    case bl.GroupByContacts:
                        return this.contacts;
                    case bl.GroupByResources:
                        return this.resources;
                    case bl.GroupByLocations:
                        return this.locations;
                    case bl.GroupByTasks:
                        return this.tasks
                }
                return new bO()
            }
        }, {
            key: 'realGroupType',
            get: function get$$1() {
                switch (this.groupType) {
                    case bl.GroupByContacts:
                        if (this.contacts.count() === 0) return bl.None;
                        break;
                    case bl.GroupByResources:
                        if (this.resources.count() === 0) return bl.None;
                        break;
                    case bl.GroupByLocations:
                        if (this.locations.count() === 0) return bl.None;
                        break;
                    case bl.GroupByTasks:
                        if (this.tasks.count() === 0) return bl.None;
                        break;
                    default:
                        return bl.None
                }
                return this.groupType
            }
        }, {
            key: 'calendarLoad',
            get: function get$$1() {
                return this._calendarLoad
            }
        }, {
            key: 'visibleDateChanged',
            get: function get$$1() {
                return this._visibleDateChanged
            }
        }, {
            key: 'selectionStart',
            get: function get$$1() {
                return this._selectionStart
            }
        }, {
            key: 'selectionChanged',
            get: function get$$1() {
                return this._selectionChanged
            }
        }, {
            key: 'selectionEnd',
            get: function get$$1() {
                return this._selectionEnd
            }
        }, {
            key: 'itemSelectionChanged',
            get: function get$$1() {
                return this._itemSelectionChanged
            }
        }, {
            key: 'itemCreating',
            get: function get$$1() {
                return this._itemCreating
            }
        }, {
            key: 'itemCreated',
            get: function get$$1() {
                return this._itemCreated
            }
        }, {
            key: 'itemModifying',
            get: function get$$1() {
                return this._itemModifying
            }
        }, {
            key: 'itemModified',
            get: function get$$1() {
                return this._itemModified
            }
        }, {
            key: 'itemDeleting',
            get: function get$$1() {
                return this._itemDeleting
            }
        }, {
            key: 'itemDeleted',
            get: function get$$1() {
                return this._itemDeleted
            }
        }, {
            key: 'recurringItemDeleting',
            get: function get$$1() {
                return this._recurringItemDeleting
            }
        }, {
            key: 'itemInplaceEditStart',
            get: function get$$1() {
                return this._itemInplaceEditStart
            }
        }, {
            key: 'itemInplaceEditEnd',
            get: function get$$1() {
                return this._itemInplaceEditEnd
            }
        }, {
            key: 'itemReminderTriggered',
            get: function get$$1() {
                return this._itemReminderTriggered
            }
        }, {
            key: 'taskReminderTriggered',
            get: function get$$1() {
                return this._taskReminderTriggered
            }
        }, {
            key: 'itemDragStart',
            get: function get$$1() {
                return this._itemDragStart
            }
        }, {
            key: 'itemDragEnd',
            get: function get$$1() {
                return this._itemDragEnd
            }
        }, {
            key: 'itemResizeStart',
            get: function get$$1() {
                return this._itemResizeStart
            }
        }, {
            key: 'itemResizeEnd',
            get: function get$$1() {
                return this._itemResizeEnd
            }
        }, {
            key: 'itemClick',
            get: function get$$1() {
                return this._itemClick
            }
        }, {
            key: 'itemDoubleClick',
            get: function get$$1() {
                return this._itemDoubleClick
            }
        }, {
            key: 'formShow',
            get: function get$$1() {
                return this._formShow
            }
        }, {
            key: 'formClose',
            get: function get$$1() {
                return this._formClose
            }
        }, {
            key: 'buttonClick',
            get: function get$$1() {
                return this._buttonClick
            }
        }, {
            key: 'cellClick',
            get: function get$$1() {
                return this._cellClick
            }
        }, {
            key: 'cellDoubleClick',
            get: function get$$1() {
                return this._cellDoubleClick
            }
        }, {
            key: 'headerClick',
            get: function get$$1() {
                return this._headerClick
            }
        }, {
            key: 'headerDoubleClick',
            get: function get$$1() {
                return this._headerDoubleClick
            }
        }, {
            key: 'cueClick',
            get: function get$$1() {
                return this._cueClick
            }
        }, {
            key: 'date',
            get: function get$$1() {
                return this._date
            },
            set: function set$$1(a) {
                var b = this._date;
                this._date = a;
                this.onPropertyChanged('date', b, a)
            }
        }, {
            key: 'endDate',
            get: function get$$1() {
                return this._endDate ? this._endDate : bx.addDays(this._date, bx.getDaysInMonth(this._date))
            },
            set: function set$$1(a) {
                var b = this._endDate;
                this._endDate = a;
                this.onPropertyChanged('endDate', b, a)
            }
        }, {
            key: 'tasks',
            get: function get$$1() {
                return this._tasks
            }
        }, {
            key: 'contacts',
            get: function get$$1() {
                return this._contacts
            }
        }, {
            key: 'resources',
            get: function get$$1() {
                return this._resources
            }
        }, {
            key: 'locations',
            get: function get$$1() {
                return this._locations
            }
        }, {
            key: 'cssClass',
            get: function get$$1() {
                return this._cssClass
            },
            set: function set$$1(a) {
                var b = this._cssClass;
                this._cssClass = a;
                if (this._element) {
                    bz.removeCssClass(this._element, b);
                    bz.addCssClass(this._element, a)
                }
            }
        }, {
            key: 'enabled',
            get: function get$$1() {
                return this._enabled
            },
            set: function set$$1(a) {
                this._enabled = a
            }
        }, {
            key: 'currentView',
            get: function get$$1() {
                return this._currentView
            },
            set: function set$$1(a) {
                this.detach();
                var b = this._currentView;
                this._currentView = a;
                this.onPropertyChanged('currentView', b, a)
            }
        }, {
            key: 'theme',
            get: function get$$1() {
                return this._theme
            },
            set: function set$$1(a) {
                var b = this._theme;
                this._theme = a;
                this.onPropertyChanged('theme', b, a)
            }
        }, {
            key: 'groupType',
            get: function get$$1() {
                return this._groupType
            },
            set: function set$$1(a) {
                var b = this._groupType;
                this._groupType = a;
                this.onPropertyChanged('groupType', b, a)
            }
        }, {
            key: 'allowInplaceEdit',
            get: function get$$1() {
                return this._allowInplaceEdit
            },
            set: function set$$1(a) {
                this._allowInplaceEdit = a
            }
        }, {
            key: 'useForms',
            get: function get$$1() {
                return this._useForms
            },
            set: function set$$1(a) {
                this._useForms = a
            }
        }, {
            key: 'showTooltips',
            get: function get$$1() {
                return this._showTooltips
            },
            set: function set$$1(a) {
                this._showTooltips = a
            }
        }, {
            key: 'contactNameFormat',
            get: function get$$1() {
                return this._contactNameFormat
            },
            set: function set$$1(a) {
                this._contactNameFormat = a
            }
        }, {
            key: 'schedule',
            get: function get$$1() {
                return this._schedule
            },
            set: function set$$1(a) {
                if (this._schedule) {
                    this._schedule.changed.removeEventListener(this._scheduleChangedHandler)
                }
                this._schedule = a;
                this._schedule.changed.addEventListener(this._scheduleChangedHandler)
            }
        }, {
            key: 'selection',
            get: function get$$1() {
                return this._selection
            }
        }, {
            key: 'itemSelection',
            get: function get$$1() {
                return this._itemSelection
            }
        }, {
            key: 'popups',
            get: function get$$1() {
                return this._popups
            }
        }, {
            key: 'monthSettings',
            get: function get$$1() {
                var c = this;
                if (!this._monthSettings) {
                    this._monthSettings = new cN(this);
                    this._monthSettings._propertyChanged.addEventListener(function(a, b) {
                        c.onViewSettingsChanged(a, b)
                    })
                }
                return this._monthSettings
            }
        }, {
            key: 'timetableSettings',
            get: function get$$1() {
                var c = this;
                if (!this._timetableSettings) {
                    this._timetableSettings = new cQ(this);
                    this._timetableSettings._propertyChanged.addEventListener(function(a, b) {
                        c.onViewSettingsChanged(a, b)
                    })
                }
                return this._timetableSettings
            }
        }, {
            key: 'listSettings',
            get: function get$$1() {
                var c = this;
                if (!this._listSettings) {
                    this._listSettings = new cR(this);
                    this._listSettings._propertyChanged.addEventListener(function(a, b) {
                        c.onViewSettingsChanged(a, b)
                    })
                }
                return this._listSettings
            }
        }, {
            key: 'weekRangeSettings',
            get: function get$$1() {
                var c = this;
                if (!this._weekRangeSettings) {
                    this._weekRangeSettings = new cP(this);
                    this._weekRangeSettings._propertyChanged.addEventListener(function(a, b) {
                        c.onViewSettingsChanged(a, b)
                    })
                }
                return this._weekRangeSettings
            }
        }, {
            key: 'resourceViewSettings',
            get: function get$$1() {
                var c = this;
                if (!this._resourceViewSettings) {
                    this._resourceViewSettings = new cT(this);
                    this._resourceViewSettings._propertyChanged.addEventListener(function(a, b) {
                        c.onViewSettingsChanged(a, b)
                    })
                }
                return this._resourceViewSettings
            }
        }, {
            key: 'monthRangeSettings',
            get: function get$$1() {
                var c = this;
                if (!this._monthRangeSettings) {
                    this._monthRangeSettings = new cO(this);
                    this._monthRangeSettings._propertyChanged.addEventListener(function(a, b) {
                        c.onViewSettingsChanged(a, b)
                    })
                }
                return this._monthRangeSettings
            }
        }, {
            key: 'itemSettings',
            get: function get$$1() {
                var b = this;
                if (!this._itemSettings) {
                    this._itemSettings = new cU(this);
                    this._itemSettings._propertyChanged.addEventListener(function(a) {
                        b.onItemSettingsChanged(a)
                    })
                }
                return this._itemSettings
            }
        }, {
            key: 'locale',
            get: function get$$1() {
                if (!this._locale) this._locale = dc;
                return this._locale
            },
            set: function set$$1(a) {
                this._locale = a
            }
        }, {
            key: 'formatInfo',
            get: function get$$1() {
                if (!this._formatInfo) {
                    this._formatInfo = this.locale.date
                }
                return this._formatInfo
            }
        }, {
            key: 'localInfo',
            get: function get$$1() {
                if (!this._localInfo) {
                    this._localInfo = this.locale.strings;
                    if (!this._localInfo) {
                        this._localInfo = dc.strings
                    }
                }
                return this._localInfo
            }
        }, {
            key: 'licenseLocation',
            get: function get$$1() {
                return this._licenseLocation
            },
            set: function set$$1(a) {
                if (this._licenseLocation != a) {
                    this._licenseLocation = a
                }
            }
        }], [{
            key: 'ns',
            get: function get$$1() {
                return "PorTutor.Scheduling"
            }
        }, {
            key: 'autoRepaint',
            get: function get$$1() {
                return this._autoRepaint != false
            },
            set: function set$$1(a) {
                this._autoRepaint = a
            }
        }]);
        return de
    }();
    O.Calendar = de;
    O.Contact = bQ;
    O.DateTime = bx;
    O.CalendarView = P;
    O.ResourceViewTimeline = Q;
    O.TimeUnit = R;
    O.DayOfWeekFormat = S;
    O.MainHeaderStyle = T;
    O.VerticalHeaderStyle = U;
    O.HorizontalHeaderStyle = V;
    O.Orientation = W;
    O.TaskPriority = X;
    O.TaskStatus = Y;
    O.ReminderType = Z;
    O.RecurrenceState = ba;
    O.RecurrencePattern = bb;
    O.DailyRecurrence = bc;
    O.MonthlyRecurrence = bd;
    O.YearlyRecurrence = be;
    O.Occurrence = bf;
    O.DayOfWeekType = bg;
    O.RecurrenceEnd = bh;
    O.DayOfWeek = bi;
    O.DaysOfWeek = bj;
    O.ItemModifyAction = bk;
    O.GroupType = bl;
    O.WeekRangeViewStyle = bm;
    O.Keys = bn;
    O.HeaderType = bo;
    O.RepaintType = bp;
    O.FormEventArgs = bY;
    O.ButtonEventArgs = bZ;
    O.CellEventArgs = ca;
    O.HeaderEventArgs = cb;
    O.SelectionEventArgs = cc;
    O.ItemEventArgs = cd;
    O.ItemModifyingEventArgs = ce;
    O.ItemModifiedEventArgs = cf;
    O.TaskEventArgs = cg;
    O.DateChangedEventArgs = ch;
    O.Item = bX;
    O.ItemSettings = cU;
    O.ListSettings = cR;
    O.Location = bR;
    O.MonthRangeSettings = cO;
    O.MonthSettings = cN;
    O.Recurrence = bW;
    O.Reminder = bS;
    O.Resource = bP;
    O.ResourceViewSettings = cT;
    O.Schedule = cW;
    O.Selection = cZ;
    O.Task = bT;
    O.TimelineSettings = cS;
    O.TimeRange = cq;
    O.TimeSpan = bw;
    O.TimetableSettings = cQ;
    O.ViewCell = cA;
    O.WeekRangeSettings = cP;
    O.Dictionary = bV;
    O.IEnumerable = by;
    O.List = bB;
    O.ObservableCollection = bO;
    O.BaseForm = cl;
    O.BaseControl = ci;
    O.EditBox = cj;
    O.CheckBoxList = ck;
    Object.defineProperty(O, '__esModule', {
        value: true
    })
})))